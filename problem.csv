"id","title","description","input_description","output_description","samples","test_case_id","test_case_score","hint","languages","template","create_time","last_update_time","time_limit","memory_limit","spj","spj_language","spj_code","spj_version","rule_type","visible","difficulty","source","submission_number","accepted_number","created_by_id","_id","statistic_info","total_score","contest_id","is_public","spj_compile_ok","io_mode","share_submission"
1,"A+B Problem","<p>请计算两个整数的和并输出结果。</p><p>注意不要有不必要的输出，比如&quot;请输入 a 和 b 的值: &quot;。</p>","<p>一行两个整数。</p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""1 1"", ""output"": ""2""}]","32b88b768bf339b77221caab837b2251","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-14 14:14:29.402157+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",1482,694,1,"1-1","{""0"": 694, ""1"": 1, ""4"": 140, ""-1"": 217, ""-2"": 430}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
2,"2n皇后问题","<p>给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</p>","<p>输入的第一行为一个整数n，表示棋盘的大小。　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p>","<p>输出一个整数，表示总共有多少种放法。</p>","[{""input"": ""4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1"", ""output"": ""2""}, {""input"": ""4\n1 0 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1"", ""output"": ""0""}]","4af2a769855717dc9b6625f9d55d64a1","[{""score"": 13, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 13, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 13, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 13, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 13, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 13, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 13, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 13, ""input_name"": ""8.in"", ""output_name"": ""8.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-15 07:42:33.025428+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",453,150,1,"1-2","{""0"": 150, ""1"": 16, ""4"": 41, ""-1"": 147, ""-2"": 99}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
3,"2n皇后问题","<p>给定一个n*n的棋盘，棋盘中有一些位置不能放皇后。现在要向棋盘中放入n个黑皇后和n个白皇后，使任意的两个黑皇后都不在同一行、同一列或同一条对角线上，任意的两个白皇后都不在同一行、同一列或同一条对角线上。问总共有多少种放法？n小于等于8。</p>","<p>输入的第一行为一个整数n，表示棋盘的大小。　　接下来n行，每行n个0或1的整数，如果一个整数为1，表示对应的位置可以放皇后，如果一个整数为0，表示对应的位置不可以放皇后。</p>","<p>　输出一个整数，表示总共有多少种放法。</p>","[{""input"": ""4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1"", ""output"": ""2""}, {""input"": ""4\n1 0 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1"", ""output"": ""0""}]","4af2a769855717dc9b6625f9d55d64a1","[{""score"": 13, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 13, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 13, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 13, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 13, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 13, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 13, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 13, ""input_name"": ""8.in"", ""output_name"": ""8.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-15 14:19:25.918963+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",3,1,1,"1","{""0"": 1, ""-2"": 2}",0,1,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
4,"A+B Problem","<p>请计算两个整数的和并输出结果。</p><p>注意不要有不必要的输出，比如&quot;请输入 a 和 b 的值: &quot;，示例代码见隐藏部分。</p>","<p>1 1</p>","<p>2</p>","[{""input"": ""1 1"", ""output"": ""2""}]","32b88b768bf339b77221caab837b2251","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-15 14:19:29.721681+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",4,3,1,"2","{""0"": 3, ""-1"": 1}",0,1,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
5,"A+B Problem","<p>请计算两个整数的和并输出结果。</p><p>注意不要有不必要的输出，比如&quot;请输入 a 和 b 的值: &quot;，示例代码见隐藏部分。</p>","<p>1 1</p>","<p>2</p>","[{""input"": ""1 1"", ""output"": ""2""}]","32b88b768bf339b77221caab837b2251","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-16 02:46:13.57668+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",1,1,1,"102","{""0"": 1}",0,3,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
6,"带分数","<p>100 可以表示为带分数的形式：100 = 3 + 69258 / 714。还可以表示为：100 = 82 + 3546 / 197。注意特征：带分数中，数字1~9分别出现且只出现一次（不包含0）。类似这样的带分数，100 有 11 种表示法。</p>","<p>从标准输入读入一个正整数N (N&lt;1000*1000)</p>","<p>程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。注意：不要求输出每个表示，只统计有多少表示法！</p>","[{""input"": ""100"", ""output"": ""11""}, {""input"": ""105"", ""output"": ""6""}]","e212965a8401de2b842dd5829a839505","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-16 09:53:55.036615+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,1,1,"1","{""0"": 1, ""-2"": 1}",0,5,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
7,"FJ的字符串","<p>FJ在沙盘上写了这样一些字符串：　　A1 = “A”　　A2 = “ABA”　　A3 = “ABACABA”　　A4 = “ABACABADABACABA”　　… …　　你能找出其中的规律并写所有的数列AN吗？</p>","<p>仅有一个数：N ≤ 26。</p>","<p>请输出相应的字符串AN，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。</p>","[{""input"": ""3"", ""output"": ""ABACABA""}]","6d7877b0b1c9842dc3d003c3542e4eb5","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:32:30.44222+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",563,269,1,"1-3","{""0"": 269, ""1"": 2, ""4"": 28, ""-1"": 121, ""-2"": 137}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
8,"Huffuman树","<p>Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。</p><p>给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下：</p><p>1. 找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa + pb。</p><p>2. 重复步骤1，直到{pi}中只剩下一个数。</p><p>在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。</p><p>本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。</p><p>例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下：</p><p>1. 找到{5, 3, 8, 2, 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。</p><p>2. 找到{5, 8, 9, 5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。</p><p>3. 找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。</p><p>4. 找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。</p><p>5. 现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。</p>","<p>输入的第一行包含一个正整数n（n&lt;=100）。　　接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。</p>","<p>输出用这些数构造Huffman树的总费用。</p>","[{""input"": ""5\n5 3 8 2 9\n"", ""output"": ""59""}]","7b7f3d4c8c1e9f20c3debe079c20568a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:34:39.902835+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",460,209,1,"1-4","{""0"": 209, ""1"": 12, ""4"": 55, ""-1"": 107, ""-2"": 77}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
9,"Sine之舞","<p>最近FJ为他的奶牛们开设了数学分析课，FJ知道若要学好这门课，必须有一个好的三角函数基本功。所以他准备和奶牛们做一个“Sine之舞”的游戏，寓教于乐，提高奶牛们的计算能力。</p><p>不妨设</p><p>An=sin(1–sin(2+sin(3–sin(4+...sin(n))...)</p><p>Sn=(...(A1+n)A2+n-1)A3+...+2)An+1</p><p>FJ想让奶牛们计算Sn的值，请你帮助FJ打印出Sn的完整表达式，以方便奶牛们做题。</p>","<p>仅有一个数：N&lt;201。</p>","<p>请输出相应的表达式Sn，以一个换行符结束。输出中不得含有多余的空格或换行、回车符。</p>","[{""input"": ""3"", ""output"": ""((sin(1)+3)sin(1–sin(2))+2)sin(1–sin(2+sin(3)))+1""}]","c57293ac21b4113a9e0e359463fca4ec","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:36:55.041117+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",288,160,1,"1-5","{""0"": 160, ""4"": 26, ""-1"": 51, ""-2"": 51}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
10,"报时助手","<p>给定当前的时间，请用英文的读法将它读出来。</p><p>时间用时h和分m表示，在英文的读法中，读一个时间的方法是：</p><p>如果m为0，则将时读出来，然后加上“o&#039;clock”，如3:00读作“three o&#039;clock”。</p><p>如果m不为0，则将时读出来，然后将分读出来，如5:30读作“five thirty”。</p><p>时和分的读法使用的是英文数字的读法，其中0~20读作：</p><p>0:zero, 1: one, 2:two, 3:three, 4:four, 5:five, 6:six, 7:seven, 8:eight, 9:nine, 10:ten, 11:eleven, 12:twelve, 13:thirteen, 14:fourteen, 15:fifteen, 16:sixteen, 17:seventeen, 18:eighteen, 19:nineteen, 20:twenty。</p><p>30读作thirty，40读作forty，50读作fifty。</p><p>对于大于20小于60的数字，首先读整十的数，然后再加上个位数。如31首先读30再加1的读法，读作“thirty one”。</p><p>按上面的规则21:54读作“twenty one fifty four”，9:07读作“nine seven”，0:15读作“zero fifteen”。</p>","<p>输入包含两个非负整数h和m，表示时间的时和分。非零的数字前没有前导0。h小于24，m小于60。</p>","<p>输出时间时刻的英文。</p>","[{""input"": ""0 15"", ""output"": ""zero fifteen""}]","9a0d1ee9b6d7b7d91f3ac89f365747fb","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:38:42.516856+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",459,134,1,"1-6","{""0"": 134, ""4"": 26, ""-1"": 180, ""-2"": 85}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
11,"分解质因数","<p>求出区间[a,b]中所有整数的质因数分解。</p>","<p>输入两个整数a，b。</p>","<p>每行输出一个数的分解，形如k=a1a2a3...(a1&lt;=a2&lt;=a3...，k也是从小到大的)(具体可看样例)</p>","[{""input"": ""3 10"", ""output"": ""3=3\n4=2*2\n5=5\n6=2*3\n7=7\n8=2*2*2\n9=3*3\n10=2*5\n""}]","6e47c5a51e7b2980ad2292ecbe267037","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>提示</p><p>先筛出所有素数，然后再分解。</p><p>数据规模和约定</p><p>2&lt;=a&lt;=b&lt;=10000</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:40:21.839839+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",539,199,1,"1-7","{""0"": 199, ""1"": 56, ""4"": 62, ""-1"": 146, ""-2"": 67}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
12,"高精度加法","<p>输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。算法描述</p><p>由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。</p><p>定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。</p><p>计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。</p><p>最后将C输出即可。</p>","<p>输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。</p>","<p>输出一行，表示a + b的值。</p>","[{""input"": ""20100122201001221234567890\n2010012220100122\n"", ""output"": ""20100122203011233454668012""}]","ac0d81ea3c669342e1fd6242c1e9bb3c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:41:54.972086+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",337,134,1,"1-8","{""0"": 134, ""1"": 7, ""4"": 17, ""-1"": 113, ""-2"": 66}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
13,"龟兔赛跑预测","<p>话说这个世界上有各种各样的兔子和乌龟，但是 研究发现，所有的兔子和乌龟都有一个共同的特点——喜欢赛跑。于是世界上各个角落都不断在发生着乌龟和兔子的比赛，小华对此很感兴趣，于是决定研究不同兔 子和乌龟的赛跑。他发现，兔子虽然跑比乌龟快，但它们有众所周知的毛病——骄傲且懒惰，于是在与乌龟的比赛中，一旦任一秒结束后兔子发现自己领先t米或以 上，它们就会停下来休息s秒。对于不同的兔子，t，s的数值是不同的，但是所有的乌龟却是一致——它们不到终点决不停止。</p><p>然而有些比赛相当漫长，全程观看会耗费大量时间，而小华发现只要在每场比赛开始后记录下兔子和乌龟的数据——兔子的速度v1（表示每秒兔子能跑v1 米），乌龟的速度v2，以及兔子对应的t，s值，以及赛道的长度l——就能预测出比赛的结果。但是小华很懒，不想通过手工计算推测出比赛的结果，于是他找 到了你——华东师范大学某系的高材生——请求帮助，请你写一个程序，对于输入的一场比赛的数据v1，v2，t，s，l，预测该场比赛的结果。</p>","<p>输入只有一行，包含用空格隔开的五个正整数v1，v2，t，s，l，其中(v1,v2&lt;=100;t&lt;=300;s&lt;=10;l&lt;=10000且为v1,v2的公倍数)</p>","<p>输出包含两行，第一行输出比赛结果——一个大写字母“T”或“R”或“D”，分别表示乌龟获胜，兔子获胜，或者两者同时到达终点。　第二行输出一个正整数，表示获胜者（或者双方同时）到达终点所耗费的时间（秒数）。</p>","[{""input"": ""10 5 5 2 20"", ""output"": ""D\n4\n""}, {""input"": ""10 5 5 1 20"", ""output"": ""R\n3\n""}, {""input"": ""10 5 5 3 20"", ""output"": ""T\n4\n""}]","aa55a79a3c32cf5c0c84a136f2d4d72c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 11:45:56.361769+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",621,154,1,"1-9","{""0"": 154, ""1"": 6, ""4"": 7, ""-1"": 320, ""-2"": 100}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
14,"横向打印二叉树","<p>二叉树可以用于排序。其原理很简单：对于一个排序二叉树添加新节点时，先与根节点比较，若小则交给左子树继续处理，否则交给右子树。</p><p>当遇到空子树时，则把该节点放入那个位置。</p><p>比如，10 8 5 7 12 4 的输入顺序，应该建成二叉树如下图所示，其中.表示空白。</p><p>...|-12<br />10-|<br />...|-8-|<br />.......|...|-7<br />.......|-5-|<br />...........|-4</p><p>本题目要求：根据已知的数字，建立排序二叉树，并在标准输出中横向打印该二叉树。</p>","<p>输入数据为一行空格分开的N个整数。 N&lt;100，每个数字不超过10000。</p>","<p>输出该排序二叉树的横向表示。为了便于评卷程序比对空格的数目，请把空格用句点代替：</p>","[{""input"": ""10 5 20 \n"", ""output"": ""...|-20 \n10-| \n...|-5 \n""}, {""input"": ""5 10 20 8 4 7 \n"", ""output"": "".......|-20 \n..|-10-| ..|\n....|-8-| ..|\n........|-7 \n5-| \n..|-4 \n""}]","3169ba7d921c6042ac0109ee99576d4f","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:01:18.258534+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",102,48,1,"1-35","{""0"": 48, ""4"": 2, ""-1"": 32, ""-2"": 20}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
15,"回形取数","<p>回形取数就是沿矩阵的边取数，若当前方向上无数可取或已经取过，则左转90度。一开始位于矩阵左上角，方向向下。</p>","<p>输入第一行是两个不超过200的正整数m, n，表示矩阵的行和列。接下来m行每行n个整数，表示这个矩阵。</p>","<p>输出只有一行，共mn个数，为输入矩阵回形取数得到的结果。数之间用一个空格分隔，行末不要有多余的空格。</p>","[{""input"": ""3 3\n1 2 3\n4 5 6\n7 8 9\n"", ""output"": ""1 4 7 8 9 6 3 2 5""}, {""input"": ""3 2\n1 2\n3 4\n5 6\n"", ""output"": ""1 3 5 6 4 2""}]","12af7f0de5cc7e730d4779a49a8c1247","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:07:28.5724+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",539,140,1,"1-10","{""0"": 140, ""1"": 63, ""2"": 7, ""4"": 71, ""-1"": 170, ""-2"": 72}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
16,"回文数字","<p>观察数字：12321，123321 都有一个共同的特征，无论从左到右读还是从右向左读，都是相同的。这样的数字叫做：回文数字。</p><p>本题要求你找到一些5位或6位的十进制数字。满足如下要求：</p><p>该数字的各个数位之和等于输入的整数。</p>","<p>一个正整数 n (10&lt;n&lt;100), 表示要求满足的数位和。</p>","<p>若干行，每行包含一个满足要求的5位或6位整数。</p><p>数字按从小到大的顺序排列。</p><p>如果没有满足条件的，输出：-1</p>","[{""input"": ""44\n"", ""output"": ""99899 \n499994 \n589985 \n598895\n 679976 \n688886\n 697796\n 769967 \n778877 \n787787\n 796697\n 859958\n 868868\n 877778\n 886688\n 895598\n949949 \n958859 \n967769 \n976679 \n985589 \n994499\n\n""}, {""input"": ""60\n"", ""output"": ""-1\n""}]","148350bd866dc6e4636d0c02654053a6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:11:52.690724+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",353,150,1,"1-36","{""0"": 150, ""1"": 9, ""4"": 9, ""-1"": 126, ""-2"": 59}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
17,"阶乘计算","<p>输入一个正整数n，输出n!的值。</p><p>其中n!=123…n。</p><p>算法描述</p><p>n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。</p><p>将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。</p><p>首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</p>","<p>输入包含一个正整数n，n&lt;=1000。</p>","<p>输出n!的准确值。</p>","[{""input"": ""10"", ""output"": ""3628800""}]","d28c4ed42a01748a2ef86b46d297884a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:13:01.215885+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",431,149,1,"1-11","{""0"": 149, ""1"": 10, ""2"": 6, ""4"": 37, ""-1"": 147, ""-2"": 82}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
18,"矩形面积交","<p>平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。</p>","<p>输入仅包含两行，每行描述一个矩形。</p><p>在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。</p>","<p>输出仅包含一个实数，为交的面积，保留到小数后两位。</p>","[{""input"": ""1 1 3 3\n2 2 4 4\n"", ""output"": ""1.00""}]","d065ed1a3134918474af9591eeae2611","[{""score"": 14, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 14, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 14, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 14, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 14, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 14, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 14, ""input_name"": ""7.in"", ""output_name"": ""7.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:15:29.017269+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",409,118,1,"1-12","{""0"": 118, ""4"": 18, ""-1"": 236, ""-2"": 37}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
19,"剪格子","<p>如下图所示，3 x 3 的格子中填写了一些整数。</p><p><img src=""/public/upload/afb9034a5e.jpg"" alt=""1537274166948.jpg"" /></p><p>我们沿着图中的星号线剪开，得到两个部分，每个部分的数字和都是60。</p><p>本题的要求就是请你编程判定：对给定的m x n 的格子中的整数，是否可以分割为两个部分，使得这两个区域的数字和相等。</p><p>如果存在多种解答，请输出包含左上角格子的那个区域包含的格子的最小数目。</p><p>如果无法分割，则输出 0。</p>","<p>程序先读入两个整数 m n 用空格分割 (m,n&lt;10)。</p><p>表示表格的宽度和高度。</p><p>接下来是n行，每行m个正整数，用空格分开。每个整数不大于10000。</p>","<p>输出一个整数，表示在所有解中，包含左上角的分割区可能包含的最小的格子数目。</p>","[{""input"": ""3 3\n 10 1 52\n 20 30 1\n 1 2 3 \n"", ""output"": ""3 \n""}, {""input"": ""4 3 \n1 1 1 1 \n1 30 80 2 \n1 1 1 100 \n"", ""output"": ""10 \n""}]","972b53e04250f6238fc42269126f322d","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:18:27.495701+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",215,92,1,"1-37","{""0"": 92, ""1"": 5, ""4"": 2, ""-1"": 51, ""-2"": 65}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
20,"矩阵乘法","<p>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）</p><p>例如：</p><p>A =</p><p>1 2</p><p>3 4</p><p>A的2次幂</p><p>7 10</p><p>15 22</p>","<p>第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数</p><p>接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</p>","<p>输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</p>","[{""input"": ""2 2\n1 2\n3 4\n"", ""output"": ""7 10\n15 22\n""}]","a7024888d0ae8fe267ea13adc5647506","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:18:30.733222+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",734,131,1,"1-13","{""0"": 131, ""1"": 8, ""4"": 23, ""-1"": 458, ""-2"": 114}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
21,"时间转换","<p>给定一个以秒为单位的时间t，要求用 “::”的格式来表示这个时间。表示时间，表示分钟， 而表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。</p>","<p>输入只有一行，是一个整数t（0&lt;=t&lt;=86399）。</p>","<p>输出只有一行，是以“::”的格式所表示的时间，不包括引号。</p>","[{""input"": ""0"", ""output"": ""0:0:0""}, {""input"": ""5436"", ""output"": ""1:30:36""}]","235020449b2f996679c2662f392c37ae","[{""score"": 3, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 3, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 3, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 3, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 3, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 3, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 3, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 3, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 3, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 3, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 3, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 3, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 3, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 3, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 3, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 3, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 3, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 3, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 3, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 3, ""input_name"": ""20.in"", ""output_name"": ""20.out""}, {""score"": 3, ""input_name"": ""21.in"", ""output_name"": ""21.out""}, {""score"": 3, ""input_name"": ""22.in"", ""output_name"": ""22.out""}, {""score"": 3, ""input_name"": ""23.in"", ""output_name"": ""23.out""}, {""score"": 3, ""input_name"": ""24.in"", ""output_name"": ""24.out""}, {""score"": 3, ""input_name"": ""25.in"", ""output_name"": ""25.out""}, {""score"": 3, ""input_name"": ""26.in"", ""output_name"": ""26.out""}, {""score"": 3, ""input_name"": ""27.in"", ""output_name"": ""27.out""}, {""score"": 3, ""input_name"": ""28.in"", ""output_name"": ""28.out""}, {""score"": 3, ""input_name"": ""29.in"", ""output_name"": ""29.out""}, {""score"": 3, ""input_name"": ""30.in"", ""output_name"": ""30.out""}, {""score"": 3, ""input_name"": ""31.in"", ""output_name"": ""31.out""}, {""score"": 3, ""input_name"": ""32.in"", ""output_name"": ""32.out""}, {""score"": 3, ""input_name"": ""33.in"", ""output_name"": ""33.out""}, {""score"": 3, ""input_name"": ""34.in"", ""output_name"": ""34.out""}, {""score"": 3, ""input_name"": ""35.in"", ""output_name"": ""35.out""}, {""score"": 3, ""input_name"": ""36.in"", ""output_name"": ""36.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:20:27.561264+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",204,148,1,"1-14","{""0"": 148, ""4"": 2, ""-1"": 25, ""-2"": 29}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
22,"矩阵翻硬币","<p>小明先把硬币摆成了一个 n 行 m 列的矩阵。</p><p>随后，小明对每一个硬币分别进行一次 Q 操作。</p><p>对第x行第y列的硬币进行 Q 操作的定义：将所有第 ix 行，第 jy 列的硬币进行翻转。</p><p>其中i和j为任意使操作可行的正整数，行号和列号都是从1开始。</p><p>当小明对所有硬币都进行了一次 Q 操作后，他发现了一个奇迹——所有硬币均为正面朝上。</p><p>小明想知道最开始有多少枚硬币是反面朝上的。于是，他向他的好朋友小M寻求帮助。</p><p>聪明的小M告诉小明，只需要对所有硬币再进行一次Q操作，即可恢复到最开始的状态。然而小明很懒，不愿意照做。于是小明希望你给出他更好的方法。帮他计算出答案。</p>","<p>输入数据包含一行，两个正整数 n m，含义见题目描述。</p>","<p>输出一个正整数，表示最开始有多少枚硬币是反面朝上的。</p>","[{""input"": ""2 3\n"", ""output"": ""1\n""}]","a9786300eefa60bd5482e6c252e1f2d6","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>对于10%的数据，n、m &lt;= 10^3；</p><p>对于20%的数据，n、m &lt;= 10^7；</p><p>对于40%的数据，n、m &lt;= 10^15；</p><p>对于10%的数据，n、m &lt;= 10^1000（10的1000次方）。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:27:16.76979+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",177,33,1,"1-38","{""0"": 33, ""1"": 22, ""4"": 20, ""-1"": 61, ""-2"": 41}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
23,"数的读法","<p>Tom教授正在给研究生讲授一门关于基因的课程，有一件事情让他颇为头疼：一条染色体上有成千上万个碱基对，它们从0开始编号，到几百万，几千万，甚至上亿。</p><p>比如说，在对学生讲解第1234567009号位置上的碱基时，光看着数字是很难准确的念出来的。</p><p>所以，他迫切地需要一个系统，然后当他输入12 3456 7009时，会给出相应的念法：</p><p>十二亿三千四百五十六万七千零九</p><p>用汉语拼音表示为</p><p>shi er yi san qian si bai wu shi liu wan qi qian ling jiu</p><p>这样他只需要照着念就可以了。</p><p>你的任务是帮他设计这样一个系统：给定一个阿拉伯数字串，你帮他按照中文读写的规范转为汉语拼音字串，相邻的两个音节用一个空格符格开。</p><p>注意必须严格按照规范，比如说“10010”读作“yi wan ling yi shi”而不是“yi wan ling shi”，“100000”读作“shi wan”而不是“yi shi wan”，“2000”读作“er qian”而不是“liang qian”。</p>","<p>有一个数字串，数值大小不超过2,000,000,000。</p>","<p>是一个由小写英文字母，逗号和空格组成的字符串，表示该数的英文读法。</p>","[{""input"": ""1234567009"", ""output"": ""shi er yi san qian si bai wu shi liu wan qi qian ling jiu""}]","4939aa00eeeeb6e93e107ff05a3bb034","[{""score"": 14, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 14, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 14, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 14, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 14, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 14, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 14, ""input_name"": ""7.in"", ""output_name"": ""7.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:30:09.734035+00",NULL,1000,509,False,NULL,NULL,NULL,"ACM",True,"Low","",147,68,1,"1-15","{""0"": 68, ""4"": 1, ""-1"": 58, ""-2"": 20}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
24,"波动数列","<p>观察这个数列：</p><p>1 3 0 2 -1 1 -2 ...</p><p>这个数列中后一项总是比前一项增加2或者减少3。</p><p>栋栋对这种数列很好奇，他想知道长度为 n 和为 s 而且后一项总是比前一项增加a或者减少b的整数数列可能有多少种呢？</p>","<p>输入的第一行包含四个整数 n s a b，含义如前面说述。</p>","<p>输出一行，包含一个整数，表示满足条件的方案数。由于这个数很大，请输出方案数除以100000007的余数。</p>","[{""input"": ""4 10 2 3"", ""output"": ""2""}]","ed84dd6e6fba466f19f96e72d46c7a3e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>样例说明</p><p>这两个数列分别是2 4 1 3和7 4 1 -2。</p><p>数据规模和约定</p><p>对于10%的数据，1&lt;=n&lt;=5，0&lt;=s&lt;=5，1&lt;=a,b&lt;=5；</p><p>对于30%的数据，1&lt;=n&lt;=30，0&lt;=s&lt;=30，1&lt;=a,b&lt;=30；</p><p>对于50%的数据，1&lt;=n&lt;=50，0&lt;=s&lt;=50，1&lt;=a,b&lt;=50；</p><p>对于70%的数据，1&lt;=n&lt;=100，0&lt;=s&lt;=500，1&lt;=a, b&lt;=50；</p><p>对于100%的数据，1&lt;=n&lt;=1000，-1,000,000,000&lt;=s&lt;=1,000,000,000，1&lt;=a, b&lt;=1,000,000。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:31:56.210074+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",164,58,1,"1-19","{""0"": 58, ""1"": 29, ""4"": 7, ""-1"": 49, ""-2"": 21}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
25,"完美的代价","<p>回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。</p><p>交换的定义是：交换两个相邻的字符</p><p>例如mamad</p><p>第一次交换 ad : mamda</p><p>第二次交换 md : madma</p><p>第三次交换 ma : madam (回文！完美！)</p>","<p>第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)</p><p>第二行是一个字符串，长度为N.只包含小写字母</p>","<p>如果可能，输出最少的交换次数。</p><p>否则输出Impossible</p>","[{""input"": ""5\nmamad\n"", ""output"": ""3""}]","ba24be4440c494e1a0945ae55fe3a67f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:32:26.342945+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",182,66,1,"1-16","{""0"": 66, ""1"": 3, ""4"": 8, ""-1"": 70, ""-2"": 35}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
26,"芯片测试","<p>有n（2≤n≤20）块芯片，有好有坏，已知好芯片比坏芯片多。</p><p>每个芯片都能用来测试其他芯片。用好芯片测试其他芯片时，能正确给出被测试芯片是好还是坏。而用坏芯片测试其他芯片时，会随机给出好或是坏的测试结果（即此结果与被测试芯片实际的好坏无关）。</p><p>给出所有芯片的测试结果，问哪些芯片是好芯片。</p>","<p>输入数据第一行为一个整数n，表示芯片个数。</p><p>第二行到第n+1行为n*n的一张表，每行n个数据。表中的每个数据为0或1，在这n行中的第i行第j列（1≤i, j≤n）的数据表示用第i块芯片测试第j块芯片时得到的测试结果，1表示好，0表示坏，i=j时一律为1（并不表示该芯片对本身的测试结果。芯片不能对本 身进行测试）。</p>","<p>按从小到大的顺序输出所有好芯片的编号</p>","[{""input"": ""3\n1 0 1\n0 1 0\n1 0 1\n"", ""output"": ""1 3""}]","1c1ea06b50d261a041201c20229d074d","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:38:46.725817+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",197,86,1,"1-17","{""0"": 86, ""1"": 2, ""4"": 4, ""-1"": 89, ""-2"": 16}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
27,"字符串对比","<p>给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：</p><p>1：两个字符串长度不等。比如 Beijing 和 Hebei</p><p>2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing</p><p>3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing</p><p>4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing</p><p>编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</p>","<p>包括两行，每行都是一个字符串</p>","<p>仅有一个数字，表明这两个字符串的关系编号</p>","[{""input"": ""BEIjing\nbeiJing \n"", ""output"": ""3""}]","988bd62ee46270e28997a13038e962d8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:40:38.870747+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",355,130,1,"1-18","{""0"": 130, ""4"": 42, ""-1"": 74, ""-2"": 109}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
28,"兰顿蚂蚁","<p><img src=""/public/upload/475f005fc6.png"" alt=""图片 1.png"" /></p><p>兰顿蚂蚁，是于1986年，由克里斯·兰顿提出来的，属于细胞自动机的一种。</p><p>平面上的正方形格子被填上黑色或白色。在其中一格正方形内有一只“蚂蚁”。</p><p>蚂蚁的头部朝向为：上下左右其中一方。</p><p>蚂蚁的移动规则十分简单：<br />若蚂蚁在黑格，右转90度，将该格改为白格，并向前移一格；<br />若蚂蚁在白格，左转90度，将该格改为黑格，并向前移一格。</p><p>规则虽然简单，蚂蚁的行为却十分复杂。刚刚开始时留下的路线都会有接近对称，像是会重复，但不论起始状态如何，蚂蚁经过漫长的混乱活动后，会开辟出一条规则的“高速公路”。</p><p>蚂蚁的路线是很难事先预测的。  　　你的任务是根据初始状态，用计算机模拟兰顿蚂蚁在第n步行走后所处的位置。</p>","<p>输入数据的第一行是 m n 两个整数（3 &lt; m, n &lt; 100），表示正方形格子的行数和列数。</p><p>接下来是 m 行数据。</p><p>每行数据为 n 个被空格分开的数字。0 表示白格，1 表示黑格。</p><p>接下来是一行数据：x y s k, 其中x y为整数，表示蚂蚁所在行号和列号（行号从上到下增长，列号从左到右增长，都是从0开始编号）。s 是一个大写字母，表示蚂蚁头的朝向，我们约定：上下左右分别用：UDLR表示。k 表示蚂蚁走的步数。</p>","<p>输出数据为两个空格分开的整数 p q, 分别表示蚂蚁在k步后，所处格子的行号和列号。</p>","[{""input"": ""5 6 \n0 0 0 0 0 0 \n0 0 0 0 0 0 \n0 0 1 0 0 0\n 0 0 0 0 0 0 \n0 0 0 0 0 0 \n2 3 L 5\n"", ""output"": ""1 3\n""}, {""input"": ""3 3 \n0 0 0 \n1 1 1 \n1 1 1 \n1 1 U 6\n"", ""output"": ""0 0""}]","80512acda1c0b1cd45e7ec7263140e01","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:49:16.338203+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",109,49,1,"1-39","{""0"": 49, ""4"": 6, ""-1"": 48, ""-2"": 6}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
29,"车轮轴迹","<p>栋栋每天骑自行车回家需要经过一条狭长的林荫道。道路由于年久失修，变得非常不平整。虽然栋栋每次都很颠簸，但他仍把骑车经过林荫道当成一种乐趣。<br />由于颠簸，栋栋骑车回家的路径是一条上下起伏的曲线，栋栋想知道，他回家的这条曲线的长度究竟是多长呢？更准确的，栋栋想知道从林荫道的起点到林荫道的终点，他的车前轮的轴（圆心）经过的路径的长度。<br />栋栋对路面进行了测量。他把道路简化成一条条长短不等的直线段，这些直线段首尾相连，且位于同一平面内。并在该平面内建立了一个直角坐标系，把所有线段的端点坐标都计算好。<br />假设栋栋的自行车在行进的过程中前轮一直是贴着路面前进的。<br /><img alt=""1-20-1.png"" src=""/public/upload/85327d9779.png"" width=""512"" height=""256"" /><br />上图给出了一个简单的路面的例子，其中蓝色实线为路面，红色虚线为车轮轴经过的路径。在这个例子中，栋栋的前轮轴从A点出发，水平走到B点，然后绕着 地面的F点到C点（绕出一个圆弧），再沿直线下坡到D点，最后水平走到E点，在这个图中地面的坐标依次为：(0, 0), (2, 0), (4, -1),(6, -1)，前轮半径为1.50，前轮轴前进的距离依次为：<br />AB=2.0000；弧长BC=0.6955；CD=1.8820；DE=1.6459。<br />总长度为6.2233。<br /><br />下图给出了一个较为复杂的路面的例子，在这个例子中，车轮在第一个下坡还没下完时（D点）就开始上坡了，之后在坡的顶点要从E绕一个较大的圆弧到F点。这个图中前轮的半径为1，每一段的长度依次为：<br />AB=3.0000；弧长BC=0.9828；CD=1.1913；DE=2.6848；弧长EF=2.6224； FG=2.4415；GH=2.2792。<br />总长度为15.2021。<br /><img alt=""1-20-2.png"" src=""/public/upload/586b220b9e.png"" width=""680"" height=""400"" /><br />现在给出了车轮的半径和路面的描述，请求出车轮轴轨迹的总长度。<br /></p>","<p>输入的第一行包含一个整数n和一个实数r，用一个空格分隔，表示描述路面的坐标点数和车轮的半径。<br />接下来n行，每个包含两个实数，其中第i行的两个实数x[i], y[i]表示描述路面的第i个点的坐标。<br />路面定义为所有路面坐标点顺次连接起来的折线。给定的路面的一定满足以下性质：<br /><br />*第一个坐标点一定是(0, 0)；<br />*第一个点和第二个点的纵坐标相同；<br />*倒数第一个点和倒数第二个点的纵坐标相同；<br />*第一个点和第二个点的距离不少于车轮半径；<br />*倒数第一个点和倒数第二个点的的距离不少于车轮半径；<br />*后一个坐标点的横坐标大于前一个坐标点的横坐标，即对于所有的i，x[i+1]&gt;x[i]。<br /></p>","<p>输出一个实数，四舍五入保留两个小数，表示车轮轴经过的总长度。<br />你的结果必须和参考答案一模一样才能得分。数据保证答案精确值的小数点后第三位不是4或5。<br /></p>","[{""input"": ""4 1.50\n0.00 0.00\n2.00 0.00\n4.00 -1.00\n6.00 -1.00"", ""output"": ""6.22""}, {""input"": ""6 1.00\n0.00 0.00\n3.00 0.00\n5.00 -3.00\n6.00 2.00\n7.00 -1.00\n10.00 -1.00"", ""output"": ""15.20""}]","967425a5dd3000cebb33c940c41e3b72","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>样例1说明</p><p>这个样例对应第一个图。</p><p>样例2说明</p><p>这个样例对应第二个图</p><p>数据规模和约定</p><p>对于20%的数据，n=4；<br />对于40%的数据，n≤10；<br />对于100%的数据，4≤n≤100，0.5≤r≤20.0，x[i] ≤2000.0，-2000.0≤y[i] ≤2000.0。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:49:51.870057+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",22,3,1,"1-20","{""0"": 3, ""4"": 1, ""-1"": 10, ""-2"": 8}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
30,"连号区间数","<p>小明这些天一直在思考这样一个奇怪而有趣的问题：</p><p>在1~N的某个全排列中有多少个连号区间呢？这里所说的连号区间的定义是：</p><p>如果区间[L, R] 里的所有元素（即此排列的第L个到第R个元素）递增排序后能得到一个长度为R-L+1的“连续”数列，则称这个区间连号区间。</p><p>当N很小的时候，小明可以很快地算出答案，但是当N变大的时候，问题就不是那么简单了，现在小明需要你的帮助。</p>","<p>第一行是一个正整数N (1 &lt;= N &lt;= 50000), 表示全排列的规模。</p><p>第二行是N个不同的数字Pi(1 &lt;= Pi &lt;= N)， 表示这N个数字的某一全排列。</p>","<p>输出一个整数，表示不同连号区间的数目。</p>","[{""input"": ""4 \n3 2 4 1\n"", ""output"": ""7 \n""}, {""input"": ""5 \n3 4 2 5 1\n"", ""output"": ""9\n""}]","2a2270712735d06374fde56991fa3fb6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:51:11.843245+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",105,38,1,"1-40","{""0"": 38, ""1"": 38, ""4"": 1, ""-1"": 25, ""-2"": 3}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
31,"城市建设","<p>栋栋居住在一个繁华的C市中，然而，这个城市的道路大都年久失修。市长准备重新修一些路以方便市民，于是找到了栋栋，希望栋栋能帮助他。<br /><br />C市中有n个比较重要的地点，市长希望这些地点重点被考虑。现在可以修一些道路来连接其中的一些地点，每条道路可以连接其中的两个地点。另外由于C市有一条河从中穿过，也可以在其中的一些地点建设码头，所有建了码头的地点可以通过河道连接。<br /><br />栋栋拿到了允许建设的道路的信息，包括每条可以建设的道路的花费，以及哪些地点可以建设码头和建设码头的花费。<br /><br />市长希望栋栋给出一个方案，使得任意两个地点能只通过新修的路或者河道互达，同时花费尽量小。<br /></p>","<p>输入的第一行包含两个整数n, m，分别表示C市中重要地点的个数和可以建设的道路条数。所有地点从1到n依次编号。<br />接下来m行，每行三个整数a, b, c，表示可以建设一条从地点a到地点b的道路，花费为c。若c为正，表示建设是花钱的，如果c为负，则表示建设了道路后还可以赚钱（比如建设收费道路）。<br />接下来一行，包含n个整数w_1, w_2, …, w_n。如果w_i为正数，则表示在地点i建设码头的花费，如果w_i为-1，则表示地点i无法建设码头。<br />输入保证至少存在一个方法使得任意两个地点能只通过新修的路或者河道互达。<br /></p>","<p>输出一行，包含一个整数，表示使得所有地点通过新修道路或者码头连接的最小花费。如果满足条件的情况下还能赚钱，那么你应该输出一个负数。<br /></p>","[{""input"": ""5 5\n1 2 4\n1 3 -1\n2 3 3\n2 4 5\n4 5 10\n-1 10 10 1 1"", ""output"": ""9""}]","c07198391296e5ab23e753a0453b7365","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>样例说明</p><p>建设第2、3、4条道路，在地点4、5建设码头，总的花费为9。</p><p>数据规模和约定</p><p>对于20%的数据，1&lt;=n&lt;=10，1&lt;=m&lt;=20，0&lt;=c&lt;=20，w_i&lt;=20；<br />对于50%的数据，1&lt;=n&lt;=100，1&lt;=m&lt;=1000，-50&lt;=c&lt;=50，w_i&lt;=50；<br />对于70%的数据，1&lt;=n&lt;=1000；<br />对于100%的数据，1 &lt;= n &lt;=10000，1 &lt;= m &lt;= 100000，-1000&lt;=c&lt;=1000，-1&lt;=w_i&lt;=1000，w_i≠0。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:53:19.823381+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",137,27,1,"1-21","{""0"": 27, ""1"": 10, ""4"": 12, ""-1"": 74, ""-2"": 14}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
32,"蚂蚁感冒","<p>长100厘米的细长直杆子上有n只蚂蚁。它们的头有的朝左，有的朝右。</p><p>每只蚂蚁都只能沿着杆子向前爬，速度是1厘米/秒。</p><p>当两只蚂蚁碰面时，它们会同时掉头往相反的方向爬行。</p><p>这些蚂蚁中，有1只蚂蚁感冒了。并且在和其它蚂蚁碰面时，会把感冒传染给碰到的蚂蚁。</p><p>请你计算，当所有蚂蚁都爬离杆子时，有多少只蚂蚁患上了感冒。</p>","<p>第一行输入一个整数n (1 &lt; n &lt; 50), 表示蚂蚁的总数。</p><p>接着的一行是n个用空格分开的整数 Xi (-100 &lt; Xi &lt; 100), Xi的绝对值，表示蚂蚁离开杆子左边端点的距离。正值表示头朝右，负值表示头朝左，数据中不会出现0值，也不会出现两只蚂蚁占用同一位置。其中，第一个数 据代表的蚂蚁感冒了。</p>","<p>要求输出1个整数，表示最后感冒蚂蚁的数目。</p>","[{""input"": ""3\n 5 -2 8\n"", ""output"": ""1\n""}, {""input"": ""5 \n-10 8 -20 12 25\n"", ""output"": ""3\n""}]","f342db6b3691cb05b79d373de6b1ef6f","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:53:27.731617+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",64,35,1,"1-41","{""0"": 35, ""1"": 1, ""-1"": 19, ""-2"": 9}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
33,"错误票据","<p>某涉密单位下发了某种票据，并要在年终全部收回。</p><p>每张票据有唯一的ID号。全年所有票据的ID号是连续的，但ID的开始数码是随机选定的。</p><p>因为工作人员疏忽，在录入ID号的时候发生了一处错误，造成了某个ID断号，另外一个ID重号。</p><p>你的任务是通过编程，找出断号的ID和重号的ID。</p><p>假设断号不可能发生在最大和最小号。</p>","<p>要求程序首先输入一个整数N(N&lt;100)表示后面数据行数。</p><p>接着读入N行数据。</p><p>每行数据长度不等，是用空格分开的若干个（不大于100个）正整数（不大于100000），请注意行内和行末可能有多余的空格，你的程序需要能处理这些空格。</p><p>每个整数代表一个ID号。</p>","<p>要求程序输出1行，含两个整数m n，用空格分隔。</p><p>其中，m表示断号ID，n表示重号ID</p>","[{""input"": ""2\n5 6 8 11 9 \n10 12 9"", ""output"": ""7 9""}, {""input"": ""6\n164 178 108 109 180 155 141 159 104 182 179 118 137 184 115 124 125 129 168 196\n172 189 127 107 112 192 103 131 133 169 158 \n128 102 110 148 139 157 140 195 197\n185 152 135 106 123 173 122 136 174 191 145 116 151 143 175 120 161 134 162 190\n149 138 142 146 199 126 165 156 153 193 144 166 170 121 171 132 101 194 187 188\n113 130 176 154 177 120 117 150 114 183 186 181 100 163 160 167 147 198 111 119\n"", ""output"": ""105 120""}]","b497f4a1e1156a613bb9daf41b0b6592","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 12:57:10.03742+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",80,26,1,"1-22","{""0"": 26, ""4"": 32, ""-1"": 12, ""-2"": 10}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
34,"打印十字图","<p>小明为某机构设计了一个十字型的徽标（并非红十字会啊），如下所示：</p><p><img alt=""1-23.png"" src=""/public/upload/88961f4760.png"" width=""245"" height=""536"" /><br /></p><p>对方同时也需要在电脑dos窗口中以字符的形式输出该标志，并能任意控制层数。</p>","<p>一个正整数 n (n&lt;30) 表示要求打印图形的层数。</p>","<p>对应包围层数的该标志。<br /></p>","[{""input"": ""1"", ""output"": ""..$$$$$..\n..$...$..\n$$$.$.$$$\n$...$...$\n$.$$$$$.$\n$...$...$\n$$$.$.$$$\n..$...$..\n..$$$$$.. ""}, {""input"": ""3"", ""output"": ""..$$$$$$$$$$$$$..\n..$...........$..\n$$$.$$$$$$$$$.$$$\n$...$.......$...$\n$.$$$.$$$$$.$$$.$\n$.$...$...$...$.$\n$.$.$$$.$.$$$.$.$\n$.$.$...$...$.$.$\n$.$.$.$$$$$.$.$.$\n$.$.$...$...$.$.$\n$.$.$$$.$.$$$.$.$\n$.$...$...$...$.$\n$.$$$.$$$$$.$$$.$\n$...$.......$...$\n$$$.$$$$$$$$$.$$$\n..$...........$..\n..$$$$$$$$$$$$$.. ""}]","af4de6ba0f82af4a777b49e665b5d088","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","<p>提示</p><p>请仔细观察样例，尤其要注意句点的数量和输出位置。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:04:27.976212+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",35,14,1,"1-23","{""0"": 14, ""-1"": 12, ""-2"": 9}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
35,"大臣的旅费","<p>很久以前，T王国空前繁荣。为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。</p><p>为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。</p><p>J是T国重要大臣，他巡查于各大城市之间，体察民情。所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。他有一个钱袋，用于存放往来城市间的路费。</p><p>聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走过的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。</p><p>J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？</p>","<p>输入的第一行包含一个整数n，表示包括首都在内的T王国的城市数</p><p>城市从1开始依次编号，1号城市为首都。</p><p>接下来n-1行，描述T国的高速路（T国的高速路一定是n-1条）</p><p>每行三个整数Pi, Qi, Di，表示城市Pi和城市Qi之间有一条高速路，长度为Di千米。</p>","<p>输出一个整数，表示大臣J最多花费的路费是多少。<br /></p>","[{""input"": ""5\n1 2 2\n1 3 1\n2 4 5\n2 5 4"", ""output"": ""135""}]","1a1789863f63e8a19ab60721b2568e1c","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p><span style="""">输出提示</span></p><p><span style="""">大臣J从城市4到城市5要花费135的路费。</span></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:09:27.627357+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",116,22,1,"1-24","{""0"": 22, ""1"": 19, ""3"": 8, ""4"": 34, ""-1"": 17, ""-2"": 16}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
36,"带分数","<p>100 可以表示为带分数的形式：100= 3 + 69258 / 714。</p><p>还可以表示为：100 = 82 + 3546 / 197。</p><p>注意特征：带分数中，数字1~9分别出现且只出现一次（不包含0）。</p><p>类似这样的带分数，100 有 11 种表示法。</p>","<p>从标准输入读入一个正整数N (N&lt;1000*1000)<br /></p>","<p>程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。</p><p>注意：不要求输出每个表示，只统计有多少表示法！</p>","[{""input"": ""100 "", ""output"": ""11""}, {""input"": ""105"", ""output"": ""6""}]","a5e146649aab04e781f130ecf5cf0c79","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:11:24.768788+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",48,16,1,"1-25","{""0"": 16, ""1"": 1, ""4"": 1, ""-1"": 21, ""-2"": 9}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
37,"地宫取宝","<p>X 国王有一个地宫宝库。是 n x m 个格子的矩阵。每个格子放一件宝贝。每个宝贝贴着价值标签。<br /><br />地宫的入口在左上角，出口在右下角。<br /><br />小明被带到地宫的入口，国王要求他只能向右或向下行走。<br /><br />走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。<br /><br />当小明走到出口时，如果他手中的宝贝恰好是k件，则这些宝贝就可以送给小明。<br /><br />请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这k件宝贝。<br /></p>","<p>输入一行3个整数，用空格分开：n m k (1&lt;=n,m&lt;=50, 1&lt;=k&lt;=12)<br /><br />接下来有 n 行数据，每行有 m 个整数 Ci (0&lt;=Ci&lt;=12)代表这个格子上的宝物的价值<br /></p>","<p>要求输出一个整数，表示正好取k个宝贝的行动方案数。该数字可能很大，输出它对 1000000007 取模的结果。<br /></p>","[{""input"": ""2 2 2\n1 2\n2 1\n"", ""output"": ""2""}, {""input"": ""2 3 2\n1 2 3\n2 1 5\n"", ""output"": ""14""}]","7c72c5ea8a0f77e639487f7f766a999d","[{""score"": 14, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 14, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 14, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 14, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 14, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 14, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 14, ""input_name"": ""7.in"", ""output_name"": ""7.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:13:40.090658+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",126,35,1,"1-26","{""0"": 35, ""1"": 34, ""4"": 2, ""-1"": 44, ""-2"": 11}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
38,"翻硬币","<p>小明正在玩一个“翻硬币”的游戏。</p><p></p><p>桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。</p><p></p><p>比如，可能情形是：**oo***oooo</p><p></p><p>如果同时翻转左边的两个硬币，则变为：oooo***oooo</p><p></p><p>现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</p><p></p><p>我们约定：把翻动相邻的两个硬币叫做一步操作，那么要求：</p>","<p>两行等长的字符串，分别表示初始状态和要达到的目标状态。每行的长度&lt;1000<br /></p>","<p>一个整数，表示最小操作步数。<br /></p>","[{""input"": ""**********\no****o****\n"", ""output"": ""5""}, {""input"": ""*o**o***o***\n*o***o**o***\n"", ""output"": ""1""}]","803526b84ed7e3b4a234739fb8bd0c12","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:15:20.186825+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",59,35,1,"1-27","{""0"": 35, ""1"": 1, ""4"": 1, ""-1"": 14, ""-2"": 8}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
39,"斐波那契","<p>斐波那契数列大家都非常熟悉。它的定义是：<br /><br />f(x) = 1 .... (x=1,2)<br />f(x) = f(x-1) + f(x-2) .... (x&gt;2)<br /><br />对于给定的整数 n 和 m，我们希望求出：<br />f(1) + f(2) + ... + f(n) 的值。但这个值可能非常大，所以我们把它对 f(m) 取模。<br />公式如下<br /><img alt=""1-28.png"" src=""http://oj.kfcoding.com/public/upload/21bb8c47bc.png"" width=""602"" height=""155"" /><br />但这个数字依然很大，所以需要再对p 求模。<br /></p>","<p>输入为一行用空格分开的整数 n m p (0 &lt; n, m, p&lt; 10^18)<br /></p>","<p>输出为1个整数，表示答案<br /></p>","[{""input"": ""2 3 5"", ""output"": ""0""}, {""input"": ""15 11 29"", ""output"": ""25""}]","edcd030702619c5eb874cf4fb2061274","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:18:17.997679+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",24,2,1,"1-28","{""0"": 2, ""1"": 11, ""4"": 1, ""-1"": 7, ""-2"": 3}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
40,"分糖果","<p>有n个小朋友围坐成一圈。老师给每个小朋友随机发偶数个糖果，然后进行下面的游戏：<br /><br />每个小朋友都把自己的糖果分一半给左手边的孩子。<br /><br />一轮分糖后，拥有奇数颗糖的孩子由老师补给1个糖果，从而变成偶数。<br /><br />反复进行这个游戏，直到所有小朋友的糖果数都相同为止。<br /><br />你的任务是预测在已知的初始糖果情形下，老师一共需要补发多少个糖果。<br /></p>","<p>程序首先读入一个整数N(2&lt;N&lt;100)，表示小朋友的人数。<br />接着是一行用空格分开的N个偶数（每个偶数不大于1000，不小于2）<br /></p>","<p>要求程序输出一个整数，表示老师需要补发的糖果数。<br /></p>","[{""input"": ""3\n2 2 4\n"", ""output"": ""4""}]","b0ca03ca6a57fe76f6e907da66956e0b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:19:41.322765+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",87,56,1,"1-29","{""0"": 56, ""1"": 8, ""4"": 1, ""-1"": 14, ""-2"": 8}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
41,"高僧斗法","<p>古时丧葬活动中经常请高僧做法事。仪式结束后，有时会有“高僧斗法”的趣味节目，以舒缓压抑的气氛。<br />节目大略步骤为：先用粮食（一般是稻米）在地上“画”出若干级台阶（表示N级浮屠）。又有若干小和尚随机地“站”在某个台阶上。最高一级台阶必须站人，其它任意。(如图1所示)</p><p><img src=""https://ask.qcloudimg.com/raw/yehe-b34099a1149cf/gbnzs18sux.png?imageView2/2/w/1620"" /><br /></p><p>两位参加游戏的法师分别指挥某个小和尚向上走任意多级的台阶，但会被站在高级台阶上的小和尚阻挡，不能越过。两个小和尚也不能站在同一台阶，也不能向低级台阶移动。<br />两法师轮流发出指令，最后所有小和尚必然会都挤在高段台阶，再也不能向上移动。轮到哪个法师指挥时无法继续移动，则游戏结束，该法师认输。<br />对于已知的台阶数和小和尚的分布位置，请你计算先发指令的法师该如何决策才能保证胜出。<br /></p>","<p>输入数据为一行用空格分开的N个整数，表示小和尚的位置。台阶序号从1算起，所以最后一个小和尚的位置即是台阶的总数。（N&lt;100, 台阶总数&lt;1000）<br /></p>","<p>输出为一行用空格分开的两个整数: A B, 表示把A位置的小和尚移动到B位置。若有多个解，输出A值较小的解，若无解则输出-1。<br /></p>","[{""input"": ""1 5 9"", ""output"": ""1 4""}, {""input"": ""1 5 8 10"", ""output"": ""1 3""}]","4b99f9fa93de9b4b5af0aad1875ec6a3","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:21:48.825298+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",24,13,1,"1-30","{""0"": 13, ""-1"": 10, ""-2"": 1}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
42,"格子刷油漆","<p>X国的一段古城墙的顶端可以看成 2*N个格子组成的矩形（如下图所示），现需要把这些格子刷上保护漆。<br /><br /><img src=""https://img-ask.csdn.net/upload/201505/10/1431267136_865965.jpg"" alt=""标题：格子刷油漆图片说明"" /><br />你可以从任意一个格子刷起，刷完一格，可以移动到和它相邻的格子（对角相邻也算数），但不能移动到较远的格子（因为油漆未干不能踩！）<br />比如：a d b c e f 就是合格的刷漆顺序。<br />c e f d a b 是另一种合适的方案。<br />当已知 N 时，求总的方案数。当N较大时，结果会迅速增大，请把结果对 1000000007 (十亿零七) 取模。<br /></p>","<p>输入数据为一个正整数（不大于1000）<br /></p>","<p>输出数据为一个正整数。<br /></p>","[{""input"": ""2"", ""output"": ""24""}, {""input"": ""3"", ""output"": ""96""}, {""input"": ""22"", ""output"": ""359635897""}]","2e8c231addf29c1432f6712a5d1f681a","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:24:46.883678+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",11,8,1,"1-31","{""0"": 8, ""1"": 1, ""-1"": 2}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
43,"公式求值","<p>输入n, m, k，输出下面公式的值。</p><p><img alt=""1-32-1.png"" src=""/public/upload/cad41d7ce5.png"" width=""317"" height=""129"" /><br /></p><p>其中C_n^m是组合数，表示在n个人的集合中选出m个人组成一个集合的方案数。组合数的计算公式如下。</p><p><img alt=""1-32-2.png"" src=""/public/upload/37c9cd5a5f.png"" width=""1160"" height=""112"" /><br /></p>","<p>输入的第一行包含一个整数n；第二行包含一个整数m，第三行包含一个整数k。<br /></p>","<p>计算上面公式的值，由于答案非常大，请输出这个值除以999101的余数。<br /></p>","[{""input"": ""3\n1\n3\n"", ""output"": ""162""}, {""input"": ""20\n10\n10\n"", ""output"": ""359316""}]","51d3d67ff0232b3b1a66bbc032df2df5","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>数据规模和约定</p><p>对于10%的数据，n≤10，k≤3；<br />对于20%的数据，n≤20，k≤3；<br />对于30%的数据，n≤1000，k≤5；<br />对于40%的数据，n≤10^7，k≤10；<br />对于60%的数据，n≤10^15，k ≤100；<br />对于70%的数据，n≤10^100，k≤200；<br />对于80%的数据，n≤10^500，k ≤500；<br />对于100%的数据，n在十进制下不超过1000位，即1≤n&lt;10^1000，1≤k≤1000，同时0≤m≤n，k≤n。</p><p>提示</p><p>999101是一个质数；</p><p>当n位数比较多时，绝大多数情况下答案都是0，但评测的时候会选取一些答案不是0的数据；</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:27:39.867487+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",48,1,1,"1-32","{""0"": 1, ""1"": 5, ""4"": 20, ""-1"": 17, ""-2"": 5}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
44,"国王的烦恼","<p>C国由n个小岛组成，为了方便小岛之间联络，C国在小岛间建立了m座大桥，每座大桥连接两座小岛。两个小岛间可能存在多座桥连接。然而，由于海水冲刷，有一些大桥面临着不能使用的危险。<br /><br />如果两个小岛间的所有大桥都不能使用，则这两座小岛就不能直接到达了。然而，只要这两座小岛的居民能通过其他的桥或者其他的小岛互相到达，他们就会安然无事。但是，如果前一天两个小岛之间还有方法可以到达，后一天却不能到达了，居民们就会一起抗议。<br /><br />现在C国的国王已经知道了每座桥能使用的天数，超过这个天数就不能使用了。现在他想知道居民们会有多少天进行抗议。<br /></p>","<p>输入的第一行包含两个整数n, m，分别表示小岛的个数和桥的数量。<br />接下来m行，每行三个整数a, b, t，分别表示该座桥连接a号和b号两个小岛，能使用t天。小岛的编号从1开始递增。<br /></p>","<p>输出一个整数，表示居民们会抗议的天数。<br /></p>","[{""input"": ""4 4\n1 2 2\n1 3 2\n2 3 1\n3 4 3\n"", ""output"": ""2""}]","478fac221378de5fdb00bdbb61dbab94","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>样例说明</p><p>第一天后2和3之间的桥不能使用，不影响。<br />第二天后1和2之间，以及1和3之间的桥不能使用，居民们会抗议。<br />第三天后3和4之间的桥不能使用，居民们会抗议。</p><p>数据规模和约定</p><p>对于30%的数据，1&lt;=n&lt;=20，1&lt;=m&lt;=100；<br />对于50%的数据，1&lt;=n&lt;=500，1&lt;=m&lt;=10000；<br />对于100%的数据，1&lt;=n&lt;=10000，1&lt;=m&lt;=100000，1&lt;=a, b&lt;=n， 1&lt;=t&lt;=100000。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:29:36.903229+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",52,19,1,"1-33","{""0"": 19, ""1"": 16, ""3"": 2, ""4"": 2, ""-1"": 10, ""-2"": 3}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
45,"核桃的数量","<p>小张是软件项目经理，他带领3个开发组。工期紧，今天都在加班呢。为鼓舞士气，小张打算给每个组发一袋核桃（据传言能补脑）。他的要求是：</p><p>1. 各组的核桃数量必须相同</p><p>2. 各组内必须能平分核桃（当然是不能打碎的）</p><p>3. 尽量提供满足1,2条件的最小数量（节约闹革命嘛）</p>","<p>输入包含三个正整数a, b, c，表示每个组正在加班的人数，用空格分开（a,b,c&lt;30）<br /></p>","<p>输出一个正整数，表示每袋核桃的数量。<br /></p>","[{""input"": ""2 4 5 "", ""output"": ""20""}, {""input"": ""3 1 1 "", ""output"": ""3""}]","fc2fa5d584c85986952a283b2c48ca13","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-18 13:31:02.185659+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",93,63,1,"1-34","{""0"": 63, ""1"": 1, ""4"": 2, ""-1"": 21, ""-2"": 6}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
46,"买不到的数目","<p>小明开了一家糖果店。他别出心裁：把水果糖包成4颗一包和7颗一包的两种。糖果不能拆包卖。</p><p>小朋友来买糖的时候，他就用这两种包装来组合。当然有些糖果数目是无法组合出来的，比如要买 10 颗糖。</p><p>你可以用计算机测试一下，在这种包装情况下，最大不能买到的数量是17。大于17的任何数字都可以用4和7组合出来。</p><p>本题的要求就是在已知两个包装的数量时，求最大不能组合出的数字。</p>","<p>两个正整数，表示每种包装中糖的颗数(都不多于1000)</p>","<p>一个正整数，表示最大不能买到的糖数</p>","[{""input"": ""4 7\n"", ""output"": ""17""}, {""input"": ""3 5\n"", ""output"": ""7\n""}]","45b174357fdecc974ec64e63508404a7","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 04:53:55.734553+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",64,35,1,"1-42","{""0"": 35, ""1"": 8, ""4"": 2, ""-1"": 17, ""-2"": 2}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
47,"数字游戏","<p>栋栋正在和同学们玩一个数字游戏。</p><p>游戏的规则是这样的：栋栋和同学们一共n个人围坐在一圈。栋栋首先说出数字1。接下来，坐在栋栋左手边的同学要说下一个数字2。再下面的一个同学要从上一个同学说的数字往下数两个数说出来，也就是说4。下一个同学要往下数三个数，说7。依次类推。</p><p>为了使数字不至于太大，栋栋和同学们约定，当在心中数到 k-1 时，下一个数字从0开始数。例如，当k=13时，栋栋和同学们报出的前几个数依次为：</p><p>1, 2, 4, 7, 11, 3, 9, 3, 11, 7。</p><p>游戏进行了一会儿，栋栋想知道，到目前为止，他所有说出的数字的总和是多少。</p>","<p>输入的第一行包含三个整数 n,k,T，其中 n 和 k 的意义如上面所述，T 表示到目前为止栋栋一共说出的数字个数。</p>","<p>输出一行，包含一个整数，表示栋栋说出所有数的和。</p>","[{""input"": ""3 13 3"", ""output"": ""17""}]","be4dd2483cbd35872516405ca62c801f","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","<p>栋栋说出的数依次为1, 7, 9，和为17。</p><p>数据规模和约定:</p><p>1 &lt; n,k,T &lt; 1,000,000；</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 04:56:32.348848+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",261,45,1,"1-43","{""0"": 45, ""1"": 56, ""4"": 15, ""-1"": 126, ""-2"": 19}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
48,"网络寻路","<p>X 国的一个网络使用若干条线路连接若干个节点。节点间的通信是双向的。某重要数据包，为了安全起见，必须恰好被转发两次到达目的地。该包可能在任意一个节点产生，我们需要知道该网络中一共有多少种不同的转发路径。</p><p>源地址和目标地址可以相同，但中间节点必须不同。</p><p>如下图所示的网络。</p><p><img alt=""图片 1.png"" src=""/public/upload/81cd8bf172.png"" width=""784"" height=""588"" /><br /></p><p>1 -&gt; 2 -&gt; 3 -&gt; 1 是允许的</p><p>1 -&gt; 2 -&gt; 1 -&gt; 2 或者 1 -&gt; 2 -&gt; 3 -&gt; 2 都是非法的。</p>","<p>输入数据的第一行为两个整数N M，分别表示节点个数和连接线路的条数(1&lt;=N&lt;=10000; 0&lt;=M&lt;=100000)。</p><p>接下去有M行，每行为两个整数 u 和 v，表示节点u 和 v 联通(1&lt;=u,v&lt;=N , u!=v)。</p><p>输入数据保证任意两点最多只有一条边连接，并且没有自己连自己的边，即不存在重边和自环。</p>","<p>输出一个整数，表示满足要求的路径条数。</p>","[{""input"": ""3 3 \n1 2 \n2 3 \n1 3 \n"", ""output"": ""6""}, {""input"": ""4 4 \n1 2 \n2 3 \n3 1 \n1 4 \n"", ""output"": ""10""}]","cee4e81f14f4be93c6d94b45b7c1f967","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:00:02.314951+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",83,33,1,"1-44","{""0"": 33, ""1"": 10, ""4"": 13, ""-1"": 18, ""-2"": 9}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
49,"危险系数","<p>抗日战争时期，冀中平原的地道战曾发挥重要作用。</p><p>地道的多个站点间有通道连接，形成了庞大的网络。但也有隐患，当敌人发现了某个站点后，其它站点间可能因此会失去联系。</p><p>我们来定义一个危险系数DF(x,y)：</p><p>对于两个站点x和y (x != y), 如果能找到一个站点z，当z被敌人破坏后，x和y不连通，那么我们称z为关于x,y的关键点。相应的，对于任意一对站点x和y，危险系数DF(x,y)就表示为这两点之间的关键点个数。</p><p>本题的任务是：已知网络结构，求两站点之间的危险系数。</p>","<p>输入数据第一行包含2个整数n(2 &lt;= n &lt;= 1000), m(0 &lt;= m &lt;= 2000),分别代表站点数，通道数；</p><p>接下来m行，每行两个整数 u,v (1 &lt;= u, v &lt;= n; u != v)代表一条通道；</p><p>最后1行，两个数u,v，代表询问两点之间的危险系数DF(u, v)。</p>","<p>一个整数，如果询问的两点不连通则输出-1.</p>","[{""input"": ""7 6\n 1 3 \n2 3 \n3 4\n 3 5\n 4 5 \n5 6 \n1 6 \n"", ""output"": ""2""}]","dc71e1d5664dddfc369a1689f04a40d4","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:01:46.178927+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",56,24,1,"1-45","{""0"": 24, ""1"": 1, ""4"": 2, ""-1"": 27, ""-2"": 2}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
50,"小朋友排队","<p>n 个小朋友站成一排。现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。</p><p>每个小朋友都有一个不高兴的程度。开始的时候，所有小朋友的不高兴程度都是0。</p><p>如果某个小朋友第一次被要求交换，则他的不高兴程度增加1，如果第二次要求他交换，则他的不高兴程度增加2（即不高兴程度为3），依次类推。当要求某个小朋友第k次交换时，他的不高兴程度增加k。</p><p>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。</p><p>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。</p>","<p>输入的第一行包含一个整数n，表示小朋友的个数。</p><p>第二行包含 n 个整数 H1 H2 … Hn，分别表示每个小朋友的身高。</p>","<p>输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。</p>","[{""input"": ""3\n 3 2 1\n"", ""output"": ""9""}]","25bdbfd1bbf9cbd0cfc3e93ad0a85437","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>首先交换身高为3和2的小朋友，再交换身高为3和1的小朋友，再交换身高为2和1的小朋友，每个小朋友的不高兴程度都是3，总和为9。</p><p>数据规模和约定</p><p>对于10%的数据， 1&lt;=n&lt;=10；<br />对于30%的数据， 1&lt;=n&lt;=1000；<br />对于50%的数据， 1&lt;=n&lt;=10000；<br />对于100%的数据，1&lt;=n&lt;=100000，0&lt;=Hi&lt;=1000000。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:04:21.901224+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",32,7,1,"1-46","{""0"": 7, ""1"": 10, ""4"": 3, ""-1"": 10, ""-2"": 2}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
51,"幸运数","<p>幸运数是波兰数学家乌拉姆命名的。它采用与生成素数类似的“筛法”生成。</p><p>首先从1开始写出自然数1,2,3,4,5,6,....</p><p>1 就是第一个幸运数。</p><p>我们从2这个数开始。把所有序号能被2整除的项删除，变为：</p><p>1 _ 3 _ 5 _ 7 _ 9 ....</p><p>把它们缩紧，重新记序，为：</p><p>1 3 5 7 9 .... 。这时，3为第2个幸运数，然后把所有能被3整除的序号位置的数删去。注意，是序号位置，不是那个数本身能否被3整除!! 删除的应该是5，11, 17, ...</p><p>此时7为第3个幸运数，然后再删去序号位置能被7整除的(19,39,...)</p><p>最后剩下的序列类似：</p><p>1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79, ...</p>","<p>输入两个正整数m n, 用空格分开 (m &lt; n &lt; 1000*1000)</p>","<p>程序输出 位于m和n之间的幸运数的个数（不包含m和n）。</p>","[{""input"": ""1 20"", ""output"": ""5""}, {""input"": ""30 69"", ""output"": ""8""}]","d0c6c67228fcb0d4e12df43fbc2d3f37","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:07:00.577843+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",41,25,1,"1-47","{""0"": 25, ""1"": 6, ""4"": 5, ""-1"": 3, ""-2"": 2}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
52,"邮局","<p>C村住着n户村民，由于交通闭塞，C村的村民只能通过信件与外界交流。为了方便村民们发信，C村打算在C村建设k个邮局，这样每户村民可以去离自己家最近的邮局发信。</p><p>现在给出了m个备选的邮局，请从中选出k个来，使得村民到自己家最近的邮局的距离和最小。其中两点之间的距离定义为两点之间的直线距离。</p>","<p>输入的第一行包含三个整数n, m, k，分别表示村民的户数、备选的邮局数和要建的邮局数。</p><p>接下来n行，每行两个整数x, y，依次表示每户村民家的坐标。</p><p>接下来m行，每行包含两个整数x, y，依次表示每个备选邮局的坐标。</p><p>在输入中，村民和村民、村民和邮局、邮局和邮局的坐标可能相同，但你应把它们看成不同的村民或邮局。</p>","<p>输出一行，包含k个整数，从小到大依次表示你选择的备选邮局编号。（备选邮局按输入顺序由1到m编号）</p>","[{""input"": ""5 4 2 \n0 0 \n2 0 \n3 1 \n3 3\n 1 1 \n0 1 \n1 0 \n2 1 \n3 2\n"", ""output"": ""2 4""}]","7f08788dde82cf71270318144151aa32","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>对于30%的数据，1&lt;=n&lt;=10，1&lt;=m&lt;=10，1&lt;=k&lt;=5；</p><p>对于60%的数据，1&lt;=m&lt;=20；</p><p>对于100%的数据，1&lt;=n&lt;=50，1&lt;=m&lt;=25，1&lt;=k&lt;=10。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:09:04.108101+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",35,3,1,"1-48","{""0"": 3, ""1"": 12, ""-1"": 15, ""-2"": 5}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
53,"约数倍数选卡片","<p>闲暇时，福尔摩斯和华生玩一个游戏：</p><p>在N张卡片上写有N个整数。两人轮流拿走一张卡片。要求下一个人拿的数字一定是前一个人拿的数字的约数或倍数。例如，某次福尔摩斯拿走的卡片上写着数字“6”，则接下来华生可以拿的数字包括：</p><p>1，2，3, 6，12，18，24 ....</p><p>当轮到某一方拿卡片时，没有满足要求的卡片可选，则该方为输方。</p><p>请你利用计算机的优势计算一下，在已知所有卡片上的数字和可选哪些数字的条件下，怎样选择才能保证必胜！</p><p>当选多个数字都可以必胜时，输出其中最小的数字。如果无论如何都会输，则输出-1。</p>","<p>输入数据为2行。第一行是若干空格分开的整数（每个整数介于1~100间），表示当前剩余的所有卡片。</p><p>第二行也是若干空格分开的整数，表示可以选的数字。当然，第二行的数字必须完全包含在第一行的数字中。</p>","<p>程序则输出必胜的招法！！</p>","[{""input"": ""2 3 6 \n3 6\n"", ""output"": ""3""}, {""input"": ""1 2 2 3 3 4 5 \n3 4 5\n"", ""output"": ""4""}]","71b11364543228569968f8618650cb6c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:11:00.609887+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",36,8,1,"1-49","{""0"": 8, ""1"": 11, ""4"": 1, ""-1"": 13, ""-2"": 3}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
54,"最大子阵","<p>给定一个n*m的矩阵A，求A中的一个非空子矩阵，使这个子矩阵中的元素和最大。</p><p>其中，A的子矩阵指在A中行和列均连续的一块。</p>","<p>输入的第一行包含两个整数n, m，分别表示矩阵A的行数和列数。</p><p>接下来n行，每行m个整数，表示矩阵A。</p>","<p>输出一行，包含一个整数，表示A中最大的子矩阵中的元素和。</p>","[{""input"": ""3 3 \n-1 -4 3 \n3 4 -1 \n-5 -2 8\n"", ""output"": ""10""}]","e511c43dd9fc00a87419c9f405f080bb","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>样例说明:<br />取最后一列，和为10。</p><p>数据规模和约定:</p><p>对于50%的数据，1&lt;=n, m&lt;=50；<br />对于100%的数据，1&lt;=n, m&lt;=500，A中每个元素的绝对值不超过5000。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2018-09-19 05:13:36.562883+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",65,16,1,"1-50","{""0"": 16, ""1"": 10, ""2"": 1, ""4"": 5, ""-1"": 19, ""-2"": 14}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
55,"A+B Problem","<p>请计算两个整数的和并输出结果。</p><p>注意不要有不必要的输出，比如&quot;请输入 a 和 b 的值: &quot;，示例代码见隐藏部分。</p>","<p>1 1</p>","<p>2</p>","[{""input"": ""1 1"", ""output"": ""2""}]","32b88b768bf339b77221caab837b2251","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-20 01:41:45.50453+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,2,1,"1","{""0"": 2}",0,6,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
56,"回文数字","<p>观察数字：12321，123321 都有一个共同的特征，无论从左到右读还是从右向左读，都是相同的。这样的数字叫做：回文数字。  　　</p><p>本题要求你找到一些5位或6位的十进制数字。满足如下要求： 　　</p><p>该数字的各个数位之和等于输入的整数。</p>","<p>一个正整数 n (10&lt;n&lt;100), 表示要求满足的数位和。</p>","<p>若干行，每行包含一个满足要求的5位或6位整数。 　　</p><p>数字按从小到大的顺序排列。 　　</p><p>如果没有满足条件的，输出：-1</p>","[{""input"": ""44\n"", ""output"": ""99899 \n499994 \n589985 \n598895\n 679976 \n688886\n 697796\n 769967 \n778877 \n787787\n 796697\n 859958\n 868868\n 877778\n 886688\n 895598\n949949 \n958859 \n967769 \n976679 \n985589 \n994499\n\n""}, {""input"": ""60\n"", ""output"": ""-1\n""}]","148350bd866dc6e4636d0c02654053a6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-20 01:41:59.722094+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",1,1,1,"2","{""0"": 1}",0,6,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
57,"幸运数","<p>幸运数是波兰数学家乌拉姆命名的。它采用与生成素数类似的“筛法”生成。 </p><p>首先从1开始写出自然数1,2,3,4,5,6,....</p><p>1 就是第一个幸运数。</p><p>我们从2这个数开始。把所有序号能被2整除的项删除，变为：</p><p>1 _ 3 _ 5 _ 7 _ 9 ....</p><p>把它们缩紧，重新记序，为：</p><p>1 3 5 7 9 .... 。这时，3为第2个幸运数，然后把所有能被3整除的序号位置的数删去。注意，是序号位置，不是那个数本身能否被3整除!! 删除的应该是5，11, 17, ...</p><p>此时7为第3个幸运数，然后再删去序号位置能被7整除的(19,39,...)</p><p>最后剩下的序列类似：</p><p>1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79, ...</p>","<p>输入两个正整数m n, 用空格分开 (m &lt; n &lt; 1000*1000) </p>","<p>程序输出 位于m和n之间的幸运数的个数（不包含m和n）。 </p>","[{""input"": ""1 20"", ""output"": ""5""}, {""input"": ""30 69"", ""output"": ""8""}]","d0c6c67228fcb0d4e12df43fbc2d3f37","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-20 01:42:13.133077+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",3,1,1,"3","{""0"": 1, ""-2"": 2}",0,6,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
58,"统计字符串中单词出现次数","<p>给定一个字符串列表，统计字符串列表中每种字符出现次数。</p>","<p>输入一串英文字符（a-z或者A-Z），不包括其余之外任何字符</p>","<p>输出字符串中每种字符出现的次数</p><p>注意：大小写字符分别统计</p>","[{""input"": ""abddkn"", ""output"": ""{'a': 1, 'b': 1, 'd': 2, 'k': 1, 'n': 1}""}, {""input"": ""FFkadkfs"", ""output"": ""{'F': 2, 'k': 2, 'a': 1, 'd': 1, 'f': 1, 's': 1}""}]","41dcf9d0f7aa2b82157c320f1f5c78a8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 08:30:49.252902+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"1-1","{}",0,7,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
59,"升序排序","<p>有x,y,z三个数，将三个数从小到大print出来。</p>","<p>依次输入三个整数，用空格隔开</p>","<p>输出排序后的结果</p>","[{""input"": ""4 5 3"", ""output"": ""[3, 4, 5]""}]","40861eb97d75aa13b678bdecb003d164","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 08:56:55.732028+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-2","{}",0,7,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
60,"sd","<p>s</p>","<p>s</p>","<p>s</p>","[{""input"": ""s"", ""output"": ""s""}]","d7bfcf4d3aac363dd53d2ac8e50a7d5a","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 09:04:53.116915+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"a","{}",0,7,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
61,"s","<p>s</p>","<p>s</p>","<p>s</p>","[{""input"": ""a"", ""output"": ""a""}]","2de76628328b0b21127520da1e80fed8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 10:27:47.016574+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"test","{}",0,7,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
62,"A+B Problem","<p>请计算两个整数的和并输出结果。</p><p>注意不要有不必要的输出，比如&quot;请输入 a 和 b 的值: &quot;，示例代码见隐藏部分。</p>","<p>1 1</p>","<p>2</p>","[{""input"": ""1 1"", ""output"": ""2""}]","32b88b768bf339b77221caab837b2251","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:05:49.946972+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",29,16,1,"1-1","{""0"": 16, ""4"": 6, ""-1"": 3, ""-2"": 4}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
63,"分解质因数","<p>求出区间[a,b]中所有整数的质因数分解。</p>","<p>输入两个整数a，b。</p>","<p>　每行输出一个数的分解，形如k=a1a2a3...(a1&lt;=a2&lt;=a3...，k也是从小到大的)(具体可看样例)</p>","[{""input"": ""3 10"", ""output"": ""3=3\n4=2*2\n5=5\n6=2*3\n7=7\n8=2*2*2\n9=3*3\n10=2*5\n""}]","6e47c5a51e7b2980ad2292ecbe267037","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>提示</p><p>　　先筛出所有素数，然后再分解。</p><p>数据规模和约定</p><p>　　2&lt;=a&lt;=b&lt;=10000</p>","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:05.621887+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-2","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
64,"报时助手","<p>　给定当前的时间，请用英文的读法将它读出来。　　</p><p>时间用时h和分m表示，在英文的读法中，读一个时间的方法是：　　</p><p>如果m为0，则将时读出来，然后加上“o&#039;clock”，如3:00读作“three o&#039;clock”。　　</p><p>如果m不为0，则将时读出来，然后将分读出来，如5:30读作“five thirty”。　　</p><p>时和分的读法使用的是英文数字的读法，其中0~20读作：　　</p><p>0:zero, 1: one, 2:two, 3:three, 4:four, 5:five, 6:six, 7:seven, 8:eight, 9:nine, 10:ten, 11:eleven, 12:twelve, 13:thirteen, 14:fourteen, 15:fifteen, 16:sixteen, 17:seventeen, 18:eighteen, 19:nineteen, 20:twenty。　　</p><p>30读作thirty，40读作forty，50读作fifty。　　</p><p>对于大于20小于60的数字，首先读整十的数，然后再加上个位数。如31首先读30再加1的读法，读作“thirty one”。　　</p><p>按上面的规则21:54读作“twenty one fifty four”，9:07读作“nine seven”，0:15读作“zero fifteen”。</p>","<p>输入包含两个非负整数h和m，表示时间的时和分。非零的数字前没有前导0。h小于24，m小于60。</p>","<p>　输出时间时刻的英文。</p>","[{""input"": ""0 15"", ""output"": ""zero fifteen""}]","9a0d1ee9b6d7b7d91f3ac89f365747fb","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:12.098193+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-3","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
65,"回形取数","<p>回形取数就是沿矩阵的边取数，若当前方向上无数可取或已经取过，则左转90度。一开始位于矩阵左上角，方向向下。</p>","<p>　输入第一行是两个不超过200的正整数m, n，表示矩阵的行和列。接下来m行每行n个整数，表示这个矩阵。</p>","<p>　输出只有一行，共mn个数，为输入矩阵回形取数得到的结果。数之间用一个空格分隔，行末不要有多余的空格。</p>","[{""input"": ""3 3\n1 2 3\n4 5 6\n7 8 9\n"", ""output"": ""1 4 7 8 9 6 3 2 5""}, {""input"": ""3 2\n1 2\n3 4\n5 6\n"", ""output"": ""1 3 5 6 4 2""}]","12af7f0de5cc7e730d4779a49a8c1247","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:22.403613+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-4","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
66,"回文数字","<p>观察数字：12321，123321 都有一个共同的特征，无论从左到右读还是从右向左读，都是相同的。这样的数字叫做：回文数字。  　　</p><p>本题要求你找到一些5位或6位的十进制数字。满足如下要求： 　　</p><p>该数字的各个数位之和等于输入的整数。</p>","<p>一个正整数 n (10&lt;n&lt;100), 表示要求满足的数位和。</p>","<p>若干行，每行包含一个满足要求的5位或6位整数。 　　</p><p>数字按从小到大的顺序排列。 　　</p><p>如果没有满足条件的，输出：-1</p>","[{""input"": ""44\n"", ""output"": ""99899 \n499994 \n589985 \n598895\n 679976 \n688886\n 697796\n 769967 \n778877 \n787787\n 796697\n 859958\n 868868\n 877778\n 886688\n 895598\n949949 \n958859 \n967769 \n976679 \n985589 \n994499\n\n""}, {""input"": ""60\n"", ""output"": ""-1\n""}]","148350bd866dc6e4636d0c02654053a6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:28.341855+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",36,10,1,"1-5","{""0"": 10, ""1"": 5, ""4"": 11, ""-1"": 8, ""-2"": 2}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
67,"阶乘计算","<p>输入一个正整数n，输出n!的值。　　</p><p>其中n!=123…n。</p><p>算法描述</p><p>　　n!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组A来表示一个大整数a，A[0]表示a的个位，A[1]表示a的十位，依次类推。　　</p><p>将a乘以一个整数k变为将数组A的每一个元素都乘以k，请注意处理相应的进位。</p><p>　　首先将a设为1，然后乘2，乘3，当乘到n时，即得到了n!的值。</p>","<p>　输入包含一个正整数n，n&lt;=1000。</p>","<p>输出n!的准确值。</p>","[{""input"": ""10"", ""output"": ""3628800""}]","d28c4ed42a01748a2ef86b46d297884a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:34.935518+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",15,10,1,"1-6","{""0"": 10, ""2"": 1, ""-1"": 3, ""-2"": 1}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
68,"数的读法","<p>　Tom教授正在给研究生讲授一门关于基因的课程，有一件事情让他颇为头疼：一条染色体上有成千上万个碱基对，它们从0开始编号，到几百万，几千万，甚至上亿。</p><p>　　比如说，在对学生讲解第1234567009号位置上的碱基时，光看着数字是很难准确的念出来的。</p><p>　　所以，他迫切地需要一个系统，然后当他输入12 3456 7009时，会给出相应的念法：</p><p>　　十二亿三千四百五十六万七千零九</p><p>　　用汉语拼音表示为</p><p>　　shi er yi san qian si bai wu shi liu wan qi qian ling jiu</p><p>　　这样他只需要照着念就可以了。</p><p>　　你的任务是帮他设计这样一个系统：给定一个阿拉伯数字串，你帮他按照中文读写的规范转为汉语拼音字串，相邻的两个音节用一个空格符格开。</p><p>　　注意必须严格按照规范，比如说“10010”读作“yi wan ling yi shi”而不是“yi wan ling shi”，“100000”读作“shi wan”而不是“yi shi wan”，“2000”读作“er qian”而不是“liang qian”。</p>","<p>　有一个数字串，数值大小不超过2,000,000,000。</p>","<p>是一个由小写英文字母，逗号和空格组成的字符串，表示该数的英文读法。</p>","[{""input"": ""1234567009"", ""output"": ""shi er yi san qian si bai wu shi liu wan qi qian ling jiu""}]","4939aa00eeeeb6e93e107ff05a3bb034","[{""score"": 14, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 14, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 14, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 14, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 14, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 14, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 14, ""input_name"": ""7.in"", ""output_name"": ""7.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:42.441969+00",NULL,1000,509,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-7","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
69,"打印十字图","<p>小明为某机构设计了一个十字型的徽标（并非红十字会啊），如下所示：</p><p><img alt=""1-23.png"" src=""/public/upload/88961f4760.png"" width=""245"" height=""536"" /><br /></p><p>对方同时也需要在电脑dos窗口中以字符的形式输出该标志，并能任意控制层数。</p>","<p>一个正整数 n (n&lt;30) 表示要求打印图形的层数。 </p>","<p>对应包围层数的该标志。<br /></p>","[{""input"": ""1"", ""output"": ""..$$$$$..\n..$...$..\n$$$.$.$$$\n$...$...$\n$.$$$$$.$\n$...$...$\n$$$.$.$$$\n..$...$..\n..$$$$$.. ""}, {""input"": ""3"", ""output"": ""..$$$$$$$$$$$$$..\n..$...........$..\n$$$.$$$$$$$$$.$$$\n$...$.......$...$\n$.$$$.$$$$$.$$$.$\n$.$...$...$...$.$\n$.$.$$$.$.$$$.$.$\n$.$.$...$...$.$.$\n$.$.$.$$$$$.$.$.$\n$.$.$...$...$.$.$\n$.$.$$$.$.$$$.$.$\n$.$...$...$...$.$\n$.$$$.$$$$$.$$$.$\n$...$.......$...$\n$$$.$$$$$$$$$.$$$\n..$...........$..\n..$$$$$$$$$$$$$.. ""}]","af4de6ba0f82af4a777b49e665b5d088","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","<p>提示</p><p>请仔细观察样例，尤其要注意句点的数量和输出位置。 </p><p> </p>","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:06:56.251216+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",0,0,1,"1-8","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
70,"字符串对比","<p>给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：</p><p>　　1：两个字符串长度不等。比如 Beijing 和 Hebei</p><p>　　2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing</p><p>　　3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing</p><p>　　4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing</p><p>　　编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</p>","<p>包括两行，每行都是一个字符串</p>","<p>仅有一个数字，表明这两个字符串的关系编号</p>","[{""input"": ""BEIjing\nbeiJing \n"", ""output"": ""3""}]","988bd62ee46270e28997a13038e962d8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:07:03.212817+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-9","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
71,"带分数","<p>100 可以表示为带分数的形式：100= 3 + 69258 / 714。</p><p>还可以表示为：100 = 82 + 3546 / 197。</p><p>注意特征：带分数中，数字1~9分别出现且只出现一次（不包含0）。</p><p>类似这样的带分数，100 有 11 种表示法。</p>","<p>从标准输入读入一个正整数N (N&lt;1000*1000)<br /></p>","<p>程序输出该数字用数码1~9不重复不遗漏地组成带分数表示的全部种数。</p><p>注意：不要求输出每个表示，只统计有多少表示法！</p>","[{""input"": ""100 "", ""output"": ""11""}, {""input"": ""105"", ""output"": ""6""}]","a5e146649aab04e781f130ecf5cf0c79","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 11:07:31.666293+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",0,0,1,"1-10","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
72,"test1","<p>test1</p>","<p>test1</p>","<p>test1</p>","[{""input"": ""test1"", ""output"": ""test1""}]","265cb159542aa8e65a57d137d1ba5f4a","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 12:32:04.059468+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"w123","{}",0,9,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
73,"w1234","<p>w1234</p>","<p>w1234</p>","<p>w1234</p>","[{""input"": ""w1234"", ""output"": ""w1234""}]","a602e9cb6f4d70104e872b822a6b35b4","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 12:43:26.25137+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"w1234","{}",0,9,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
74,"test","<p>test</p>","<p>test</p>","<p>test</p>","[{""input"": ""test"", ""output"": ""test""}]","85a9ee6a237dab02ac65d31af982795d","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 13:41:36.91338+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"test1","{}",0,9,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
75,"升序排序","<p>有x,y,z三个数，将三个数从小到大print出来</p>","<p>输入三个整数，依次用空格隔开</p>","<p>升序输出排序后的大小</p>","[{""input"": ""4 5 3"", ""output"": ""[3, 4, 5]""}]","112bdba6b3cb710a7e0ad2533ac67783","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>请使用python语言解题</p>","[""Python3""]","{}","2018-09-23 13:50:42.277762+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",126,36,1,"1-51","{""0"": 36, ""4"": 40, ""-1"": 18, ""-2"": 32}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
76,"降序排序","<p>输入四个数，实现降序排序</p>","<p>输入四个整数</p>","<p>按降序输出</p>","[{""input"": ""4 5 2 6"", ""output"": ""[6, 5, 4, 2]""}]","bb6dff7f15129bc739a41089e6dfea2b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3""]","{}","2018-09-23 14:15:37.320492+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",110,25,1,"1-52","{""0"": 25, ""4"": 31, ""-1"": 43, ""-2"": 11}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
77,"升序排序","<p>有x,y,z三个数，将三个数从小到大print出来</p>","<p>输入三个整数，依次用空格隔开</p>","<p>升序输出排序后的大小</p>","[{""input"": ""4 5 3"", ""output"": ""[3, 4, 5]""}]","112bdba6b3cb710a7e0ad2533ac67783","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>请使用python语言解题</p>","[""Python3"", ""Python2""]","{}","2018-09-23 14:29:06.999252+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-11","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
78,"test2","<p>test2</p>","<p>test2</p>","<p>test2</p>","[{""input"": ""test2"", ""output"": ""test2""}]","9a2025d1c5be4cc7e6858ca206924a46","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 14:42:05.901229+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"test2","{}",0,9,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
79,"test3","<p>test3</p>","<p>test3</p>","<p>test3</p>","[{""input"": ""test3"", ""output"": ""test3""}]","21e3eca9bba50e1fe1fa04cf47396374","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3""]","{}","2018-09-23 14:47:26.972688+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"3","{}",0,1,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
80,"降序排序","<p>输入四个整数，实现降序排序</p>","<p>输入四个整数，用空格隔开</p>","<p>输出降序排序后的顺序</p>","[{""input"": ""3 5 6 1"", ""output"": ""[6, 5, 3, 1]\n""}]","531c923a1164119350b6e7ca80d82ad7","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python2"", ""Python3""]","{}","2018-09-23 14:51:18.390434+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",112,31,1,"1-53","{""0"": 31, ""4"": 59, ""-1"": 11, ""-2"": 11}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
81,"降序排序","<p>输入四个整数，实现降序排序</p>","<p>输入四个整数，用空格隔开</p>","<p>输出降序排序后的顺序</p>","[{""input"": ""3 5 6 1"", ""output"": ""[6, 5, 3, 1]\n""}]","531c923a1164119350b6e7ca80d82ad7","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3"", ""Python2""]","{}","2018-09-23 14:54:36.219925+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",48,12,1,"1-12","{""0"": 12, ""4"": 26, ""-1"": 9, ""-2"": 1}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
82,"test4","<p>test4</p>","<p>test4</p>","<p>test4</p>","[{""input"": ""test4"", ""output"": ""test4""}]","3ac1d31bc400d806ef8f70078f29ce7b","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python3""]","{}","2018-09-23 15:00:53.712245+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"4","{}",0,1,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
83,"买月饼","<p>中秋节到了，小华想购买学校发售的月饼，而且因为某些原因，他想要尽可能多花点钱，你能帮助他想出最好的购买策略吗？</p><p>注意：假如学校发售的有 3 种月饼，其库存量分别为 18、15、10个，总售价分别为 75、72、45 元。如果小华最多只想买20个，那么花钱最多的策略应该是买全部 15 个第 2 种月饼、以及 5 个第 3 种月饼，花费 72 + 45/2 = 94.5（元）。</p>","<p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 300的正整数 D 表示小华最多想买的月饼数。随后一行给出 N 个正数表示每种月饼的库存量；最后一行给出 N 个正数表示每种月饼的总售价。数字间以空格分隔。</p>","<p>对每组测试用例，在一行中输出最大花费，以元为单位并精确到小数点后 2 位。</p>","[{""input"": ""3 20\n18 15 10\n75 72 45\n"", ""output"": ""94.50\n""}]","9226506c6f4cd385feb191de3c2bc261","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 15:41:49.61343+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",85,16,1,"3","{""0"": 16, ""1"": 1, ""4"": 27, ""-1"": 31, ""-2"": 10}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
84,"排序","<p>给定一个长度为n的数列，将这个数列按从大到小的顺序排列。1&lt;=n&lt;=1000</p>","<p>第一行为一个整数n。</p><p>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","<p>输出一行，按从大到小的顺序输出排序后的数列。</p>","[{""input"": ""5\n8 3 5 4 2\n"", ""output"": ""8 5 4 3 2\n""}]","faf03e00a45550da9814879fe0fd8bca","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 15:51:47.879794+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",59,33,1,"1","{""0"": 33, ""4"": 2, ""-1"": 17, ""-2"": 7}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
85,"字符串转换","<p>编写一个程序，输入一个字符串（不超过100），然后把这个字符串内的每一个字符进行大小写变换，即将大写字母变成小写，小写字母变成大写，然后把这个新的字符串输出。</p>","<p>输入一个字符串，而且这个字符串当中只包含英文字母，不包含其他类型的字符（有空格）。</p>","<p>输出经过转换后的字符串。</p>","[{""input"": ""sYiL l E\n"", ""output"": ""SyIl L e\n""}]","9b574841da39feb842e66ced522d438f","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 15:54:16.619915+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",121,19,1,"2","{""0"": 19, ""1"": 4, ""2"": 2, ""4"": 24, ""-1"": 39, ""-2"": 33}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
86,"找球游戏","<p>华师大一年一度的新春游园会上有一个非常有趣的游戏，名为找球游戏。</p><p>游戏规则为：在现有的一堆球中，每个球上都有一个整数编号i(0&lt;=i&lt;=100000000),编号可重复，还有一个空箱子。<br />现在有三种动作：一种是&quot;ADD&quot;，表示向空箱子里放m(0&lt;m&lt;=100)个球，另一种是“DELETE”，表示从箱子里拿走m个球（拿走的球必然是箱子里有的），还有一种是&quot;QUERY”，表示说出M(0&lt;M&lt;=100)个随机整数ki(0&lt;=ki&lt;=100000100),分别判断编号为ki 的球是否在这个空箱子中（存在为&quot;YES&quot;,否则为&quot;NO&quot;），先答出者为胜。小华很想玩玩这个游戏，但他又很懒。所以他希望你能帮助他取得胜利。</p>","<p>第一行有一个整数n(0&lt;n&lt;=10000);</p><p>随后有n行;</p><p>每行可能出现如下的任意一种形式：</p><p>第一种：一个字符串&quot;ADD&quot;，接着是一个整数m，随后有m个i；</p><p>第二种：一个字符串&quot;DELETE”，接着是一个整数s，随后有l个si；</p><p>第三种：一个字符串&quot;QUERY”，接着是一个整数M，随后有M个ki；</p>","<p>输出每次询问的结果&quot;YES&quot;或&quot;NO&quot;.</p>","[{""input"": ""2\nADD 5 34 343 54 6 2\nQUERY 4 34 54 33 66\n"", ""output"": ""YES\nYES\nNO\nNO\n""}]","45f381399d00a097e35b4d87e1ff0848","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 15:57:03.935019+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",115,2,1,"4","{""0"": 2, ""3"": 1, ""4"": 13, ""-1"": 87, ""-2"": 12}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
87,"进制转换","<p>从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。</p><p>注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p>","<p>输入需要转换的十进制数</p>","<p>输出转换后的十六进制数</p>","[{""input"": ""EFF\n"", ""output"": ""3839\n""}]","e67e7cad56af851225c9a6058b93a063","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 15:58:07.75775+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",136,15,1,"5","{""0"": 15, ""1"": 2, ""4"": 3, ""-1"": 98, ""-2"": 18}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
88,"迷宫游戏","<p>小华想要开发一个传统的迷宫游戏，但是他不知道自己设计的地图是否符合要求，请你帮助他来判断。</p>","<p>第一行两个整数n， m，为迷宫的长宽。</p><p>接下来n行，每行m个数，数之间没有间隔，为0或1中的一个。0表示这个格子可以通过，1表示不可以。假设迷宫的起点固定为（1,1）,迷宫的出口固定为(n,m)。每次移动时只能向上下左右4个方向移动到另外一个可以通过的格子里，每次移动算一步。</p>","<p>输出一行”Yes”代表地图符合要求，“No”代表地图不符合要求（既起点到终点无通路）</p>","[{""input"": ""3 3\n0 0 1\n1 0 0\n1 1 0\n"", ""output"": ""Yes\n""}]","ca93fc14400ab4c8769e50ccda27c42c","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 16:00:03.038579+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",64,15,1,"6","{""0"": 15, ""4"": 17, ""-1"": 29, ""-2"": 3}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
89,"信仰问题","<p>世界上宗教何其多，小华对华师大的学生总共有多少种宗教信仰很感兴趣，想请你帮忙解决一个问题。</p><p>假设华师大有n个学生，但是你不能直接问学生的信仰，不然他会感到很不舒服。有另外一个方法是问m对同学，是否信仰同一宗教。根据这些数据，相信聪明的你是能够计算学校最多有多少种宗教信仰的。</p>","<p>输入由多个实例组成。每种情况都以指定整数n和m的行开始。接下来的m行分别由两个整数i和j组成，指定学生i和j信仰的是相同的宗教。</p><p>学生的编号为1到N。当输入为n=0，m= 0时，结束。</p>","<p>对于每个测试用例，在单行上打印案例号（从1开始），接着是大学生所信仰的不同宗教的最大数量。</p>","[{""input"": ""4 3\n1 2\n3 4\n2 3\n10 7\n1 2\n2 3\n1 3\n5 6\n8 9\n1 9\n8 3\n0 0\n"", ""output"": ""Case 1: 1\nCase 2: 5\n""}]","5cf1f940e289f8b03dfed54791f6ef92","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 16:01:15.894098+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",69,8,1,"7","{""0"": 8, ""4"": 15, ""-1"": 40, ""-2"": 6}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
90,"连连看","<p>小华在业余时间很喜欢玩连连看，现在他很想开发一个自动判别两个格子能不能消去的程序，但又毫无头绪，所以希望你能帮助他。</p><p>“连连看”的游戏规则：在一个棋盘中，放了很多的棋子。如果某两个相同的棋子，可以通过一条线连起来（这条线不能经过其它棋子，且不能从棋盘外围通过），而且线的转折次数不超过两次，那么这两个棋子就可以在棋盘上消去。</p><p>玩家鼠标先后点击两块棋子，试图将他们消去，然后游戏的后台判断这两个格子能不能消去。现在你的任务就是帮助小华写出这个后台程序。</p>","<p>输入数据有多组。每组数据的第一行有两个正整数n,m(0&lt;n&lt;=1000,0&lt;m&lt;1000)，分别表示棋盘的行数与列数。在接下来的n行中，每行有m个非负整数描述棋盘的方格分布。0表示这个位置没有棋子，正整数表示棋子的类型。</p><p>接下来的一行是一个正整数q(0&lt;q&lt;10)，表示下面有q次询问。在接下来的q行里，每行有四个正整数x1,y1,x2,y2,表示询问第x1行y1列的棋子与第x2行y2列的棋子能不能消去。</p><p>n=0,m=0时，输入结束。 </p><p> 注意：询问之间无先后关系，互不影响，都是针对当前状态的！ </p>","<p>每一组输入数据对应一行输出。如果能消去则输出&quot;YES&quot;,不能则输出&quot;NO&quot;。 </p>","[{""input"": ""3 4\n1 2 3 4\n0 0 0 0\n4 3 2 1\n4\n1 1 3 4\n1 1 2 4\n1 1 3 3\n2 1 2 4\n"", ""output"": ""YES\nNO\nNO\nNO\n""}, {""input"": ""3 4\n0 1 4 3\n0 2 4 1\n0 0 0 0\n2\n1 1 2 4\n1 3 2 3\n0 0\n"", ""output"": ""NO\nYES\n""}]","104a37b058219b42fe1dab360c494f74","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>注意：c/c++如要使用INT_MAX，需加头文件limits.h或者climits</p>","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-23 16:02:55.086577+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",15,0,1,"8","{""-1"": 13, ""-2"": 2}",0,4,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
91,"求指定区间的和","<p>求指定区间的和</p>","<p>求指定区间的和</p>","<p>求指定区间的和</p>","[{""input"": ""求指定区间的和"", ""output"": ""求指定区间的和""}]","975c18353f2594f79df1e578ca54d992","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2018-09-24 01:39:54.262336+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"5","{}",0,1,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
92,"求指定区间的和","<p>给定两个大小不同的整数值，求两个值之间的数所有值的和</p>","<p>输入两个整数</p>","<p>输出和</p><p>注意：输入值区间是左闭右开[a,b)</p>","[{""input"": ""34 99"", ""output"": ""4290""}]","f40ef1cd8ae3030c907a3f040f9a6619","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python3""]","{}","2018-09-24 01:44:09.515095+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",59,28,1,"1-54","{""0"": 28, ""4"": 5, ""-1"": 3, ""-2"": 23}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
93,"求指定区间的和","<p>给定两个大小不同的整数值，求两个值之间的数所有值的和</p>","<p>输入两个整数</p>","<p>输出和</p><p>注意：输入值区间是左闭右开[a,b)</p>","[{""input"": ""34 99"", ""output"": ""4290""}]","f40ef1cd8ae3030c907a3f040f9a6619","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python3"", ""Python2""]","{}","2018-09-24 01:44:28.627532+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-13","{}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
94,"求指定区间的奇数个数","<p>求指定区间的奇数个数</p>","<p>求指定区间的奇数个数</p>","<p>求指定区间的奇数个数</p>","[{""input"": ""求指定区间的奇数个数"", ""output"": ""求指定区间的奇数个数""}]","df0241f5229485fcb379e5b614398b36","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python3""]","{}","2018-09-24 02:05:04.55404+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"6","{}",0,1,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
95,"求指定区间的奇数个数","<p>求指定区间的奇数个数</p>","<p>输入两个整数a,b,区间范围为[a,b)</p>","<p>输出区间内奇数的个数</p>","[{""input"": ""1 101"", ""output"": ""50""}]","c0a21adffa2f65c498d643cc29e17ac9","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python2"", ""Python3""]","{}","2018-09-24 02:08:35.494582+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",77,28,1,"1-55","{""0"": 28, ""4"": 10, ""-1"": 13, ""-2"": 26}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
96,"求指定区间的奇数个数","<p>求指定区间的奇数个数</p>","<p>输入两个整数a,b,区间范围为[a,b)</p>","<p>输出区间内奇数的个数</p>","[{""input"": ""1 101"", ""output"": ""50""}]","c0a21adffa2f65c498d643cc29e17ac9","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python3"", ""Python2""]","{}","2018-09-24 02:09:06.165535+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",35,14,1,"1-14","{""0"": 14, ""4"": 13, ""-1"": 7, ""-2"": 1}",0,8,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
97,"买糖果","<p>万圣节前夕，孩子们会提着南瓜灯，穿着各式各样的稀奇古怪的服装，挨家挨户地去索要糖果，不停地说：“trick or treat”（意思是：“给不给，不给就捣蛋。”）要是你不肯给糖果的话，孩子们就会很生气，用各种方法去惩罚你，例如：把垃圾倒在你家里等等的方法去惩罚你，直到你肯给他们糖果为止。那么问题来了，丁丁有n元钱，商店里每个糖果需要3毛钱，问丁丁最多能买多少糖果，还剩几毛钱。</p>","<p>丁丁拥有的钱n，单位为元，n为整数。</p>","<p>丁丁最多能买多少糖果，还剩几毛钱，用空格分开。</p>","[{""input"": ""2"", ""output"": ""6 2""}]","4c33e102591f69c2b76c62dc37bded76","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-11-09 11:22:42.50106+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",36,21,1,"A","{""0"": 21, ""-1"": 3, ""-2"": 12}",0,10,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
98,"城市连通","<p>有n个城市（编号为1-n），现在给你m条边，每条边用u,v表示，代表城市u和城市v之间有公路直接连接。现在有q个询问，每个询问有a,b两个数，问你a城市和b城市是否直接连通。</p>","<p>第一行输入n,m。n代表城市个数，m代表公路个数，接下来有m行，每行两个数u,v，代表城市u,v之间有公路，接下来一行输入q,代表有q次询问，接下来q行，每行输入a,b，代表要查询的城市。1&lt;=n,u,v,a,b&lt;=1000</p>","<p>对于每次询问，输出YES代表两个城市直接连通（不通过任何中间城市），NO代表两个城市不直接连通。</p>","[{""input"": ""2 1\n1 2\n1\n2 1"", ""output"": ""YES""}]","1bb509968c908196a70b149fe858fabb","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>自身到自身默认可达。</p>","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-11-09 12:54:54.493159+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",68,8,1,"B","{""0"": 8, ""4"": 11, ""-1"": 40, ""-2"": 9}",0,10,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
99,"捡石子","<p>丁丁喜欢捡石子，有一天他突然有了一个有趣的想法，有n个石子，每次他只能捡一颗石子或者两颗石子，他想知道捡完这n颗石子共有多少方案。</p>","<p>n个石子，n&lt;=10</p>","<p>捡完这些石子的总方案数</p>","[{""input"": ""2"", ""output"": ""2""}]","9450bf635e4f143b2544c109751d9b47","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-11-09 13:20:23.139672+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",27,17,1,"C","{""0"": 17, ""-1"": 8, ""-2"": 2}",0,10,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
100,"判断可达性","<p>有N行M列的地图，左上角坐标为（1,1），右下角坐标为（n,m），每个格子可以是空地或墙，空地可以走，问能否从（1,1）到达（n,m）</p>","<p>输入n,m，代表地图的大小1&lt;=n,m&lt;=10接下来有n行，每行m个数用0或1表示，1表示为墙，0代表空地。起点和终点必为空地。</p>","<p>能到达（n,m）输出YES，否则输出NO。</p>","[{""input"": ""2 3\n0 0 1\n1 0 0"", ""output"": ""YES""}]","1ad8f2001b4eced8507a33b4e6a426ae","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-11-09 13:54:17.898849+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",18,3,1,"D","{""0"": 3, ""4"": 5, ""-1"": 5, ""-2"": 5}",0,10,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
101,"判断素数","<p>一个大于1的正整数，如果除了1和它本身以外，不能被其他正整数整除，就叫素数,给一个数n，判断它是不是素数。</p>","<p>输入数字n，2&lt;=n&lt;=1000000000</p>","<p>如果n为素数，输出YES，否则输出NO</p>","[{""input"": ""2"", ""output"": ""YES""}]","9863c7db4beafe336b26fbbb242154e2","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-11-09 14:17:16.374669+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",37,13,1,"E","{""0"": 13, ""4"": 2, ""-1"": 8, ""-2"": 14}",0,10,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
102,"快速排序","<p>输入n个数，将它们从小到大排序输出</p>","<p>n代表n个数，随后n个数，1&lt;=n&lt;=1000000</p>","<p>排好序的数，中间用空格分开。</p>","[{""input"": ""4\n1 2 3 4"", ""output"": ""1 2 3 4""}]","8641b3055422588c5302ba405bf56e9f","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-12-19 18:15:46.479799+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",19,9,1,"B","{""0"": 9, ""4"": 2, ""-1"": 2, ""-2"": 6}",0,11,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
103,"二分查找","<p>输入n个排好序（从小到大）的数，输入q，代表q次询问，每次输入数m，问m是否在序列中，是输出数m所在下标,否则输出-1</p>","<p>n，代表n个数，1&lt;=n&lt;=100000随后输入n个数q，代表q次询问，1&lt;=n&lt;=100000随后q行，每行一个数字m，代表需要查询的数</p>","<p>输出数m所在下标,否则输出-1</p>","[{""input"": ""5\n1 2 3 4 5\n2\n1 8"", ""output"": ""0\n-1""}]","5830663f726332c86586d2cab50a7952","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C++"", ""Python2"", ""Python3"", ""C"", ""Java""]","{}","2018-12-19 18:17:37.515242+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",34,8,1,"A","{""0"": 8, ""1"": 8, ""4"": 2, ""-1"": 9, ""-2"": 7}",0,11,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
104,"二叉树的建立与遍历1","<p>已知二叉树的先序遍历的字符串如abd##e#f##cg###,#代表空节点，求二叉树的中序和后序遍历</p>","<p>二叉树的先序遍历的字符串</p>","<p>输出两行，分别为二叉树的中序遍历序列和后序遍历序列</p>","[{""input"": ""abd##e#f##cg###"", ""output"": ""dbefagc\ndfebgca\n""}]","c6237a03f2f8a9bc7cf528fb378e4145","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-12-19 18:42:58.65126+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",10,3,1,"C","{""0"": 3, ""-1"": 1, ""-2"": 6}",0,11,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
105,"二叉树的建立与遍历2","<p>已知先序遍历序列和中序遍历序列，求二叉树的后序遍历和层序遍历序列</p>","<p>输入数据有多组，第一行是一个整数t (t&lt;1000)，代表有t组测试数据。每组包括两个字符串，第一个字符串表示二叉树的先序遍历序列，第二个字符串表示二叉树的中序遍历序列。</p>","<p>每组第一行输出二叉树的后序遍历序列，第二行输出二叉树的层次遍历序列。</p>","[{""input"": ""1\nabdegcf\ndbgeafc"", ""output"": ""dgebfca\nabcdefg""}]","e500a2f9e418466574c66fa89b2f7853","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Python2"", ""Python3"", ""Java""]","{}","2018-12-19 18:56:23.129623+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",4,0,1,"D","{""-1"": 4}",0,11,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
106,"排序","<p>给定一个长度为n的数列，将这个数列中重复元素删去，并按从大到小的顺序排列。1&lt;=n&lt;=1000</p>","<p>第一行为一个整数n。第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","<p>输出一行，按从大到小的顺序输出排序后的数列。</p>","[{""input"": ""7\n8 3 5 4 2 3 2\n"", ""output"": ""8 5 4 3 2\n""}]","30eabe8ef4d87fd1295edd79f3b7ba27","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python2"", ""Python3""]","{}","2019-01-01 09:20:39.125766+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",19,8,1,"1-1","{""0"": 8, ""-1"": 11}",0,12,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
107,"第一个不重复字符","<p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p><p>注意事项：您可以假定该字符串只包含小写字母。</p>","<p>输入一行字符</p>","<p>输出一个数字，为第一个不重复数字的索引（从0 开始）；没有则输出-1</p>","[{""input"": ""loveleetcode\n"", ""output"": ""2\n""}]","ef149af1c37c5099c74c339a718db6e3","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python2"", ""Python3""]","{}","2019-01-01 09:32:52.073701+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",11,7,1,"1-2","{""0"": 7, ""4"": 3, ""-1"": 1}",0,12,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
108,"进制转换","<p>从键盘输入一个十进制字符串，将它转换为正的十六进制数后输出。</p>","<p>输入需要转换的十进制数</p>","<p>输出转换后的十六进制数</p>","[{""input"": ""3839\n"", ""output"": ""EFF\n\n""}]","dbef94849a7ee8278950e4f03be9d79f","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python2"", ""Python3""]","{}","2019-01-01 09:34:58.905283+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",13,7,1,"1-3","{""0"": 7, ""-1"": 6}",0,12,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
109,"单词统计","<p>给你一段文字，请统计其中各个单词的数目。文字中可能包含以下字符：</p><p>[&#039;,&#039;,&#039;.&#039;,&#039;!&#039;,&#039;?&#039;,&#039;:&#039;,&#039;(&#039;,&#039;)&#039;]</p><p>请统计文字中的单词出现次数，并按照先后顺序输出。</p><p>注意：单词区分大小写，既What 和what算2个单词</p>","<p>输入一行，为待处理文本</p>","<p>按照单词在文本中首次出现的顺序依次输出出现次数。</p>","[{""input"": ""apple grape banana apple egg an list apple go an\n"", ""output"": ""apple 3\ngrape 1\nbanana 1\negg 1\nan 2\nlist 1\ngo 1\n""}, {""input"": ""What is the problem？ How is it！\n\n"", ""output"": ""What 1\nis 2\nthe 1\nproblem 1\nHow 1\nit 1\n\n""}]","227d6863151c036332afeae237972505","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Java"", ""C"", ""Python2"", ""C++"", ""Python3""]","{}","2019-01-01 09:37:21.611294+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",29,1,1,"1-4","{""0"": 1, ""-1"": 26, ""-2"": 2}",0,12,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
110,"国王的烦恼","<p>　　C国由n个小岛组成，为了方便小岛之间联络，C国在小岛间建立了m座大桥，每座大桥连接两座小岛。两个小岛间可能存在多座桥连接。然而，由于海水冲刷，有一些大桥面临着不能使用的危险。<br /><br />　　如果两个小岛间的所有大桥都不能使用，则这两座小岛就不能直接到达了。然而，只要这两座小岛的居民能通过其他的桥或者其他的小岛互相到达，他们就会安然无事。但是，如果前一天两个小岛之间还有方法可以到达，后一天却不能到达了，居民们就会一起抗议。<br /><br />　　现在C国的国王已经知道了每座桥能使用的天数，超过这个天数就不能使用了。现在他想知道居民们会有多少天进行抗议。<br /></p>","<p>　　输入的第一行包含两个整数n, m，分别表示小岛的个数和桥的数量。<br />　　接下来m行，每行三个整数a, b, t，分别表示该座桥连接a号和b号两个小岛，能使用t天。小岛的编号从1开始递增。<br /></p>","<p>　　输出一个整数，表示居民们会抗议的天数。<br /></p>","[{""input"": ""4 4\n1 2 2\n1 3 2\n2 3 1\n3 4 3\n"", ""output"": ""2""}]","478fac221378de5fdb00bdbb61dbab94","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>样例说明</p><p>　　第一天后2和3之间的桥不能使用，不影响。<br />　　第二天后1和2之间，以及1和3之间的桥不能使用，居民们会抗议。<br />　　第三天后3和4之间的桥不能使用，居民们会抗议。</p><p>数据规模和约定</p><p>　　对于30%的数据，1&lt;=n&lt;=20，1&lt;=m&lt;=100；<br />　　对于50%的数据，1&lt;=n&lt;=500，1&lt;=m&lt;=10000；<br />　　对于100%的数据，1&lt;=n&lt;=10000，1&lt;=m&lt;=100000，1&lt;=a, b&lt;=n， 1&lt;=t&lt;=100000。</p>","[""C++"", ""C"", ""Python3"", ""Java"", ""Python2""]","{}","2019-01-01 09:49:04.704404+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",7,5,1,"1-5","{""0"": 5, ""-1"": 1, ""-2"": 1}",0,12,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
111,"排序","<p>给定一个长度为n的数列，将这个数列中重复元素删去，并按从大到小的顺序排列。1&lt;=n&lt;=1000</p>","<p>第一行为一个整数n。第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","<p>第一行为一个整数n。第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","[{""input"": ""7\n8 3 5 4 2 3 2\n"", ""output"": ""8 5 4 3 2\n""}]","8e68a0b6a9d3ec95cde29d66a5e6ad29","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-01-01 10:24:08.112131+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",135,0,1,"1-56","{""-2"": 135}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
112,"时间转换","<p>　给定一个以秒为单位的时间t，要求用 “::”的格式来表示这个时间。表示时间，表示分钟， 而表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。</p>","<p>　输入只有一行，是一个整数t（0&lt;=t&lt;=86399）。</p>","<p>输出只有一行，是以“::”的格式所表示的时间，不包括引号。</p>","[{""input"": ""0"", ""output"": ""0:0:0""}, {""input"": ""5436"", ""output"": ""1:30:36""}]","235020449b2f996679c2662f392c37ae","[{""score"": 3, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 3, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 3, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 3, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 3, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 3, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 3, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 3, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 3, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 3, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 3, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 3, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 3, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 3, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 3, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 3, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 3, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 3, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 3, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 3, ""input_name"": ""20.in"", ""output_name"": ""20.out""}, {""score"": 3, ""input_name"": ""21.in"", ""output_name"": ""21.out""}, {""score"": 3, ""input_name"": ""22.in"", ""output_name"": ""22.out""}, {""score"": 3, ""input_name"": ""23.in"", ""output_name"": ""23.out""}, {""score"": 3, ""input_name"": ""24.in"", ""output_name"": ""24.out""}, {""score"": 3, ""input_name"": ""25.in"", ""output_name"": ""25.out""}, {""score"": 3, ""input_name"": ""26.in"", ""output_name"": ""26.out""}, {""score"": 3, ""input_name"": ""27.in"", ""output_name"": ""27.out""}, {""score"": 3, ""input_name"": ""28.in"", ""output_name"": ""28.out""}, {""score"": 3, ""input_name"": ""29.in"", ""output_name"": ""29.out""}, {""score"": 3, ""input_name"": ""30.in"", ""output_name"": ""30.out""}, {""score"": 3, ""input_name"": ""31.in"", ""output_name"": ""31.out""}, {""score"": 3, ""input_name"": ""32.in"", ""output_name"": ""32.out""}, {""score"": 3, ""input_name"": ""33.in"", ""output_name"": ""33.out""}, {""score"": 3, ""input_name"": ""34.in"", ""output_name"": ""34.out""}, {""score"": 3, ""input_name"": ""35.in"", ""output_name"": ""35.out""}, {""score"": 3, ""input_name"": ""36.in"", ""output_name"": ""36.out""}]","","[""C++"", ""Python2"", ""Python3"", ""C"", ""Java""]","{}","2019-01-01 10:42:38.881878+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-6","{}",0,12,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
113,"矩阵乘法","<p>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）</p><p>　　例如：</p><p>　　A =</p><p>　　1 2</p><p>　　3 4</p><p>　　A的2次幂</p><p>　　7 10</p><p>　　15 22</p>","<p>　第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数</p><p>   接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</p>","<p>输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</p>","[{""input"": ""2 2\n1 2\n3 4\n"", ""output"": ""7 10\n15 22\n""}]","a7024888d0ae8fe267ea13adc5647506","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C++"", ""Python2"", ""Python3"", ""C"", ""Java""]","{}","2019-01-01 10:43:31.661979+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-7","{}",0,12,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
114,"降序排序","<p>输入四个整数，实现降序排序</p>","<p>输入四个整数，用空格隔开</p>","<p>输出降序排序后的顺序</p>","[{""input"": ""3 5 6 1"", ""output"": ""[6, 5, 3, 1]\n""}]","531c923a1164119350b6e7ca80d82ad7","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3"", ""Python2""]","{}","2019-01-01 10:44:10.934652+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"1-8","{}",0,12,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
115,"连号区间数","<p>小明这些天一直在思考这样一个奇怪而有趣的问题：</p><p>在1~N的某个全排列中有多少个连号区间呢？这里所说的连号区间的定义是：</p><p>如果区间[L, R] 里的所有元素（即此排列的第L个到第R个元素）递增排序后能得到一个长度为R-L+1的“连续”数列，则称这个区间连号区间。</p><p>当N很小的时候，小明可以很快地算出答案，但是当N变大的时候，问题就不是那么简单了，现在小明需要你的帮助。</p>","<p>第一行是一个正整数N (1 &lt;= N &lt;= 50000), 表示全排列的规模。</p><p>第二行是N个不同的数字Pi(1 &lt;= Pi &lt;= N)， 表示这N个数字的某一全排列。</p>","<p>输出一个整数，表示不同连号区间的数目。</p>","[{""input"": ""4 \n3 2 4 1\n"", ""output"": ""7 \n""}, {""input"": ""5 \n3 4 2 5 1\n"", ""output"": ""9\n""}]","2a2270712735d06374fde56991fa3fb6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C++"", ""Python2"", ""Python3"", ""C"", ""Java""]","{}","2019-01-01 10:45:18.830243+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",0,0,1,"1-9","{}",0,12,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
116,"数字排序","<p>小华手上有一个长度为n的数列，里面的数字都是乱序的，现在他想要将它们都按照从大到小排序，你能帮助他吗？</p>","<p>第一行为一个整数n（1&lt;=n&lt;=1000）第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","<p>输出一行，按从大到小的顺序输出排序后的数列。</p>","[{""input"": ""5\n8 3 5 4 2\n"", ""output"": ""8 5 4 3 2""}]","979fa98d412810850905331773206bfe","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:09:44.253061+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",58,29,1,"A","{""0"": 29, ""-1"": 16, ""-2"": 13}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
117,"字符串拼接","<p>从键盘输入两个字符串(包含大小写)，将两字符串合并，要求合并后的字符串按照ASCII码顺序排列，并且重复字符只出现一次（大小写不算重复），最后输出合并后的结果。</p>","<p>分行从键盘输入两个有序字符串（每个字符串不超过50个字符）</p>","<p>输出合并后的有序字符串</p>","[{""input"": ""abcADeg\nbdfh\n"", ""output"": ""ADabcdefgh""}]","ffb16d0159347c9efe7a9e58e37ab7ba","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:11:49.617287+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",123,17,1,"D","{""0"": 17, ""4"": 23, ""-1"": 60, ""-2"": 23}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
118,"分石子","<p>小华有N个石子，每个石子的重量为Qi，现在他要按顺序将它们装入K个筐中，求一种方案，使得最重的筐的重量达到最轻。例如当N=6, K=3,Q[1..6]=(3,8,4,11,3,4)时，最轻重量为15，装法为(3,8,4)(11)(3,4)</p>","<p>N(&lt;=10000), K(&lt;=100)Q[1..N] (&lt;=10000)</p>","<p>最重筐的最轻重量</p>","[{""input"": ""6 3\n3 8 4 11 3 4\n"", ""output"": ""15""}]","84f465036627558c971c0bfa957bd577","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:13:36.429287+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",13,2,1,"G","{""0"": 2, ""4"": 1, ""-1"": 7, ""-2"": 3}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
119,"矩阵求和","<p>给定一个n*m的矩阵，矩阵上的每个格子上都有一个权值。</p><p>现在有q次询问，每次询问给出一个子矩阵的左上角$(x_1,y_1)$和右下角$(x_2,y_2)$，求该子矩阵的权值和。</p>","<p>第一行给定三个整数n，m，q。$(1 \leq n,m \leq 1000, 1 \leq q \leq 100000)$</p><p>接下来q行，每行四个整数$x_1,y_1,x_2,y_2$表示询问。$(1 \leq x_1 \leq x_2 \leq n, 1 \leq y_1 \leq y_2 \leq m)$</p><p>接下来n行，每行m个大小权值不超过1000的整数，表示矩阵。</p>","<p>输出q行，每行一个整数表示答案。</p>","[{""input"": ""3 3 3\n1 1 1 1\n1 2 2 3\n2 2 3 3\n1 2 3\n4 5 6\n7 8 9"", ""output"": ""1\n16\n28""}]","3c0fa77fe5af6a70d1894d610d90a87c","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:17:22.850833+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",138,7,1,"E","{""0"": 7, ""1"": 53, ""4"": 25, ""-1"": 43, ""-2"": 10}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
120,"阶乘","<p>小明现在会求$n!$以及$n!$末尾连续0的个数了，但是他现在想考考你另一个问题：</p><p>给定一个整数k，求最小的n，使得$n!$末尾连续0的个数$\geq$k。</p><p>小明怕你不记得相关公式了，所以他告诉你$n !$末尾连续0的个数的公式为：$\lfloor\frac{n}{5}\rfloor+\lfloor\frac{n}{5 ^2}\rfloor+\lfloor\frac{n}{5^3}\rfloor+...+0$</p>","<p>一个整数k。($1 \leq k \leq 2e8$)</p>","<p>一个整数n表示答案。(保证答案不会超过int最大值)</p>","[{""input"": ""10"", ""output"": ""45""}]","7e435504942561325d933b19809c4881","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:19:39.943292+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",106,5,1,"F","{""0"": 5, ""1"": 56, ""4"": 3, ""-1"": 38, ""-2"": 4}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
121,"消消乐","<p>小明在玩一款新的消消乐游戏，游戏描述如下：</p><p>给定一个n*m的矩阵作为游戏棋盘，棋盘为四连通，棋盘上共有2种字符:</p><ul><li>‘c’: 表示该点可以连通</li><li>‘x’: 表示该点为障碍点</li></ul><p>游戏获得奖励有两种规则：</p><p>规则一：对于棋盘中的一点，若字符为‘c’，可以选择消去该点并获得奖励p；</p><p>规则二：对于棋盘上相邻的两点（即两点为上下或左右相邻），若字符都为‘c’，则可以选择消去这两点并获得奖励q。</p><p>现在给定n*m大小的棋盘和两种奖励p和q，求最优方案下你能获得的最大奖励。</p>","<p>第一行给定四个整数：$n,m,p,q(n,m \geq 1,n*m \leq 10,1 \leq p,q \leq 1e6)$</p><p>接下来n行，每行长度为m的字符串，表示棋盘，棋盘只有两种字符$&#039;c&#039;,&#039;x&#039;$。</p>","<p>一个整数表示你能获得的最大奖励。</p>","[{""input"": ""2 2 5 9\ncc\ncc"", ""output"": ""20""}, {""input"": ""1 4 5 11\ncccx"", ""output"": ""16""}]","181ab5801a45c5d4bb6df31fccbcbbac","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","<p>样例一所有字符按规则一消去能够获得20的最大奖励。样例二对任意两个相邻字符按规则二，剩下的字符按规则一，可以获得16的最大奖励。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:21:27.078991+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",16,3,1,"I","{""0"": 3, ""-1"": 13}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
122,"小华的游戏","<p>小华在玩一个迷宫游戏。他想快一点找到一条从起点到终点的路径，但是又懒得自己去做，于是就委托你帮他找一条最短的路线。</p>","<p>第一行两个整数n， m，为迷宫的长宽。接下来n行，每行m个数，数之间没有间隔，为0或1中的一个。0表示这个格子可以通过，1表示不可以。假设迷宫的起点固定为（1,1）,迷宫的出口固定为(n,m)。每次移动时只能向上下左右4个方向移动到另外一个可以通过的格子里，每次移动算一步。</p><p>$(1 \leq n,m \leq 500)$</p>","<p>第一行，为需要的最少步数K第二行K个字符，每个字符∈{U,D,L,R},分别表示上下左右。如果有多条长度相同的最短路径，选择在此表示方法下字典序最小的一个。</p>","[{""input"": ""3 3\n0 1 1\n0 0 0\n1 1 0\n"", ""output"": ""4\nDRRD\n""}]","e55eba2d20a8bea5f19a5b4ddf759cfc","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:23:17.389949+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",46,7,1,"H","{""0"": 7, ""1"": 3, ""-1"": 31, ""-2"": 5}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
123,"素数","<p>我们知道，对于一个数$x(x != 1)$，用唯一分解定理可以表示为$p_1^{q1}p_2^{q2}...p_k^{qk} $（$p_i,q_i$分别表示素因子以及指数，k为该数不同素因子个数），定义该数的价值为$(q_1+1)(q_2+1)...(q_k+1)$，也就是该数的价值=该数的因子个数。</p><p>现在给定一个整数n，求1到n的所有整数的价值之和（定义1的价值为1）。由于结果很大，请对结果%(1e9+7)后作为最终答案输出。</p>","<p>一个整数n。($1 \leq n \leq 1e7$)</p>","<p>一个整数表示答案。</p>","[{""input"": ""10"", ""output"": ""27""}]","38b749fc750c82d519fd0bf3b33bd625","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-24 07:24:49.87149+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",11,1,1,"J","{""0"": 1, ""1"": 3, ""4"": 5, ""-1"": 2}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
124,"斐波那契数列","<p>在数学上，斐波那契数列的定义为：$F(1)=1,F(2)=1,F(n)=F(n-1)+F(n-2)(n \geq 3,n∈N^*)$。</p><p>那么给定一个数n，你能判断它是不是斐波那契数列中的某项吗？</p><p>若是，输出“Yes”，否则输出“No”。</p>","<p>一个整数n。$ (1 \leq n \leq 1e9) $</p>","<p>输出一行字符串，&quot;Yes&quot;或者“No”。</p>","[{""input"": ""2"", ""output"": ""Yes""}]","fcd860fea91520e63216af5299c1332c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-25 05:45:03.679421+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",150,21,1,"C","{""0"": 21, ""1"": 18, ""4"": 44, ""-1"": 35, ""-2"": 32}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
125,"找零钱","<p>小华去学校超市买东西，由于没带手机，所以他只能用现金付款。</p><p>已知售货员需要找给他x元钱，可以用的找零有1元、2元、5元。由于钞票稀缺，所以5元只有a张，而1元只有1张，2元则有无限张，那么售货员最少需要拿出几张纸币呢？如果存在最优方案找出零钱，请输出这个数量；否则如果不存在一种方案，输出-1。</p>","<p>一行2个整数x，a分别表示要找的零钱以及有限的5元纸币数量。$ (1 \leq x,a \leq 100) $</p>","<p>一个整数表示答案。</p>","[{""input"": ""7 1"", ""output"": ""2""}]","1de7b43fdecfd7976369d4eff594d05a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-03-25 07:06:22.362426+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",61,26,1,"B","{""0"": 26, ""1"": 3, ""4"": 2, ""-1"": 23, ""-2"": 7}",0,13,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
126,"输出华氏-摄氏温度转换表","<p>输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p>","<p>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开<br /></p>","<p>第一行输出：&quot;fahr celsius&quot;<br /></p><p style=""text-align: left;"">接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。</p><p>若输入的范围不合法，则输出&quot;Invalid.&quot;。</p>","[{""input"": ""32 35\n"", ""output"": ""fahr celsius\n32   0.0\n34   1.1\n""}, {""input"": ""40 30\n"", ""output"": ""Invalid.\n""}]","a48ed2689afd64b4335a00c6874b211b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-03 10:24:38.557357+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",119,19,1,"1","{""0"": 19, ""-1"": 100}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
127,"计算分段函数","<p>计算下列分段函数f(x)的值：<br /></p><p><img alt=""image.png"" src=""/public/upload/5589a76c17.png"" width=""300"" height=""59.85401459854015"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>在一行中按“f(x) = result”的格式输出，其中x与result都保留两位小数。<br /></p>","[{""input"": ""10"", ""output"": ""f(10.00) = 3.16""}, {""input"": ""-0.5"", ""output"": ""f(-0.50) = -2.75""}]","98312d65fd10d3b2cd9b04c8a12196b8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-03 10:28:54.792075+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",85,28,1,"2","{""0"": 28, ""4"": 1, ""-1"": 52, ""-2"": 4}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
128,"天数计算","<p>输入某年某月某日，判断这几一天是这一年的第几天？</p>","<p>分别输入整数形式的某年某月某日</p>","<p>判断这一天是这一年的第几天，输出为整数形式<br /><br /></p>","[{""input"": ""2018 12 6"", ""output"": ""340""}, {""input"": ""2020 3 1"", ""output"": ""61""}]","ae015eb02cfd446004a20651577d046a","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","<p>注意：闰年的2月份是29天。<br /></p>","[""C""]","{}","2019-07-03 10:32:06.202501+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",109,18,1,"3","{""0"": 18, ""-1"": 86, ""-2"": 5}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
129,"素数个数","<p>给定两个数m和n，求m和n之间的素数个数（包括m,n）,试编写相应程序。</p>","<p>依次输入两个整数m,n，m&lt;n。</p>","<p>输出m,n和n之间的个数，输出为整数形式。</p>","[{""input"": ""2 10\n"", ""output"": ""4""}]","d4eaa2f230241d1f6a8baecdfb5f70d7","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-03 10:34:34.427847+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",43,24,1,"4","{""0"": 24, ""-1"": 17, ""-2"": 2}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
130,"方阵循环右移","<p>本题要求编写程序，将给定n×n方阵中的每个元素循环向右移m个位置，即将第0、1、⋯、n−1列变换为第n−m、n−m+1、⋯、n−1、0、1、⋯、n−m−1列。<br /></p>","<p>输入第一行给出两个正整数m和n（1≤n≤6）。接下来一共n行，每行n个整数，表示一个n阶的方阵。<br /></p>","<p>按照输入格式输出移动后的方阵：即输出n行，每行n个整数，每个整数后输出一个空格。<br /></p>","[{""input"": ""2 3\n1 2 3\n4 5 6\n7 8 9\n"", ""output"": ""2 3 1 \n5 6 4 \n8 9 7 \n""}]","f0dce15a91875e718472d17ac6094f77","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-03 10:36:44.804001+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",64,14,1,"5","{""0"": 14, ""1"": 9, ""4"": 14, ""-1"": 27}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
131,"猜数字游戏","<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次或者3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。<br /></p>","<p>输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。<br /></p>","<p>在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。<br /></p>","[{""input"": ""58 4\n70\n50\n56\n58\n60\n-2\n"", ""output"": ""Too big\nToo small\nToo small\nGood Guess!\n""}]","ad2d03f556feac8e155ebab8a027d2d9","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-03 10:38:57.525209+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",90,15,1,"6","{""0"": 15, ""4"": 12, ""-1"": 62, ""-2"": 1}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
132,"矩阵运算","<p>给定一个n×n的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。<br /></p>","<p>输入第一行给出正整数n（1&lt;n≤10）；随后n行，每行给出n个整数，其间以空格分隔。<br /></p>","<p>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。<br /></p>","[{""input"": ""4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\n"", ""output"": ""35""}]","4c41e7b2578cb093c07c606437ee841b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-03 10:40:33.271938+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",41,22,1,"7","{""0"": 22, ""2"": 3, ""4"": 2, ""-1"": 14}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
133,"斐波那契数列","<p>给出一个n，求斐波那契数列第n项和第n-1项两数的最大公约数和最小公倍数（n&gt;=4）</p>","<p>输入一个正整数n</p>","<p>分别输出第n项和n-1的最大公约数和最小公倍数（整数形式）。</p>","[{""input"": ""6"", ""output"": ""1 40""}]","98b4c1451473d04cec42534f780c8a67","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>斐波那契数列 ： F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）<br /></p><p>斐波那契数列是从第零项开始，数列表示为 0 1 1 2 3 5 8 13......当n=6，F(n)=8，F(n-1)=5。</p>","[""C""]","{}","2019-07-03 10:42:24.361884+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",11,0,1,"8","{""1"": 3, ""-1"": 8}",0,14,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
134,"输出华氏-摄氏温度转换表","<p>输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p>","<p>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开<br /></p>","<p>第一行输出：&quot;fahr celsius&quot;<br /></p><p style=""text-align: left;"">接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。</p><p>若输入的范围不合法，则输出&quot;Invalid.&quot;。</p>","[{""input"": ""32 35\n"", ""output"": ""fahr celsius\n32   0.0\n34   1.1\n""}, {""input"": ""40 30\n"", ""output"": ""Invalid.\n""}]","a48ed2689afd64b4335a00c6874b211b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-08 08:13:24.599753+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",98,28,1,"1-57","{""0"": 28, ""4"": 5, ""-1"": 49, ""-2"": 16}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
135,"计算分段函数","<p>计算下列分段函数f(x)的值：<br /></p><p><img alt=""image.png"" src=""/public/upload/5589a76c17.png"" width=""300"" height=""59.85401459854015"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>在一行中按“f(x) = result”的格式输出，其中x与result都保留两位小数。<br /></p>","[{""input"": ""10"", ""output"": ""f(10.00) = 3.16""}, {""input"": ""-0.5"", ""output"": ""f(-0.50) = -2.75""}]","98312d65fd10d3b2cd9b04c8a12196b8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-08 08:13:32.289862+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",84,28,1,"1-58","{""0"": 28, ""4"": 14, ""-1"": 37, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
136,"超速罚款","<p>按照规定，在高速公路上行使的机动车，达到或超出本车道限速的10%则处200元罚款；若达到或超出50%，就要吊销驾驶证。请编写程序根据车速和限速自动判别对该机动车的处理<br /></p>","<p>输入在一行中给出2个正整数，分别对应车速和限速，其间以空格分隔。<br /></p>","<p>在一行中输出处理意见：</p><p>若属于正常行驶，则输出“OK”；</p><p>若应处罚款，则输出“Exceed x%. Ticket 200”；</p><p>若应吊销驾驶证，则输出“Exceed x%. License Revoked”。其中x是超速的百分比，精确到整数。</p>","[{""input"": ""65 60"", ""output"": ""OK""}, {""input"": ""200 120"", ""output"": ""Exceed 67%. License Revoked\n""}]","8a6229bdcfc5539a240c24b22bfae42f","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>提示1：在c语言中，输出百分号用“%%”。<br /></p><p>提示2：四舍五入可采取结果+0.5后取整。</p>","[""C""]","{}","2019-07-08 08:14:09.553161+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",143,45,1,"1-59","{""0"": 45, ""-1"": 73, ""-2"": 25}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
137,"打印菱形图案","<p>本题要求编写程序，打印一个高度为n的、由“*”组成的正菱形图案<br /></p>","<p>输入在一行中给出一个正的奇数n。</p>","<p>输出由n行星号“*”组成的菱形，如样例所示。每个星号后跟一个空格。</p>","[{""input"": ""7\n"", ""output"": ""      * \n    * * * \n  * * * * * \n* * * * * * * \n  * * * * * \n    * * * \n      * \n""}]","9a393fe24d1819ac9bcd3f08104f81b7","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-08 08:14:15.867468+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",109,48,1,"1-60","{""0"": 48, ""4"": 1, ""-1"": 53, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
138,"方阵循环右移","<p>本题要求编写程序，将给定n×n方阵中的每个元素循环向右移m个位置，即将第0、1、⋯、n−1列变换为第n−m、n−m+1、⋯、n−1、0、1、⋯、n−m−1列。<br /></p>","<p>输入第一行给出两个正整数m和n（1≤n≤6）。接下来一共n行，每行n个整数，表示一个n阶的方阵。<br /></p>","<p>按照输入格式输出移动后的方阵：即输出n行，每行n个整数，每个整数后输出一个空格。<br /></p>","[{""input"": ""2 3\n1 2 3\n4 5 6\n7 8 9\n"", ""output"": ""2 3 1 \n5 6 4 \n8 9 7 \n""}]","f0dce15a91875e718472d17ac6094f77","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-08 08:14:24.142796+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",89,33,1,"1-61","{""0"": 33, ""1"": 9, ""4"": 3, ""-1"": 39, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
139,"猜数字游戏","<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次或者3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。<br /></p>","<p>输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。<br /></p>","<p>在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。<br /></p>","[{""input"": ""58 4\n70\n50\n56\n58\n60\n-2\n"", ""output"": ""Too big\nToo small\nToo small\nGood Guess!\n""}]","ad2d03f556feac8e155ebab8a027d2d9","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-08 08:14:29.437993+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",272,39,1,"1-62","{""0"": 39, ""4"": 29, ""-1"": 188, ""-2"": 16}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
140,"矩阵运算","<p>给定一个n×n的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。<br /></p>","<p>输入第一行给出正整数n（1&lt;n≤10）；随后n行，每行给出n个整数，其间以空格分隔。<br /></p>","<p>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。<br /></p>","[{""input"": ""4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\n"", ""output"": ""35""}]","4c41e7b2578cb093c07c606437ee841b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-08 08:14:34.556296+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",52,28,1,"1-63","{""0"": 28, ""4"": 3, ""-1"": 19, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
141,"分隔字符","<p>小明同学刚刚学会了字符串，现在他想考你一道有关字符串的题目。给定一个只包含小写字母&#039;a&#039;-&#039;z&#039;的字符串S，你需要将S中的字符重新排序，使得任意两个相同的字符不连在一起。<br /></p><p style=""text-align: left;"">如果有多个重排后的字符串满足条件，输出字典序最小的一个。</p><p style=""text-align: left;"">字典序小于定义：对于字符串a和b，找到第一个i使得a[i]&lt;b[i]，且同时满足a[j]=b[j](j&lt;i)，则a的字典序更小。</p><p style=""text-align: left;"">如果不存在满足条件的字符串，输出‘INVALID’(不包括引号)。</p>","<p>第一行一个整数n。(1 ≤ n ≤ 100000)</p><p>第二行长度为n的字符串S。</p>","<p>输出字典序最小的答案或者INVALID。</p>","[{""input"": ""5\naaabc\n"", ""output"": ""abaca\n""}]","f1bf005a3ca6ec3bcf1a81480a2f903c","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-08 08:14:39.29139+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",111,9,1,"1-64","{""0"": 9, ""1"": 7, ""4"": 3, ""-1"": 72, ""-2"": 20}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
142,"查看书籍","<p>给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。<br /></p>","<p>输入第一行给出正整数n（&lt;10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。<br /></p>","<p>在一行中按照“价格,书名”的格式先后输出价格最高和最低的书。价格保留2位小数。<br /></p>","[{""input"": ""3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0\n"", ""output"": ""25.00, Programming in Delphi\n18.50, Programming in VB\n""}]","7c9fe0fbbaf96a4c9cf349aed580fb62","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-11 14:24:24.520139+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",72,22,1,"1","{""0"": 22, ""1"": 3, ""4"": 6, ""-1"": 37, ""-2"": 4}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
143,"字符串逆序","<p>输入一个字符串，对该字符串进行逆序，输出逆序后的字符串。<br /></p>","<p>输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。<br /></p>","<p>在一行中输出逆序后的字符串。<br /></p>","[{""input"": ""Hello World!\n"", ""output"": ""!dlroW olleH\n""}]","d63dbc859b938bd9f4d8430f801abb07","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-11 14:27:17.150008+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",73,30,1,"2","{""0"": 30, ""4"": 5, ""-1"": 36, ""-2"": 2}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
144,"输出学生成绩","<p>本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。建议使用动态内存分配来实现。<br /></p>","<p>输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。<br /></p>","<p>按照以下格式输出：<br /></p><p style=""text-align: left;"">average =平均成绩</p><p style=""text-align: left;"">max =最高成绩</p><p style=""text-align: left;"">min =最低成绩</p><p style=""text-align: left;"">结果均保留两位小数。</p>","[{""input"": ""3\n85 90 95\n"", ""output"": ""average = 90.00\nmax = 95.00\nmin = 85.00\n""}]","71efffb8e243457d28dddc1ee9ea9022","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-11 14:28:54.001931+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",71,29,1,"3","{""0"": 29, ""4"": 6, ""-1"": 31, ""-2"": 5}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
145,"统计单词个数","<p>本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。<br /></p>","<p>输入给出一行字符。<br /></p>","<p>在一行中输出单词个数。<br /></p>","[{""input"": ""Let's go to room 209.\n"", ""output"": ""5\n""}]","6d4a91599de2b88d16f84e3300d93599","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-11 14:31:03.666812+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",147,25,1,"4","{""0"": 25, ""1"": 2, ""4"": 88, ""-1"": 27, ""-2"": 5}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
146,"人名统计","<p>给定若干行只由英文字母组成的人名，可能会有重复，试输出出现次数最多人名出现的次数和出现次数最少人名出现的次数。<br /></p>","<p>若干行英文字母组成的字符串，数据保证不超过1000行，每行字符串长度不超过10。<br /></p><p style=""text-align: left;"">最后一行以一个’#’(不包括引号)结束。</p>","<p>一行两个整数分别表示最多次数和最少次数。<br /></p>","[{""input"": ""Bob\nAlice\nPetr\nBob\n#\n"", ""output"": ""2 1\n""}]","e218c70ac31cbe2b00fce4550398e4d5","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-11 14:33:03.719907+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",46,10,1,"5","{""0"": 10, ""1"": 1, ""4"": 11, ""-1"": 17, ""-2"": 7}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
147,"时间换算","<p>本题要求编写程序，以hh:mm:ss的格式输出某给定时间再过n秒后的时间值（超过23:59:59就从0点开始计时）。<br /></p>","<p>输入在第一行中以hh:mm:ss的格式给出起始时间，第二行给出整秒数n（&lt;60）。<br /></p>","<p>输出在一行中给出hh:mm:ss格式的结果时间。<br /></p>","[{""input"": ""11:59:40\n30\n"", ""output"": ""12:00:10\n""}]","7f165f8b363f0c07a5350c9ea6b8b6e2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-11 14:34:40.937436+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",69,26,1,"6","{""0"": 26, ""-1"": 40, ""-2"": 3}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
148,"引爆炸弹","<p>给定一个n*m大小的矩阵，矩阵中每个值分别为0、1、2中的一个数。数的含义如下：0表示是一块空地；1表示炸弹，炸弹引爆时会将炸弹所在行、所在列都波及，炸弹引爆会产生连锁反应；2表示墙，会阻挡炸弹在该点及之后方向上的波及。每次引爆1个炸弹付出的代价为1，试求出使得矩阵中所有炸弹都被引爆所需要的最小代价。</p>","<p>第一行输入两个整数n和m（n*m&lt;=10）。<br /></p><p style=""text-align: left;"">接下来n行每行m个整数，每个整数的取值为0或1或2，整数之间以空格分隔。</p>","<p>一行一个整数表示最小的代价。<br /></p>","[{""input"": ""3 3\n0 1 1\n2 2 2\n1 1 0\n"", ""output"": ""2\n""}]","15af5ceb3c7367aaa3f1f24b512d9f36","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-11 14:36:19.059819+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",4,1,1,"7","{""0"": 1, ""1"": 2, ""4"": 1}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
149,"字符串转换成十进制整数","<p>输入一个以#结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符“-”，则代表该数是负数。<br /></p>","<p>输入在一行中给出一个以#结束的非空字符串。<br /></p>","<p>在一行中输出转换后的十进制数。题目保证输出在长整型范围内。<br /></p>","[{""input"": ""+-P-xf4+-1!#\n"", ""output"": ""-3905\n""}]","1f0f2f9bb3b3f806fdfe6d2197c14773","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-07-11 14:37:59.851343+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",67,16,1,"8","{""0"": 16, ""4"": 3, ""-1"": 45, ""-2"": 3}",0,15,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
150,"查看书籍","<p>给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。<br /></p>","<p>输入第一行给出正整数n（&lt;10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。<br /></p>","<p>在一行中按照“价格,书名”的格式先后输出价格最高和最低的书。价格保留2位小数。<br /></p>","[{""input"": ""3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0\n"", ""output"": ""25.00, Programming in Delphi\n18.50, Programming in VB\n""}]","7c9fe0fbbaf96a4c9cf349aed580fb62","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-13 03:06:12.33673+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",183,56,1,"1-65","{""0"": 56, ""4"": 20, ""-1"": 94, ""-2"": 13}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
151,"字符串逆序","<p>输入一个字符串，对该字符串进行逆序，输出逆序后的字符串。<br /></p>","<p>输入在一行中给出一个不超过80个字符长度的、以回车结束的非空字符串。<br /></p>","<p>在一行中输出逆序后的字符串。<br /></p>","[{""input"": ""Hello World!\n"", ""output"": ""!dlroW olleH\n""}]","d63dbc859b938bd9f4d8430f801abb07","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-13 03:06:18.06035+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",81,50,1,"1-66","{""0"": 50, ""4"": 7, ""-1"": 10, ""-2"": 14}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
152,"输出学生成绩","<p>本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。建议使用动态内存分配来实现。<br /></p>","<p>输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。<br /></p>","<p>按照以下格式输出：<br /></p><p style=""text-align: left;"">average =平均成绩</p><p style=""text-align: left;"">max =最高成绩</p><p style=""text-align: left;"">min =最低成绩</p><p style=""text-align: left;"">结果均保留两位小数。</p>","[{""input"": ""3\n85 90 95\n"", ""output"": ""average = 90.00\nmax = 95.00\nmin = 85.00\n""}]","71efffb8e243457d28dddc1ee9ea9022","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-07-13 03:06:22.801183+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",119,54,1,"1-67","{""0"": 54, ""4"": 12, ""-1"": 38, ""-2"": 15}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
153,"统计单词个数","<p>本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。<br /></p>","<p>输入给出一行字符。<br /></p>","<p>在一行中输出单词个数。<br /></p>","[{""input"": ""Let's go to room 209.\n"", ""output"": ""5\n""}]","6d4a91599de2b88d16f84e3300d93599","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-13 03:06:28.944175+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",251,59,1,"1-68","{""0"": 59, ""1"": 2, ""2"": 1, ""4"": 40, ""-1"": 81, ""-2"": 28}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
154,"人名统计","<p>给定若干行只由英文字母组成的人名，可能会有重复，试输出出现次数最多人名出现的次数和出现次数最少人名出现的次数。<br /></p>","<p>若干行英文字母组成的字符串，数据保证不超过1000行，每行字符串长度不超过10。<br /></p><p style=""text-align: left;"">最后一行以一个’#’(不包括引号)结束。</p>","<p>一行两个整数分别表示最多次数和最少次数。<br /></p>","[{""input"": ""Bob\nAlice\nPetr\nBob\n#\n"", ""output"": ""2 1\n""}]","e218c70ac31cbe2b00fce4550398e4d5","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-13 03:06:33.920867+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",120,26,1,"1-69","{""0"": 26, ""1"": 1, ""4"": 19, ""-1"": 51, ""-2"": 14}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
155,"时间换算","<p>本题要求编写程序，以hh:mm:ss的格式输出某给定时间再过n秒后的时间值（超过23:59:59就从0点开始计时）。<br /></p>","<p>输入在第一行中以hh:mm:ss的格式给出起始时间，第二行给出整秒数n（&lt;60）。<br /></p>","<p>输出在一行中给出hh:mm:ss格式的结果时间。<br /></p>","[{""input"": ""11:59:40\n30\n"", ""output"": ""12:00:10\n""}]","7f165f8b363f0c07a5350c9ea6b8b6e2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-13 03:06:38.950838+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",85,48,1,"1-70","{""0"": 48, ""-1"": 35, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
156,"引爆炸弹","<p>给定一个n*m大小的矩阵，矩阵中每个值分别为0、1、2中的一个数。数的含义如下：0表示是一块空地；1表示炸弹，炸弹引爆时会将炸弹所在行、所在列都波及，炸弹引爆会产生连锁反应；2表示墙，会阻挡炸弹在该点及之后方向上的波及。每次引爆1个炸弹付出的代价为1，试求出使得矩阵中所有炸弹都被引爆所需要的最小代价。</p>","<p>第一行输入两个整数n和m（n*m&lt;=10）。<br /></p><p style=""text-align: left;"">接下来n行每行m个整数，每个整数的取值为0或1或2，整数之间以空格分隔。</p>","<p>一行一个整数表示最小的代价。<br /></p>","[{""input"": ""3 3\n0 1 1\n2 2 2\n1 1 0\n"", ""output"": ""2\n""}]","15af5ceb3c7367aaa3f1f24b512d9f36","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-13 03:06:44.236059+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",22,9,1,"1-71","{""0"": 9, ""1"": 2, ""-1"": 7, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
157,"字符串转换成十进制整数","<p>输入一个以#结束的字符串，本题要求滤去所有的非十六进制字符（不分大小写），组成一个新的表示十六进制数字的字符串，然后将其转换为十进制数后输出。如果在第一个十六进制字符之前存在字符“-”，则代表该数是负数。<br /></p>","<p>输入在一行中给出一个以#结束的非空字符串。<br /></p>","<p>在一行中输出转换后的十进制数。题目保证输出在长整型范围内。<br /></p>","[{""input"": ""+-P-xf4+-1!#\n"", ""output"": ""-3905\n""}]","1f0f2f9bb3b3f806fdfe6d2197c14773","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-07-13 03:06:49.739944+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",144,35,1,"1-72","{""0"": 35, ""1"": 6, ""-1"": 80, ""-2"": 23}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
158,"虫子交配","<p>生物学院的同学在研究一种罕见的昆虫性行为。这些昆虫具有两种不同的性别，并且它们只与异性的虫子互动，不和同性的虫子互动。在实验中，个别虫子的错误行为能够很容易地被识别，因为它们的身体上都印有数字标号。</p><p>现在，给你一组虫子的互动列表，需要请你帮助生物学院的同学判断这个实验中的虫子是否有错误行为。</p><p>例如，有编号1，2，3三只虫。互动列表为：</p><p>1 2<br />2 3<br />1 3<br /></p><p>很显然，该实验中的虫子有错误的互动行为。</p>","<p>输入的第一行为一个整数n，表示需要判断的实验数（每个实验是独立的，互不影响）。</p><p>每个实验先给出m和t。m表示虫子数目（至少一个，最多2000个），t表示交互数（最多1000000个）。在下面的几行中，每个交互都以两个不同的虫子编号的形式给出，由一个空格分隔。虫子是默认从1开始的连续编号。</p>","<p>每个实验结果都输出两行。</p><p>第一行输出“Test #i:”，i表示第i个实验。</p><p>第二行输出判断结果，如果有错误行为，输出“Suspicious bugs found!”；否则，输出“No suspicious bugs found!”。</p><p>注意，每个实验末尾都有一个空行。</p>","[{""input"": ""2\n3 3\n1 2\n2 3\n1 3\n4 2\n1 2\n3 4"", ""output"": ""Test #1: \nSuspicious bugs found!\n\nTest #2: \nNo suspicious bugs found!\n""}]","52e81403c7b36cd6fe2845e645cd9061","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 03:32:24.049463+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",134,15,1,"A","{""0"": 15, ""1"": 1, ""3"": 1, ""4"": 10, ""-1"": 103, ""-2"": 4}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
159,"排座位","<p>新学期开学，老师需要按照身高给学生们排座位。现在需要你写一个程序，帮助老师按照身高大小，给学生们排序。<br /></p>","<p>第一行为一个整数n（1&lt;=n&lt;=1000）</p><p>第二行包含n个正整数，按照学生编号1~n顺序输入n个学生的身高，以空格隔开。</p>","<p>输出一行，按从大到小的顺序输出排序后的同学编号。身高相同的，按照编号从大到小排序。</p><p>每个数之间有一个空格，行末无空格。</p>","[{""input"": ""3\n150 140 165\n"", ""output"": ""3 1 2\n""}]","6405f9962ff3da3f631e6d933347ac49","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 03:33:58.721679+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",113,40,1,"B","{""0"": 40, ""4"": 3, ""-1"": 64, ""-2"": 6}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
160,"能否组成正方形","<p>给定一组不同长度的木棍，是否可以将它们端到端连接成一个正方形？<br /></p>","<p>输入的第一行包含n，即测试用例的数量。</p><p>每个测试用例以一个整数m开始（4&lt;=m&lt;=20），即木棍的条数。</p><p>接下来是m个整数，每一个整数代表一个木棍的长度（整数范围1~10000）。</p>","<p>对于每种情况，如果可以形成一个正方形，则输出一行包含“yes”；否则输出“no”。<br /></p>","[{""input"": ""3\n4 1 1 1 1\n5 10 20 30 40 50\n8 1 7 2 6 4 4 3 5\n"", ""output"": ""yes\nno\nyes\n""}]","c02ea6a77ad9c3752cf8c803fdb94e3a","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 03:35:57.106345+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",73,3,1,"C","{""0"": 3, ""1"": 23, ""4"": 4, ""-1"": 41, ""-2"": 2}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
161,"加密的信息","<p>小华和小明需要互发信息，为了防止其他人获取这些信息，他们打算确定一个加密方式。</p><p>小华提出，将26个字母按照1~26编号，例如“and”加密后就是“1144”。不过，小明认为这是个极其傻的加密方式，因为他通过“1144”能够解出多个组合，比如“and”，“kdd”，“aadd”，而且随着字符串的增加，这些可能组合将会越来越多，非常不方便解码。</p><p>但是，小华不相信，你能帮助小明设计一个程序来说服小华吗？该程序需要判断输入的数字串有几种可能的解码结果，然后输出结果总数。</p>","<p>输入有很多行，每行一个数字串。数字串默认都是有效的（例如，没有以0开头的数字串），每个数字串长度小于60。</p><p>结尾单独一行，输入0，表示结束。</p>","<p>对于每一个数字串，输出它可能的解码结果总数。<br /></p>","[{""input"": ""25114\n1111111111\n3333333333\n0\n"", ""output"": ""6\n89\n1\n""}]","886073e7d350174e49073b5cdd9fed5d","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 05:33:24.524812+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",80,18,1,"D","{""0"": 18, ""1"": 3, ""4"": 1, ""-1"": 56, ""-2"": 2}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
162,"最大和","<p>给定一个长度为n的数组a[1...n]，试找出两个位置不相邻的数，它们的和最大。<br /></p>","<p>第一行一个整数n。(3 &lt;= n &lt;= 1000)</p><p>接下来一行输入一个长度为n的数组a[1...n]。(1&lt;= a[i] &lt;= 1000)</p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""3\n1 2 3"", ""output"": ""4\n""}]","521cde663099f74f2d047976a29b4db5","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 05:36:42.834935+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",81,41,1,"E","{""0"": 41, ""1"": 2, ""4"": 14, ""-1"": 21, ""-2"": 3}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
163,"舞会","<p>有n个人想参加舞会，他们的身高为p[1...n]，现在舞会提出了一个奇怪的要求：必须成双参加，且参与者的身高差要至少为d。请问这场舞会最多有几对人可以参加？</p>","<p>第一行输入两个整数n和d。(1&lt;= n &lt;= 10^5，1 &lt;= d &lt;= 10^9)​</p><p>第二行输入n个整数p[1...n]表示n个人的身高。(1 &lt;= p[i] &lt;= 10^9)</p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""4 2\n1 2 3 4\n"", ""output"": ""2\n""}, {""input"": ""6 5\n6 5 4 3 2 1\n"", ""output"": ""1\n""}]","c5012df2ce25b0b6634a5e76cf4c8f75","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 05:39:11.306955+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",130,12,1,"F","{""0"": 12, ""1"": 14, ""4"": 10, ""-1"": 87, ""-2"": 7}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
164,"王国","<p>王国内种植着一棵树，树上有n个节点，每个节点都由一位剑士把守，其中1号节点为树根。每位剑士都有一个战斗力数值。现在王国要举办n次竞技，第i次竞技在i号节点进行，属于i号子树内的所有剑士相约来到i号节点，两两进行竞技，战斗力数值更高的一方获得胜利，获胜一方将对i节点的生命值增加其战斗力数值。若两名剑士战斗力数值相同，任意一方均有50%的概率获胜。初始时n个节点的生命值都为0，现在请你输出n次竞技后所有节点的生命值。<br /></p>","<p>一个整数n(n &lt;= 1e5)</p><p>一行n个整数表示n个剑士的战斗力值atk (1&lt;= atk_i &lt;= 1e9)</p><p>n-1行，每行两个数，表示连接的一条边</p>","<p>一行n个数，表示最终n个节点的生命值。（保证答案不会超过长整型范围）<br /></p>","[{""input"": ""7\n1 2 3 4 5 6 7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"", ""output"": ""112 14 20 0 0 0 0\n""}, {""input"": ""7\n1 2 3 4 5 6 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n"", ""output"": ""112 85 60 38 20 7 0\n""}]","d6337637197193d64c74c22badbe7143","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 05:42:31.5599+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",10,0,1,"G","{""1"": 4, ""4"": 1, ""-1"": 3, ""-2"": 2}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
165,"三体","<p>浩瀚的宇宙是一个黑暗森林，而带有生命的星球就是森林中的猎手。作为面壁者，罗辑知道只需30个恒星的星图，便可以唯一确定这些星球的位置。如果这些恒星能够发射宇宙级功率，便会暴露这些恒星的位置，这是三体人所害怕的事情。</p><p>现在让我们简化这个事实：假设宇宙由n个一维点组成，坐标为1~n，每个点都有点值 ​v_{i} ：如果​ v_{i} &gt; 0，代表该点是恒星，且能量为​ v_{i} ；若 v_{i}​ = 0，代表该点是尘埃，会在宇宙中隔开恒星。坐标相邻的恒星组成了恒星群，若该恒星群中恒星的数量至少有30个，且其中最大能量恒星的能量至少是最小能量恒星的能量的100倍，则如上所述，该恒星群暴露于危险之中。给定n个点，表示宇宙，试求出暴露于危险中的恒星群的数量。</p>","<p>第一行输入一个n，代表宇宙中点的数量。(30 &lt;= n &lt;= 10^5)</p><p>第二行输入n个整数v[1...n]，表示恒星或尘埃。(0 &lt;= v[i] &lt;= 10^9)</p>","<p>一行一个整数，表示答案。<br /></p>","[{""input"": ""30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 100\n"", ""output"": ""1\n""}, {""input"": ""30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 100\n"", ""output"": ""0\n""}]","7d73c79c750b770237b3df18986e5ef3","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-07-15 05:45:32.033233+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",132,27,1,"H","{""0"": 27, ""4"": 11, ""-1"": 88, ""-2"": 6}",0,16,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
166,"划拳","<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就输了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p><p>下面给出甲、乙两人的酒量（最多能喝多少杯不倒）和划拳记录，请你判断两个人谁先倒。</p>","<p>输入第一行先后给出甲、乙两人的酒量（不超过100的非负整数），以空格分隔。下一行给出一个正整数<code>N</code>（≤100），随后<code>N</code>行，每行给出一轮划拳的记录，格式为：<br /></p><pre><code>甲喊 甲划 乙喊 乙划<span></span></code></pre><p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过100的正整数（两只手一起划）。</p>","<p>在第一行中输出先倒下的那个人：</p><p><code>A</code>代表甲，<code>B</code>代表乙。</p><p>第二行中输出没倒的那个人喝了多少杯。题目保证有一个人倒下。注意程序处理到有人倒下就终止，后面的数据不必处理。</p>","[{""input"": ""1 1\n6\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n15 1 1 16\n"", ""output"": ""A\n1\n""}]","c6bd28f54ac6680187cc8f0e0540ef73","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-19 05:59:59.843364+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",87,12,1,"1","{""0"": 12, ""1"": 5, ""-1"": 64, ""-2"": 6}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
167,"计算工资","<p>某公司员工的工资计算方法如下：一周内工作时间不超过40小时，按正常工作时间计酬；超出40小时的工作时间部分，按正常工作时间报酬的1.5倍计酬。员工按进公司时间分为新职工和老职工，进公司不少于5年的员工为老职工，5年以下的为新职工。新职工的正常工资为30元/小时，老职工的正常工资为50元/小时。请按该计酬方式计算员工的工资。<br /></p>","<p>输入在一行中给出2个正整数，分别为某员工入职年数和周工作时间，其间以空格分隔。</p>","<p>在一行输出该员工的周薪，精确到小数点后2位。</p>","[{""input"": ""5 40\n"", ""output"": ""2000.00\n""}, {""input"": ""3 50\n"", ""output"": ""1650.00\n""}]","5d56c74035be7ad35e4d575c5b577856","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-19 06:01:49.499394+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",23,16,1,"2","{""0"": 16, ""-1"": 7}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
168,"新的A+B","<p>题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。<br /></p>","<p>输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</p><p>注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。</p>","<p>如果输入的确是两个正整数，则按格式A + B = 和输出。如果某个输入不合要求，则在相应位置输出?，显然此时和也是?。</p>","[{""input"": ""123 456"", ""output"": ""123 + 456 = 579\n""}, {""input"": ""22. 18\n"", ""output"": ""? + 18 = ?\n""}, {""input"": ""-100 blabla bla...33\n"", ""output"": ""? + ? = ?\n""}]","afaa8e8cfdeaad5d0f8f7e8038df0569","[{""score"": 11, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 11, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 11, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 11, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 11, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 11, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 11, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 11, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 11, ""input_name"": ""9.in"", ""output_name"": ""9.out""}]","","[""C""]","{}","2019-07-19 06:04:00.570636+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",62,9,1,"3","{""0"": 9, ""4"": 4, ""-1"": 46, ""-2"": 3}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
169,"看电视","<p>暑假开始了，有很多电视剧和综艺节目开播了。你有很多电视剧和节目都特别想看，但是它们的时间可能会有冲突，所以你想尽可能多看一些电视剧和节目。假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p>","<p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p>","<p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p>","[{""input"": ""12\n1 3\n3 4\n0 7\n3 8\n15 19\n15 20\n10 15\n8 18\n6 12\n5 10\n4 14\n2 9\n0\n"", ""output"": ""5""}]","38526fa910986214f46991c8010e46a7","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-07-19 06:05:43.182974+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",5,0,1,"4","{""-1"": 4, ""-2"": 1}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
170,"吃西瓜","<p>小华买了n个西瓜，第i个西瓜的重量为wi，并且没有两个西瓜的重量相同。小华在吃西瓜之前想把西瓜的重量从小到大排序，并且他会问你m个问题，第i个问题告诉你一个数qi，你需要回答出重量为qi的西瓜在排完序后在第几个位置，保证重量为qi的西瓜一定能找到。</p>","<p>第1行一个整数n。（1&lt;=n&lt;=1000）</p><p>接下来一行n个整数wi。(1&lt;=wi&lt;=100000)</p><p>第3行一个整数m。(1&lt;=m&lt;=1000)</p><p>接下来m行每行一个询问qi。(1&lt;=qi&lt;=100000)</p>","<p>对于每行输入，输出一行。</p>","[{""input"": ""5\n10 4 7 6 1\n5\n1\n4\n7\n6\n10\n"", ""output"": ""1\n2\n4\n3\n5\n""}]","b96afda4ea943aa1a8d95a0125ac42a6","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-19 06:07:11.431532+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",39,16,1,"5","{""0"": 16, ""4"": 7, ""-1"": 16}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
171,"链表操作","<p>给定一个起始长度为n的单链表head-&gt;a[1]-&gt;a[2]-&gt;…-&gt;a[n]（head为空头节点），有一个p指针初始指向head。现在有Q次操作，每次操作为以下两种中的一种：1.如果p指针有下一个节点，则跳转到下一个节点；2.在p指针节点后插入一个值为val的节点。<br /></p><p style=""text-align: left;"">Q次操作后请输出当前的单链表。</p>","<p>第一行一个整数n。（1&lt;=n&lt;=100000）</p><p>第二行有n个正整数表示单链表。</p><p>第三行一个整数Q。（1&lt;=q&lt;=100000）</p><p>接下来Q行，每行先输入一个值x表示操作编号：x=1，表示操作1；x=2，接下来输入一个值val。</p>","<p>输出一行，每个整数后空一格。</p>","[{""input"": ""5\n1 2 3 4 5\n6\n2 10\n1\n1\n1\n1\n2 11\n"", ""output"": ""10 1 2 3 11 4 5 \n""}]","4906ff64b5d2bf89aceab7568185b65f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>第一次操作，p指针指向head，插入10，单链表变成10 1 2 3 4 5。</p><p>第二次操作，p指针指向head，p指针有下一节点，执行跳转。</p><p>第三次操作，p指针指向10，p指针有下一节点，执行跳转。</p><p>第四次操作，p指针指向1，p指针有下一节点，执行跳转。</p><p>第五次操作，p指针指向2，p指针有下一节点，执行跳转。</p><p>第六次操作，p指针指向3，插入11，单链表变成10 1 2 3 11 4 5。</p>","[""C""]","{}","2019-07-19 06:08:23.114941+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",6,1,1,"6","{""0"": 1, ""4"": 5}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
172,"合并数组","<p>给定两个有序数组，第一个增序，第二个降序，输出两个数组合并后的增序数组。</p>","<p>第一行两个整数n和m。（1&lt;=n&lt;=100000,1&lt;=m&lt;=100000）</p><p>第二行n个整数ai。（1&lt;=a[i]&lt;=1e9,a[i]&lt;=a[i+1]）</p><p>第三行m个整数bi。（1&lt;=b[i]&lt;=1e9,b[i]&gt;=b[i+1]）</p>","<p>输出一行，表示合并后的增序数组。</p>","[{""input"": ""5 5\n1 2 2 3 3\n5 4 3 2 1\n"", ""output"": ""1 1 2 2 2 3 3 3 4 5\n""}]","aec899b2ec1f1c40fb3fa22548e84640","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-19 06:09:39.487846+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",100,6,1,"7","{""0"": 6, ""1"": 47, ""4"": 12, ""-1"": 34, ""-2"": 1}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
173,"十一进制","<p>传说火星人说火星语，这个自然我们听不懂。不过听说火星人计数采用十一进制(0,1,2,3,4,5,6,7,8,9,A)，请你输出十进制数转化为十一进制后的数。</p>","<p>若干十进制数n，一行一个，读到文件尾。(0&lt;=n&lt;=100000)</p>","<p>对于每行输入，输出一行。</p>","[{""input"": ""32\n55\n1\n"", ""output"": ""2A\n50\n1\n""}]","e1f65374762e3ece7e5127947a02cef1","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-19 06:10:49.709485+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",41,0,1,"8","{""1"": 3, ""2"": 1, ""4"": 11, ""-1"": 17, ""-2"": 9}",0,17,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
174,"划拳","<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就输了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p><p>下面给出甲、乙两人的酒量（最多能喝多少杯不倒）和划拳记录，请你判断两个人谁先倒。</p>","<p>输入第一行先后给出甲、乙两人的酒量（不超过100的非负整数），以空格分隔。下一行给出一个正整数<code>N</code>（≤100），随后<code>N</code>行，每行给出一轮划拳的记录，格式为：<br /></p><pre><code>甲喊 甲划 乙喊 乙划<span></span></code></pre><p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过100的正整数（两只手一起划）。</p>","<p>在第一行中输出先倒下的那个人：</p><p><code>A</code>代表甲，<code>B</code>代表乙。</p><p>第二行中输出没倒的那个人喝了多少杯。题目保证有一个人倒下。注意程序处理到有人倒下就终止，后面的数据不必处理。</p>","[{""input"": ""1 1\n6\n8 10 9 12\n5 10 5 10\n3 8 5 12\n12 18 1 13\n4 16 12 15\n15 1 1 16\n"", ""output"": ""A\n1\n""}]","c6bd28f54ac6680187cc8f0e0540ef73","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-20 07:31:54.367027+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",67,19,1,"1-73","{""0"": 19, ""4"": 2, ""-1"": 38, ""-2"": 8}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
175,"计算工资","<p>某公司员工的工资计算方法如下：一周内工作时间不超过40小时，按正常工作时间计酬；超出40小时的工作时间部分，按正常工作时间报酬的1.5倍计酬。员工按进公司时间分为新职工和老职工，进公司不少于5年的员工为老职工，5年以下的为新职工。新职工的正常工资为30元/小时，老职工的正常工资为50元/小时。请按该计酬方式计算员工的工资。<br /></p>","<p>输入在一行中给出2个正整数，分别为某员工入职年数和周工作时间，其间以空格分隔。</p>","<p>在一行输出该员工的周薪，精确到小数点后2位。</p>","[{""input"": ""5 40\n"", ""output"": ""2000.00\n""}, {""input"": ""3 50\n"", ""output"": ""1650.00\n""}]","5d56c74035be7ad35e4d575c5b577856","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-07-20 07:32:00.141296+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",46,34,1,"1-74","{""0"": 34, ""-1"": 7, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
176,"新的A+B","<p>题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。<br /></p>","<p>输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</p><p>注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。</p>","<p>如果输入的确是两个正整数，则按格式A + B = 和输出。如果某个输入不合要求，则在相应位置输出?，显然此时和也是?。</p>","[{""input"": ""123 456"", ""output"": ""123 + 456 = 579\n""}, {""input"": ""22. 18\n"", ""output"": ""? + 18 = ?\n""}, {""input"": ""-100 blabla bla...33\n"", ""output"": ""? + ? = ?\n""}]","afaa8e8cfdeaad5d0f8f7e8038df0569","[{""score"": 11, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 11, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 11, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 11, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 11, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 11, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 11, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 11, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 11, ""input_name"": ""9.in"", ""output_name"": ""9.out""}]","","[""C""]","{}","2019-07-20 07:32:05.285022+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",81,11,1,"1-75","{""0"": 11, ""4"": 2, ""5"": 0, ""-1"": 42, ""-2"": 26}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
177,"看电视","<p>暑假开始了，有很多电视剧和综艺节目开播了。你有很多电视剧和节目都特别想看，但是它们的时间可能会有冲突，所以你想尽可能多看一些电视剧和节目。假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p>","<p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p>","<p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p>","[{""input"": ""12\n1 3\n3 4\n0 7\n3 8\n15 19\n15 20\n10 15\n8 18\n6 12\n5 10\n4 14\n2 9\n0\n"", ""output"": ""5""}]","38526fa910986214f46991c8010e46a7","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-07-20 07:32:11.675588+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",70,19,1,"1-76","{""0"": 19, ""1"": 6, ""4"": 2, ""-1"": 32, ""-2"": 11}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
178,"吃西瓜","<p>小华买了n个西瓜，第i个西瓜的重量为wi，并且没有两个西瓜的重量相同。小华在吃西瓜之前想把西瓜的重量从小到大排序，并且他会问你m个问题，第i个问题告诉你一个数qi，你需要回答出重量为qi的西瓜在排完序后在第几个位置，保证重量为qi的西瓜一定能找到。</p>","<p>第1行一个整数n。（1&lt;=n&lt;=1000）</p><p>接下来一行n个整数wi。(1&lt;=wi&lt;=100000)</p><p>第3行一个整数m。(1&lt;=m&lt;=1000)</p><p>接下来m行每行一个询问qi。(1&lt;=qi&lt;=100000)</p>","<p>对于每行输入，输出一行。</p>","[{""input"": ""5\n10 4 7 6 1\n5\n1\n4\n7\n6\n10\n"", ""output"": ""1\n2\n4\n3\n5\n""}]","b96afda4ea943aa1a8d95a0125ac42a6","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-20 07:32:16.616603+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",77,27,1,"1-77","{""0"": 27, ""1"": 2, ""4"": 8, ""-1"": 28, ""-2"": 12}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
179,"链表操作","<p>给定一个起始长度为n的单链表head-&gt;a[1]-&gt;a[2]-&gt;…-&gt;a[n]（head为空头节点），有一个p指针初始指向head。现在有Q次操作，每次操作为以下两种中的一种：1.如果p指针有下一个节点，则跳转到下一个节点；2.在p指针节点后插入一个值为val的节点。<br /></p><p style=""text-align: left;"">Q次操作后请输出当前的单链表。</p>","<p>第一行一个整数n。（1&lt;=n&lt;=100000）</p><p>第二行有n个正整数表示单链表。</p><p>第三行一个整数Q。（1&lt;=q&lt;=100000）</p><p>接下来Q行，每行先输入一个值x表示操作编号：x=1，表示操作1；x=2，接下来输入一个值val。</p>","<p>输出一行，每个整数后空一格。</p>","[{""input"": ""5\n1 2 3 4 5\n6\n2 10\n1\n1\n1\n1\n2 11\n"", ""output"": ""10 1 2 3 11 4 5 \n""}]","4906ff64b5d2bf89aceab7568185b65f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>第一次操作，p指针指向head，插入10，单链表变成10 1 2 3 4 5。</p><p>第二次操作，p指针指向head，p指针有下一节点，执行跳转。</p><p>第三次操作，p指针指向10，p指针有下一节点，执行跳转。</p><p>第四次操作，p指针指向1，p指针有下一节点，执行跳转。</p><p>第五次操作，p指针指向2，p指针有下一节点，执行跳转。</p><p>第六次操作，p指针指向3，插入11，单链表变成10 1 2 3 11 4 5。</p>","[""C""]","{}","2019-07-20 07:32:21.80214+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",114,27,1,"1-78","{""0"": 27, ""1"": 8, ""4"": 22, ""-1"": 20, ""-2"": 37}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
180,"合并数组","<p>给定两个有序数组，第一个增序，第二个降序，输出两个数组合并后的增序数组。</p>","<p>第一行两个整数n和m。（1&lt;=n&lt;=100000,1&lt;=m&lt;=100000）</p><p>第二行n个整数ai。（1&lt;=a[i]&lt;=1e9,a[i]&lt;=a[i+1]）</p><p>第三行m个整数bi。（1&lt;=b[i]&lt;=1e9,b[i]&gt;=b[i+1]）</p>","<p>输出一行，表示合并后的增序数组。</p>","[{""input"": ""5 5\n1 2 2 3 3\n5 4 3 2 1\n"", ""output"": ""1 1 2 2 2 3 3 3 4 5\n""}]","aec899b2ec1f1c40fb3fa22548e84640","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-20 07:32:26.927282+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",188,28,1,"1-79","{""0"": 28, ""1"": 39, ""4"": 25, ""-1"": 75, ""-2"": 21}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
181,"十一进制","<p>传说火星人说火星语，这个自然我们听不懂。不过听说火星人计数采用十一进制(0,1,2,3,4,5,6,7,8,9,A)，请你输出十进制数转化为十一进制后的数。</p>","<p>若干十进制数n，一行一个，读到文件尾。(0&lt;=n&lt;=100000)</p>","<p>对于每行输入，输出一行。</p>","[{""input"": ""32\n55\n1\n"", ""output"": ""2A\n50\n1\n""}]","e1f65374762e3ece7e5127947a02cef1","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-07-20 07:32:32.328761+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",103,19,1,"1-80","{""0"": 19, ""1"": 1, ""4"": 17, ""-1"": 51, ""-2"": 15}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
182,"宴会排座位","<p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>","<p>输入第一行给出3个正整数：N（≤100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：宾客1 宾客2 关系，其中关系为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。</p><p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>","<p>对每个查询输出一行结果：</p><p>如果两位宾客之间是朋友，且没有敌对关系，则输出No problem；如果他们之间并不是朋友，但也不敌对，则输出OK；如果他们之间有敌对，然而也有共同的朋友，则输出OK but...；如果他们之间只有敌对关系，则输出No way。</p>","[{""input"": ""7 8 4\n5 6 1\n2 7 -1\n1 3 1\n3 4 1\n6 7 -1\n1 2 1\n1 4 1\n2 3 -1\n3 4\n5 7\n2 3\n7 2\n"", ""output"": ""No problem\nOK\nOK but...\nNo way\n""}]","22cd6a31e427eb385e8aec57f977dbf1","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-26 10:35:30.677892+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",19,2,1,"1","{""0"": 2, ""-1"": 13, ""-2"": 4}",0,18,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
183,"链表操作2","<p>给定n次操作，请你使用单链表来实现。初始有一个空链表，每次操作给定一个整数a[i]，如果链表中已有该数，请将该数的指针节点插到单链表的末尾，如果没有则在单链表的末尾新插入一个值为a[i]的指针节点，n次操作后请输出该单链表。</p>","<p>第一行一个整数n。(1&lt;=n&lt;=1000)</p><p>接下来n个整数，表示该数组a[1..n]。（1&lt;=a[i]&lt;=1000）</p>","<p>输出若干整数，表示最终的单链表。</p>","[{""input"": ""5\n1 2 1 2 1\n"", ""output"": ""2 1\n""}, {""input"": ""5\n1 1 1 1 1\n"", ""output"": ""1\n""}]","8e41ea34ee8c1aa3b53de3e94ae069d4","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-26 10:37:06.473861+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,0,1,"2","{""4"": 2}",0,18,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
184,"最大子串和","<p>给出一个长度为n的数组，你需要找出一个子串（注意子串在数组中是连续的一段），并且该子串的和是最大的，最后你只需要输出这个最大的子串和即可。</p>","<p>第一行一个整数n。(1&lt;=n&lt;=100000)</p><p>接下来一个n个整数，表示该数组a[1..n]。（-10000&lt;=a[i]&lt;=10000）</p>","<p>输出一个整数，表示最大的子串和。</p>","[{""input"": ""5\n1 2 3 4 5\n"", ""output"": ""15\n""}, {""input"": ""5\n-1 -2 -3 -4 -5\n"", ""output"": ""-1\n""}]","709f77d2230599560dba600e76132d16","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-26 10:38:27.61948+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",34,1,1,"3","{""0"": 1, ""1"": 11, ""4"": 4, ""-1"": 17, ""-2"": 1}",0,18,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
185,"宴会排座位","<p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>","<p>输入第一行给出3个正整数：N（≤100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：宾客1 宾客2 关系，其中关系为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。</p><p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>","<p>对每个查询输出一行结果：</p><p>如果两位宾客之间是朋友，且没有敌对关系，则输出No problem；如果他们之间并不是朋友，但也不敌对，则输出OK；如果他们之间有敌对，然而也有共同的朋友，则输出OK but...；如果他们之间只有敌对关系，则输出No way。</p>","[{""input"": ""7 8 4\n5 6 1\n2 7 -1\n1 3 1\n3 4 1\n6 7 -1\n1 2 1\n1 4 1\n2 3 -1\n3 4\n5 7\n2 3\n7 2\n"", ""output"": ""No problem\nOK\nOK but...\nNo way\n""}]","22cd6a31e427eb385e8aec57f977dbf1","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-07-28 15:08:48.966804+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",61,7,1,"1-81","{""0"": 7, ""1"": 9, ""4"": 12, ""-1"": 4, ""-2"": 9}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
186,"链表操作2","<p>给定n次操作，请你使用单链表来实现。初始有一个空链表，每次操作给定一个整数a[i]，如果链表中已有该数，请将该数的指针节点插到单链表的末尾，如果没有则在单链表的末尾新插入一个值为a[i]的指针节点，n次操作后请输出该单链表。</p>","<p>第一行一个整数n。(1&lt;=n&lt;=1000)</p><p>接下来n个整数，表示该数组a[1..n]。（1&lt;=a[i]&lt;=1000）</p>","<p>输出若干整数，表示最终的单链表。</p>","[{""input"": ""5\n1 2 1 2 1\n"", ""output"": ""2 1\n""}, {""input"": ""5\n1 1 1 1 1\n"", ""output"": ""1\n""}]","8e41ea34ee8c1aa3b53de3e94ae069d4","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-28 15:08:57.316006+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",123,27,1,"1-82","{""0"": 27, ""1"": 17, ""4"": 17, ""-1"": 48, ""-2"": 14}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
187,"最大子串和","<p>给出一个长度为n的数组，你需要找出一个子串（注意子串在数组中是连续的一段），并且该子串的和是最大的，最后你只需要输出这个最大的子串和即可。</p>","<p>第一行一个整数n。(1&lt;=n&lt;=100000)</p><p>接下来一个n个整数，表示该数组a[1..n]。（-10000&lt;=a[i]&lt;=10000）</p>","<p>输出一个整数，表示最大的子串和。</p>","[{""input"": ""5\n1 2 3 4 5\n"", ""output"": ""15\n""}, {""input"": ""5\n-1 -2 -3 -4 -5\n"", ""output"": ""-1\n""}]","709f77d2230599560dba600e76132d16","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C""]","{}","2019-07-28 15:09:04.415806+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",72,19,1,"1-83","{""0"": 19, ""1"": 13, ""4"": 5, ""-1"": 29, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
188,"求整数均值","<p>输入4个整数，计算并输出这些整数的和与平均值，其中平均值精确到小数点后1位，试编写相应程序<br /></p>","<p>输入4个整数。<br /></p>","<p>计算并输出这些整数的和与平均值（float形式），其中平均值精确到小数点后1位。<br /></p>","[{""input"": ""1 2 3 4"", ""output"": ""10 2.5""}]","f6be62e75a4bb929ac1026f6bece341a","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-29 02:29:11.253037+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",545,112,358,"2-1","{""0"": 112, ""4"": 13, ""-1"": 307, ""-2"": 113}",0,20,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
189,"阶梯电价","<p>为提倡居民节约用电，某省电力公司执行“阶梯电价”，安装一户一表的居民用户电价分为两个“阶梯”：月用电量50千瓦时（含50千瓦时）以内的，电价为0.53元/千瓦时；超过50千瓦时的，超出部分的用电量电价上调0.05元/千瓦时。输入用户的月用电量（千瓦时），计算并输出改用户应支付的电费（元）。试着编写相应程序。</p>","<p>输入用电量的整数形式。</p>","<p>输出电费，用float形式。</p>","[{""input"": ""50"", ""output"": ""26.500000""}]","35f34846edf4672f60a51b6b8b277a50","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-29 07:39:37.325098+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",333,106,358,"2-2","{""0"": 106, ""4"": 11, ""-1"": 176, ""-2"": 40}",0,20,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
190,"序列求和","<p>输入两个正整数m和n(0&lt;m&lt;=n),求和：   i^2+1/i   (i 从 m 到 n)，保留最后6位小数，是编写相应的程序。</p>","<p>输入两个整数分别对应m和n。</p>","<p>输出用double形式。计算公式：i^2+1/i，i 从 m到n的和。</p>","[{""input"": ""1 2"", ""output"": ""6.500000""}]","cc10259f61a007172eae57c2579ea900","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-29 14:15:22.090781+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",502,105,358,"2-3","{""0"": 105, ""1"": 16, ""4"": 18, ""-1"": 246, ""-2"": 117}",0,20,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
191,"求交错序列前n项的和","<p>输入一个正整数n，计算交错序列1-2/3+3/5-4/7+5/9-6/11+……的前n项之和，试编写相应程序。</p>","<p>输入一个整数形式n</p>","<p>输出数值为double形式，最后保留小数点后六位。</p>","[{""input"": ""56"", ""output"": ""0.390467""}]","48764080d3212f9d640b2090fbe9b695","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-30 03:04:17.466699+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",317,104,358,"2-4","{""0"": 104, ""1"": 15, ""4"": 16, ""-1"": 129, ""-2"": 53}",0,20,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
192,"平方根求和","<p>输入一个正整数n，计算1+\sqrt(2)+\sqrt(3)+……+\sqrt(n)的值（保留2位小数）。可能包含头文件marth.h，并调用sqrt()函数求平方根。是编写相应程序。</p>","<p>输入一个整数n。</p>","<p>输出一个保留两位小数的求和值。</p>","[{""input"": ""4561"", ""output"": ""205385.52""}]","eec5d1fba2519370fab0e08cbf1d906f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-30 12:21:23.168804+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",228,106,358,"2-5","{""0"": 106, ""4"": 10, ""-1"": 67, ""-2"": 45}",0,20,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
193,"求给定序列前n项的和（1!+2!+3!+……+n!）","<p>输入一个正整数n，求e=1!+2!+3!+……+n!，要求定义调用函数fact(n) 计算n!，函数类型是double。是编写想用的程序。</p>","<p>输入一个整数n。</p>","<p>输出最后阶乘求和的值，用double形式，不保留小数点。</p>","[{""input"": ""12"", ""output"": ""522956313""}]","ded0d7c9e29b3bd8e18e71a380c9b991","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-30 13:06:11.931719+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",277,104,358,"2-6","{""0"": 104, ""1"": 4, ""4"": 7, ""-1"": 83, ""-2"": 79}",0,20,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
194,"比较大小","<p>输入3个整数，按照从小到大的顺序输出。试着编写相应的程序。</p>","<p>输入三个整数。</p>","<p>按照从小到大形式输出</p>","[{""input"": ""3 2 1"", ""output"": ""1 2 3""}]","52d7d6abc8bbc094e5761720cf4b9680","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-30 13:54:51.294053+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",242,102,358,"3-1","{""0"": 102, ""4"": 1, ""-1"": 101, ""-2"": 38}",0,21,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
195,"高速公路超速处罚","<p>按照规定，在高速公路上行驶的机动车，超出本车道限速的10%则处200元处罚；若超出50%，就要吊销驾驶证。请编写程序根据车速和限速自动判别对该机动车的处理。</p>","<p>输入n和m分别对应，机动车速和本车道限速。</p>","<p>输出出发结果，正常行驶：normal，超出（或等于）10%低于50%：200，超出（或等于）50%：revoke。</p>","[{""input"": ""110 100 "", ""output"": ""200""}, {""input"": ""100 100"", ""output"": ""normal""}, {""input"": ""150 100"", ""output"": ""revoke""}]","ad1e0b83af8c0bb0938fb2744c5818f8","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-08-31 03:02:23.305648+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",472,102,358,"3-2","{""0"": 102, ""4"": 15, ""-1"": 304, ""-2"": 51}",0,21,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
196,"符号函数","<p style=""text-align: left;"">本题要求实现符号函数sign(x)。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int sign( int x );</p><p style=""text-align: left;"">其中x是用户传入的整型参数。符号函数的定义为：若x大于0，sign(x) = 1；若x等于0，sign(x) = 0；否则，sign(x)=−1。</p>","<p>一个整数x。<br /></p>","<p>sign（x）的值<br /></p>","[{""input"": ""10"", ""output"": ""1""}]","c1727506ac5c7eaea401a794341d5930","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:07:58.06917+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",192,103,1,"5-1","{""0"": 103, ""4"": 1, ""-1"": 57, ""-2"": 31}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
197,"使用函数求奇数和","<p style=""text-align: left;"">本题要求实现一个函数，计算N个整数中所有奇数的和，同时实现一个判断奇偶性的函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int even( int n );</p><p style=""text-align: left;"">int OddSum( int List[], int N );</p><p style=""text-align: left;"">其中函数even将根据用户传入的参数n的奇偶性返回相应值：当n为偶数时返回1，否则返回0。函数OddSum负责计算并返回传入的N个整数List[]中所有奇数的和。</p>","<p style=""text-align: left;"">第一行一个整数n。</p><p style=""text-align: left;"">接下来一行是n个整数的序列。</p>","<p>一个整数，表示奇数和。<br /></p>","[{""input"": ""6\n2 -3 7 88 0 15\n"", ""output"": ""19""}]","5a068e6bf5b25873e3d121b77b64defb","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:10:08.459319+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",317,101,1,"5-2","{""0"": 101, ""1"": 2, ""4"": 61, ""-1"": 93, ""-2"": 60}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
198,"使用函数计算两点间的距离","<p style=""text-align: left;"">本题要求实现一个函数，对给定平面任意两点坐标(x​1​​,y​1​​)和(x​2​​,y​2​​)，求这两点之间的距离。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double dist( double x1, double y1, double x2, double y2);</p><p style=""text-align: left;"">其中用户传入的参数为平面上两个点的坐标(x1, y1)和(x2, y2)，函数dist应返回两点间的距离。</p>","<p>一行四个浮点数。<br /></p>","<p style=""text-align: left;"">一个浮点数，保留两位小数。<span></span></p>","[{""input"": ""10 10 200 100"", ""output"": ""210.24""}]","904ca438e53282c45853bd479b047763","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:12:57.3003+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",148,102,1,"5-3","{""0"": 102, ""-1"": 25, ""-2"": 21}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
199,"使用函数求素数和","<p style=""text-align: left;"">本题要求实现一个判断素数的简单函数、以及利用该函数计算给定区间内素数和的函数。</p><p style=""text-align: left;"">素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int prime( int p );</p><p style=""text-align: left;"">int PrimeSum( int m, int n );</p><p style=""text-align: left;"">其中函数prime当用户传入参数p为素数时返回1，否则返回0；函数PrimeSum返回区间[m,n]内所有素数的和。题目保证用户传入的参数m≤n。</p>","<p>两个整数m和n。（m &lt;= n）<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""-1 10"", ""output"": ""17""}]","186d49016e5ea2dde7e1ab7c5dbecf28","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:14:44.968553+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",188,100,1,"5-4","{""0"": 100, ""1"": 3, ""4"": 1, ""-1"": 65, ""-2"": 19}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
200,"使用函数统计指定数字的个数","<p style=""text-align: left;"">本题要求实现一个统计整数中指定数字的个数的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int CountDigit( int number, int digit );</p><p style=""text-align: left;"">其中number是不超过长整型的整数，digit为[0, 9]区间内的整数。函数CountDigit应返回number中digit出现的次数。</p>","<p>一行两个整数number和digit。<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""-21252 2"", ""output"": ""3""}]","2ea008f24d9c85f28f6b7e0fa196b112","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:15:51.076825+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",191,98,1,"5-5","{""0"": 98, ""1"": 14, ""4"": 5, ""-1"": 61, ""-2"": 13}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
201,"使用函数输出水仙花数","<p style=""text-align: left;"">水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=1^​3​​+5^​3​​+3^​3​​。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间(m,n)内所有的水仙花数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int narcissistic( int number );</p><p style=""text-align: left;"">void PrintN( int m, int n );</p><p style=""text-align: left;"">函数narcissistic判断number是否为水仙花数，是则返回1，否则返回0。</p><p style=""text-align: left;"">函数PrintN则打印闭区间[m, n]内所有的水仙花数，每个数字占一行。题目保证100≤m≤n≤10000。</p>","<p>一行两个整数m，n。<br /></p>","<p>从小到大输出若干行，每行一个水仙花数。<br /></p>","[{""input"": ""153 400"", ""output"": ""153\n370\n371\n""}]","3333904f830e53b0a7e3fb3326be6bbe","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:17:01.390356+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",270,99,1,"5-6","{""0"": 99, ""1"": 7, ""4"": 1, ""-1"": 118, ""-2"": 45}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
202,"使用函数求余弦函数的近似值","<p style=""text-align: left;"">本题要求实现一个函数，用下列公式求cos(x)的近似值，精确到最后一项的绝对值小于e：</p><p style=""text-align: left;"">cos(x)=x^​0​​/0!−x^​2​​/2!+x^​4​​/4!−x^​6​​/6!+⋯</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double funcos( double e, double x );</p><p style=""text-align: left;"">其中用户传入的参数为误差上限e和自变量x；函数funcos应返回用给定公式计算出来、并且满足误差要求的cos(x)的近似值。输入输出均在双精度范围内。</p>","<p>两个浮点数e和x。<br /></p>","<p>一个浮点数表示答案，保留6位小数。<br /></p>","[{""input"": ""0.01 -3.14"", ""output"": ""-0.999899""}]","31cdbb12e253b801129c42caa770e11a","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-01 11:18:25.150172+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",455,97,1,"5-7","{""0"": 97, ""1"": 138, ""4"": 3, ""-1"": 171, ""-2"": 46}",0,22,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
203,"出租车计价","<p>某城市普通出租车收费标准如下：起步里程为3公里，起步费10元，超出起步时:  3公里以上10公里以内的部分(包含十公里)，每公里2元；超过10公里以上的部分加收50%的空驶补贴费，即每公里3元；运营过程中，因路阻及乘客要求临时停车的，每5分钟2元计收(不足五分钟则不收费）。运价计费位数四舍五入，保留到元。编写程序，输入行驶路程（公里）与等待时间（分钟），计算并输出乘客应支付费用（元）。</p>","<p>输入double类型的两个浮点数，分别表示里程数和等待时间。</p>","<p>输出计程车所收费用结果四舍五入。</p>","[{""input"": ""4.25 9.5"", ""output"": ""15""}]","411a88d4add9fe58ad1ad703ff3bfee1","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-02 02:16:06.888023+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",552,100,358,"3-3","{""0"": 100, ""4"": 1, ""-1"": 394, ""-2"": 57}",0,21,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
204,"统计学生成绩","<p><font>输入一个正整数</font>n<font>，再输入</font><font>n</font><font>个学生的成绩，统计五分制成绩的成绩分布。百分制成绩到五分制成绩的转换规则：大于或等于</font><font>90</font><font>分为</font><font>A</font><font>，小于</font><font>90</font><font>且大于或等于</font><font>80</font><font>分为</font><font>B</font><font>，小于</font><font>80</font><font>分且大于或等于</font><font>70</font><font>分为</font><font>C</font><font>，小于</font><font>70</font><font>分且大于或等于</font><font>60</font><font>为</font><font>D</font><font>，小于</font><font>60</font><font>分为</font><font>E</font><font>。试着编写相应程序。</font><br /></p>","<p>输入一个n 和n个学生的成绩，n为整数，学生成绩是double形式</p>","<p>输出n个学生的五进制分数,中间用空格隔开。</p>","[{""input"": ""5\n90 80 70 60 50"", ""output"": ""A B C D E""}]","9857fe3322585bb243c24dc946c6b013","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-02 06:54:46.578329+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",394,100,358,"3-4","{""0"": 100, ""1"": 4, ""4"": 35, ""-1"": 187, ""-2"": 68}",0,21,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
205,"三角形判断","<p><font>输入平面上任意三个点的坐标（</font>x1,y1<font>）、（</font><font>x2,y2</font><font>）、（</font><font>x3,y3</font><font>），检验它们能否构成三角形。如果这</font><font>3</font><font>个点能构成一个三角形。如果这</font><font>3</font><font>个点能够构成一个三角形，输出周长和面积（</font><font>2</font><font>位小数）；否则输出“</font><font>Impossible</font><font>”。试编写相应程序。</font><br /></p><p><font><br /></font></p><p><font>提示：在一个三角形中，任意两边之和大于第三边。三角形面积计算公式如下：</font></p><p>Area = sqrt(s(s-a)(s-b)(s-c))<font>，其中</font><font>s = (a+b+c)/2</font></p><p><font><br /></font></p>","<p>输入三个坐标值，按照顺序x1,y1,x2,y2,x3,y3。输入值为int类型。<br /><br /></p>","<p>不能构成输出Impossible，否则输出周长和面积值（都保留两位小数，double类型）<br /><br /></p>","[{""input"": ""0 0 0 4 3 0"", ""output"": ""12.00 6.00""}, {""input"": ""1 2 4 5 7 8"", ""output"": ""Impossible""}]","d9c0e22006a80132aa9d627db888ed40","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-02 09:50:07.834246+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",292,101,358,"3-5","{""0"": 101, ""4"": 6, ""-1"": 148, ""-2"": 37}",0,21,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
206,"求奇数和","<p><font>输入一批正整数（以零或负数为结束标志），求其中的奇数和。试编写相应程序。</font><br /></p>","<p>输入一批正整数（以零或负数为结束标志）并用零或负数结尾<br /></p>","<p>输出其奇数的和（整数形式）。</p>","[{""input"": ""1 2 5 6 3 4 0"", ""output"": ""9""}]","a20b8a67a2aba299aa3271453c98d3ca","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-02 12:42:13.837076+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",262,105,358,"4-1","{""0"": 105, ""1"": 12, ""2"": 1, ""4"": 35, ""-1"": 87, ""-2"": 22}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
207,"展开式求和","<p><font>输入一个实数</font>x<font>，计算并输出下式的和，直到最后一项的绝对值小于</font><font>0.00001</font><font>，计算结果保留四位小数。要求定义和调用函数</font><font>fact(n)</font><font>计算</font><font>n</font><font>的阶乘，可以调用</font><font>pow()</font><font>函数求幂。试编写相应程序。</font></p><p>S= 1+x+x^2/2! + x^3/3! + x^4/4! +<font>……</font></p>","<p>输入一个实数x（double类型）</p>","<p>输出序列求和的值，double类型，结果保留4位小数。</p>","[{""input"": ""1"", ""output"": ""2.7183""}]","27f5940d07972833c32b7cd6c320ead9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 01:05:53.648858+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",480,102,358,"4-2","{""0"": 102, ""1"": 58, ""4"": 3, ""-1"": 257, ""-2"": 60}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
208,"求序列和","<p><font>输入一个整数</font>n<font>，输出</font><font>2/1+3/2+5/3+8/5+</font><font>……的前</font><font>n</font><font>项之和，保留</font><font>2</font><font>位小数，该序列从第二项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子。试编写相应的程序。</font><br /></p>","<p>输入一个整数n</p>","<p>输出序列和，double类型，结果保留两位小数</p>","[{""input"": ""2"", ""output"": ""3.50""}]","35d0727a2fef0a6db26d47b890f907a2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 01:41:02.026778+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",223,103,358,"4-3","{""0"": 103, ""1"": 5, ""4"": 10, ""-1"": 86, ""-2"": 19}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
209,"序列求和","<p><font>输入两个正整数</font>a<font>和</font><font>n</font><font>，求</font><font>a+aa+aaa+aa...a</font><font>（</font><font>n</font><font>个</font><font>a</font><font>）之和。试编写相应程序。</font><br /></p>","<p>输出两个正整数a和n</p>","<p>输出序列之和</p>","[{""input"": ""2 3"", ""output"": ""246""}]","7f2ded5c61679aaff2ccb66a096747c0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 02:08:05.755717+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",219,102,358,"4-4","{""0"": 102, ""1"": 4, ""4"": 14, ""-1"": 81, ""-2"": 18}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
210,"换硬币","<p><font>将一笔零钱（大于</font>8<font>分，小于</font><font>1元</font><font>，精确到分），换成</font><font>5</font><font>分、</font><font>2</font><font>分和</font><font>1</font><font>分的硬币，每种硬币至少有一枚。输入金额，问有几种换法，输出有多少种换法。试编写相应程序。</font><br /></p>","<p>输入整数金额（单位分），金额范围：8~100分</p>","<p>输出有多少种换法</p>","[{""input"": ""9"", ""output"": ""1""}]","9ce7f06fbcb0ec8c67c4f8119afe0cc9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 02:25:35.345781+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",246,103,358,"4-5","{""0"": 103, ""1"": 8, ""4"": 2, ""-1"": 104, ""-2"": 29}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
211,"输出水仙花数数量","<p><font>输入一个正整数</font>n<font>（</font><font>3&lt;=n&lt;=7</font><font>），输出所有</font><font>n</font><font>位水仙花数。水仙花数是指一个</font><font>n</font><font>位正整数，它的各位数字是</font><font>n</font><font>次幂之和等于它本身，输出n位所有水仙花数数量。试编写相应程序。</font></p><p><font>例如：</font>153<font>各位数字的立方和是</font><font>1^3+5^3+3^3=153</font><font>。</font></p>","<p>输入一个正整数n</p>","<p>输出n位所有水仙花数数量</p>","[{""input"": ""3"", ""output"": ""4""}]","fabb4c770466b9a1d26676e519c81eae","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 02:52:58.886048+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",595,89,358,"4-6","{""0"": 89, ""1"": 244, ""4"": 6, ""-1"": 170, ""-2"": 86}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
212,"求最大公约数和最小公倍数","<p><font>输入两个正整数</font>m<font>和</font><font>n</font><font>（</font><font>m&lt;=1000,n&lt;=1000</font><font>），求其最大公约数和最小公倍数，试编写相应程序。</font><br /></p>","<p>输入两个整数m 和 n（m&lt;=1000,n&lt;=1000）.</p>","<p>输出其最大公约数和最小公倍数，输出用一个空格隔开。</p>","[{""input"": ""15 25"", ""output"": ""5 75""}]","b99cca6ef5e0c589ef3882e9e7ba732d","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 06:29:38.577398+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",227,102,358,"4-7","{""0"": 102, ""1"": 8, ""4"": 20, ""-1"": 60, ""-2"": 37}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
213,"高空坠球","<p><font>皮球从</font>height<font>（米）高度自由落下，触地后反弹到原高度的一半再落下，再反弹…… 如此反复。问皮球在</font><font>n</font><font>次反弹的高度是多少？输出保留2</font><font>位小数，试编写相应程序。</font><br /></p>","<p>输入下放高度height（米）和 n 次反弹。</p>","<p>输出n次反弹的高度（米），保留2位小数，输出为double类型</p>","[{""input"": ""8 4"", ""output"": ""0.50""}]","49a1319c405eb043b4912345c056ed38","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 07:17:10.298757+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",235,104,358,"4-8","{""0"": 104, ""1"": 2, ""4"": 3, ""-1"": 110, ""-2"": 16}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
214,"打印菱形星号“*”图案","<p><font>输入一个正整</font><font>数</font>n<font>（</font><font>n</font><font>为奇数），打印一个高度为</font><font>n</font><font>的“</font><font>*</font><font>”菱形图案。试编写相应程序。</font></p>","<p>输入一个整数 n</p>","<p>打印一个高度为n的棱形图案，非 “*” 号区域用空格字符填充，上下行之间并无空行。</p>","[{""input"": ""7"", ""output"": ""   *\n  ***\n *****\n*******\n *****\n  ***\n   *""}]","95f6b0ef564492ecba6c3da824934e54","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 08:35:16.843995+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",329,99,358,"4-9","{""0"": 99, ""4"": 5, ""-1"": 175, ""-2"": 50}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
215,"猴子吃桃问题","<p><font>一只猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，多吃了一个；第二天早上又将剩下桃子吃掉一半，又多吃了一个。以后每天早上都是了前一天剩下的一半加一个。到第</font>n<font>天早上想再吃时就只剩下一个桃子了。问：第一天一共摘了多少个桃子？试编写相应程序（提示：采取逆向思维的方法，从后往前判断）</font><br /></p>","<p>输入正整数n，表示第n天。<br /></p>","<p>输出桃子个数。</p>","[{""input"": ""10"", ""output"": ""1534""}]","15a6cd52457a3ba0927f4be90a0b856f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 09:06:16.122947+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",160,105,358,"4-10","{""0"": 105, ""-1"": 42, ""-2"": 13}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
216,"兔子繁衍问题","<p><font>一对兔子，从出生后第三个月起每个月都生一对兔子。小兔子长到第</font>3<font>个月后每个月又生一对兔子。假如兔子都不死，请问第一个月出生的一对兔子，至少需要繁衍到第几个月时兔子总数才可以达到</font><font>n</font><font>对？输入一个不超过</font><font>10000</font><font>的正整数</font><font>n</font><font>，输出兔子总数达到</font><font>n</font><font>最少需要的月数。试编写相应程序。</font><br /></p>","<p>输入比较的整数对n</p>","<p>输入达到 n 最少需要的月数。</p>","[{""input"": ""5"", ""output"": ""5""}]","18c8434c79da2df4e908488576cf63b0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-03 12:58:12.009753+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",383,101,358,"4-11","{""0"": 101, ""1"": 29, ""4"": 3, ""-1"": 200, ""-2"": 50}",0,23,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
217,"求整数均值","<p>输入4个整数，计算并输出这些整数的和与平均值，其中平均值精确到小数点后1位，试编写相应程序<br /></p>","<p>输入4个整数。<br /></p>","<p>计算并输出这些整数的和与平均值（float形式），其中平均值精确到小数点后1位。<br /></p>","[{""input"": ""1 2 3 4"", ""output"": ""10 2.5""}]","20de2df079a2e00233bbea16d7b8332a","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:16:34.043005+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",169,27,358,"1-84","{""0"": 27, ""4"": 4, ""-1"": 131, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
218,"阶梯电价","<p>为提倡居民节约用电，某省电力公司执行“阶梯电价”，安装一户一表的居民用户电价分为两个“阶梯”：月用电量50千瓦时（含50千瓦时）以内的，电价为0.53元/千瓦时；超过50千瓦时的，超出部分的用电量电价上调0.05元/千瓦时。输入用户的月用电量（千瓦时），计算并输出改用户应支付的电费（元）。试着编写相应程序。</p>","<p>输入用电量的整数形式。</p>","<p>输出电费，用float形式。</p>","[{""input"": ""50"", ""output"": ""26.500000""}]","35f34846edf4672f60a51b6b8b277a50","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:16:43.474208+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",125,41,358,"1-85","{""0"": 41, ""4"": 2, ""-1"": 72, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
219,"序列求和","<p>输入两个正整数m和n(0&lt;m&lt;=n),求和：   i^2+1/i   (i 从 m 到 n)，保留最后6位小数，是编写相应的程序。</p>","<p>输入两个整数分别对应m和n。</p>","<p>输出用double形式。计算公式：i^2+1/i，i 从 m到n的和。</p>","[{""input"": ""1 2"", ""output"": ""6.500000""}]","cc10259f61a007172eae57c2579ea900","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:16:51.673837+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",68,40,358,"1-86","{""0"": 40, ""4"": 3, ""-1"": 18, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
220,"求交错序列前n项的和","<p>输入一个正整数n，计算交错序列1-2/3+3/5-4/7+5/9-6/11+……的前n项之和，试编写相应程序。</p>","<p>输入一个整数形式n</p>","<p>输出数值为double形式，最后保留小数点后六位。</p>","[{""input"": ""56"", ""output"": ""0.390467""}]","48764080d3212f9d640b2090fbe9b695","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:16:56.935981+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",69,42,358,"1-87","{""0"": 42, ""-1"": 16, ""-2"": 11}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
221,"平方根求和","<p>输入一个正整数n，计算1+\sqrt(2)+\sqrt(3)+……+\sqrt(n)的值（保留2位小数）。可能包含头文件marth.h，并调用sqrt()函数求平方根。是编写相应程序。</p>","<p>输入一个整数n。</p>","<p>输出一个保留两位小数的求和值。</p>","[{""input"": ""4561"", ""output"": ""205385.52""}]","eec5d1fba2519370fab0e08cbf1d906f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:17:01.794886+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",60,39,358,"1-89","{""0"": 39, ""-1"": 17, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
222,"求给定序列前n项的和（1!+2!+3!+……+n!）","<p>输入一个正整数n，求e=1!+2!+3!+……+n!，要求定义调用函数fact(n) 计算n!，函数类型是double。是编写想用的程序。</p>","<p>输入一个整数n。</p>","<p>输出最后阶乘求和的值，用double形式，不保留小数点。</p>","[{""input"": ""12"", ""output"": ""522956313""}]","ded0d7c9e29b3bd8e18e71a380c9b991","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:17:08.184986+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",59,41,358,"1-90","{""0"": 41, ""4"": 1, ""-1"": 11, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
223,"比较大小","<p>输入3个整数，按照从小到大的顺序输出。试着编写相应的程序。</p>","<p>输入三个整数。</p>","<p>按照从小到大形式输出</p>","[{""input"": ""3 2 1"", ""output"": ""1 2 3""}]","52d7d6abc8bbc094e5761720cf4b9680","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:50:12.050839+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",63,41,358,"1-91","{""0"": 41, ""-1"": 13, ""-2"": 9}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
224,"高速公路超速处罚","<p>按照规定，在高速公路上行驶的机动车，超出本车道限速的10%则处200元处罚；若超出50%，就要吊销驾驶证。请编写程序根据车速和限速自动判别对该机动车的处理。</p>","<p>输入n和m分别对应，机动车速和本车道限速。</p>","<p>输出出发结果，正常行驶：normal，超出（或等于）10%低于50%：200，超出（或等于）50%：revoke。</p>","[{""input"": ""110 100 "", ""output"": ""200""}, {""input"": ""100 100"", ""output"": ""normal""}, {""input"": ""150 100"", ""output"": ""revoke""}]","ad1e0b83af8c0bb0938fb2744c5818f8","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:50:17.792258+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",78,40,358,"1-92","{""0"": 40, ""4"": 1, ""-1"": 36, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
225,"出租车计价","<p>某城市普通出租车收费标准如下：起步里程为3公里，起步费10元，起步超过里程后10公里内，每公里2元；超过10公里以上的部分加收50%的空驶补贴费，即每公里3元；运营过程中，因路阻及乘客要求临时停车的，每5分钟2元计收(不足五分钟则不收费）。运价计费位数四舍五入，保留到元。编写程序，输入行驶路程（公里）与等待时间（分钟），计算并输出乘客应支付费用（元）。</p>","<p>输入double类型的两个浮点数，分别表示里程数和等待时间。</p>","<p>输出计程车所收费用结果四舍五入。</p>","[{""input"": ""4.25 9.5"", ""output"": ""15""}]","411a88d4add9fe58ad1ad703ff3bfee1","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:50:22.721914+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",154,29,358,"1-93","{""0"": 29, ""4"": 3, ""-1"": 107, ""-2"": 15}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
226,"统计学生成绩","<p><font>输入一个正整数</font>n<font>，再输入</font><font>n</font><font>个学生的成绩，统计五分制成绩的成绩分布。百分制成绩到五分制成绩的转换规则：大于或等于</font><font>90</font><font>分为</font><font>A</font><font>，小于</font><font>90</font><font>且大于或等于</font><font>80</font><font>分为</font><font>B</font><font>，小于</font><font>80</font><font>分且大于或等于</font><font>70</font><font>分为</font><font>C</font><font>，小于</font><font>70</font><font>分且大于或等于</font><font>60</font><font>为</font><font>D</font><font>，小于</font><font>60</font><font>分为</font><font>E</font><font>。试着编写相应程序。</font><br /></p>","<p>输入一个n 和n个学生的成绩，n为整数，学生成绩是double形式</p>","<p>输出n个学生的五进制分数,中间用空格隔开。</p>","[{""input"": ""n\n90 80 70 60 50"", ""output"": ""A B C D E""}]","9857fe3322585bb243c24dc946c6b013","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:50:27.500703+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",57,34,358,"1-94","{""0"": 34, ""4"": 4, ""-1"": 17, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
227,"三角形判断","<p><font>输入平面上任意三个点的坐标（</font>x1,y1<font>）、（</font><font>x2,y2</font><font>）、（</font><font>x3,y3</font><font>），检验它们能否构成三角形。如果这</font><font>3</font><font>个点能构成一个三角形。如果这</font><font>3</font><font>个点能够构成一个三角形，输出周长和面积（</font><font>2</font><font>位小数）；否则输出“</font><font>Impossible</font><font>”。试编写相应程序。</font><br /></p><p><font><br /></font></p><p><font>提示：在一个三角形中，任意两边之和大于第三边。三角形面积计算公式如下：</font></p><p>Area = sqrt(s(s-a)(s-b)(s-c))<font>，其中</font><font>s = (a+b+c)/2</font></p><p><font><br /></font></p>","<p>输入三个坐标值，按照顺序x1,y1,x2,y2,x3,y3。输入值为int类型。<br /><br /></p>","<p>不能构成输出Impossible，否则输出周长和面积值（都保留两位小数，double类型）<br /><br /></p>","[{""input"": ""0 0 0 4 3 0"", ""output"": ""12.00 6.00""}, {""input"": ""1 2 4 5 7 8"", ""output"": ""Impossible""}]","d9c0e22006a80132aa9d627db888ed40","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-10 12:50:33.316606+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",87,49,358,"1-95","{""0"": 49, ""4"": 2, ""-1"": 26, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
228,"求奇数和","<p><font>输入一批正整数（以零或负数为结束标志），求其中的奇数和。试编写相应程序。</font><br /></p>","<p>输入一批正整数（以零或负数为结束标志）并用零或负数结尾<br /></p>","<p>输出其奇数的和（整数形式）。</p>","[{""input"": ""1 2 5 6 3 4 0"", ""output"": ""9""}]","a20b8a67a2aba299aa3271453c98d3ca","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:29:54.302586+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",64,37,358,"1-96","{""0"": 37, ""4"": 2, ""-1"": 19, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
229,"展开式求和","<p><font>输入一个实数</font>x<font>，计算并输出下式的和，直到最后一项的绝对值小于</font><font>0.00001</font><font>，计算结果保留四位小数。要求定义和调用函数</font><font>fact(n)</font><font>计算</font><font>n</font><font>的阶乘，可以调用</font><font>pow()</font><font>函数求幂。试编写相应程序。</font></p><p>S= 1+x+x^2/2! + x^3/3! + x^4/4! +<font>……</font></p>","<p>输入一个实数x（double类型）</p>","<p>输出序列求和的值，double类型，结果保留4位小数。</p>","[{""input"": ""1"", ""output"": ""2.7183""}]","27f5940d07972833c32b7cd6c320ead9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:00.612399+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",102,25,358,"1-97","{""0"": 25, ""1"": 2, ""4"": 1, ""-1"": 67, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
230,"求序列和","<p><font>输入一个整数</font>n<font>，输出</font><font>2/1+3/2+5/3+8/5+</font><font>……的前</font><font>n</font><font>项之和，保留</font><font>2</font><font>位小数，该序列从第二项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子。试编写相应的程序。</font><br /></p>","<p>输入一个整数n</p>","<p>输出序列和，double类型，结果保留两位小数</p>","[{""input"": ""2"", ""output"": ""3.50""}]","35d0727a2fef0a6db26d47b890f907a2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:05.169619+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",55,30,358,"1-98","{""0"": 30, ""1"": 6, ""-1"": 15, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
231,"序列求和","<p><font>输入两个正整数</font>a<font>和</font><font>n</font><font>，求</font><font>a+aa+aaa+aa...a</font><font>（</font><font>n</font><font>个</font><font>a</font><font>）之和。试编写相应程序。</font><br /></p>","<p>输出两个正整数a和n</p>","<p>输出序列之和</p>","[{""input"": ""2 3"", ""output"": ""246""}]","7f2ded5c61679aaff2ccb66a096747c0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:09.717246+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",48,37,358,"1-99","{""0"": 37, ""4"": 1, ""-1"": 4, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
232,"换硬币","<p><font>将一笔零钱（大于</font>8<font>分，小于</font><font>1元</font><font>，精确到分），换成</font><font>5</font><font>分、</font><font>2</font><font>分和</font><font>1</font><font>分的硬币，每种硬币至少有一枚。输入金额，问有几种换法，输出有多少种换法。试编写相应程序。</font><br /></p>","<p>输入整数金额（单位分），金额范围：8~100分</p>","<p>输出有多少种换法</p>","[{""input"": ""9"", ""output"": ""1""}]","9ce7f06fbcb0ec8c67c4f8119afe0cc9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:15.696181+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",47,30,358,"1-100","{""0"": 30, ""1"": 1, ""-1"": 13, ""-2"": 3}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
233,"输出水仙花数数量","<p><font>输入一个正整数</font>n<font>（</font><font>3&lt;=n&lt;=7</font><font>），输出所有</font><font>n</font><font>位水仙花数。水仙花数是指一个</font><font>n</font><font>位正整数，它的各位数字是</font><font>n</font><font>次幂之和等于它本身，输出n位所有水仙花数数量。试编写相应程序。</font></p><p><font>例如：</font>153<font>各位数字的立方和是</font><font>1^3+5^3+3^3=153</font><font>。</font></p>","<p>输入一个正整数n</p>","<p>输出n位所有水仙花数数量</p>","[{""input"": ""3"", ""output"": ""4""}]","fabb4c770466b9a1d26676e519c81eae","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:21.484458+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",126,34,358,"1-101","{""0"": 34, ""1"": 49, ""4"": 2, ""-1"": 20, ""-2"": 21}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
234,"求最大公约数和最小公倍数","<p><font>输入两个正整数</font>m<font>和</font><font>n</font><font>（</font><font>m&lt;=1000,n&lt;=1000</font><font>），求其最大公约数和最小公倍数，试编写相应程序。</font><br /></p>","<p>输入两个整数m 和 n（m&lt;=1000,n&lt;=1000）.</p>","<p>输出其最大公约数和最小公倍数，输出用一个空格隔开。</p>","[{""input"": ""15 25"", ""output"": ""5 75""}]","b99cca6ef5e0c589ef3882e9e7ba732d","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:27.033949+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",43,37,358,"1-102","{""0"": 37, ""1"": 1, ""-1"": 4, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
235,"高空坠球","<p><font>皮球从</font>height<font>（米）高度自由落下，触地后反弹到原高度的一半再落下，再反弹…… 如此反复。问皮球在</font><font>n</font><font>次反弹的高度是多少？输出四舍五入保留</font>2<font>位小数，试编写相应程序。</font><br /></p>","<p>输入下放高度height（米）和 n 次反弹。</p>","<p>输出n次反弹的高度（米），保留1位小数，输出为double类型</p>","[{""input"": ""8 4"", ""output"": ""0.50""}]","4ff7129c692527ab4a1d8ce9958b089c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:31.697309+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",214,31,358,"1-103","{""0"": 31, ""1"": 3, ""4"": 9, ""-1"": 158, ""-2"": 13}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
236,"打印菱形星号“*”图案","<p><font>输入一个正整</font><font>数</font>n<font>（</font><font>n</font><font>为奇数），打印一个高度为</font><font>n</font><font>的“</font><font>*</font><font>”菱形图案。试编写相应程序。</font></p>","<p>输入一个整数 n</p>","<p>打印一个高度为n的棱形图案，非 “*” 号区域用空格字符填充，上下行之间并无空行。</p>","[{""input"": ""7"", ""output"": ""   *\n  ***\n *****\n*******\n *****\n  ***\n   *""}]","95f6b0ef564492ecba6c3da824934e54","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:36.444023+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",60,29,358,"1-104","{""0"": 29, ""-1"": 25, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
237,"猴子吃桃问题","<p><font>一只猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，多吃了一个；第二天早上又将剩下桃子吃掉一半，又多吃了一个。以后每天早上都是了前一天剩下的一半加一个。到第</font>n<font>天早上想再吃时就只剩下一个桃子了。问：第一天一共摘了多少个桃子？试编写相应程序（提示：采取逆向思维的方法，从后往前判断）</font><br /></p>","<p>输入正整数n，表示第n天。<br /></p>","<p>输出桃子个数。</p>","[{""input"": ""10"", ""output"": ""1534""}]","15a6cd52457a3ba0927f4be90a0b856f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:43.317509+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",44,35,358,"1-105","{""0"": 35, ""1"": 1, ""-1"": 6, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
238,"兔子繁衍问题","<p><font>一对兔子，从出生后第三个月起每个月都生一对兔子。小兔子长到第</font>3<font>个月后每个月又生一对兔子。假如兔子都不死，请问第一个月出生的一对兔子，至少需要繁衍到第几个月时兔子总数才可以达到</font><font>n</font><font>对？输入一个不超过</font><font>10000</font><font>的正整数</font><font>n</font><font>，输出兔子总数达到</font><font>n</font><font>最少需要的月数。试编写相应程序。</font><br /></p>","<p>输入比较的整数对n</p>","<p>输入达到 n 最少需要的月数。</p>","[{""input"": ""5"", ""output"": ""5""}]","18c8434c79da2df4e908488576cf63b0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-12 00:30:48.444773+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",88,39,358,"1-106","{""0"": 39, ""1"": 2, ""4"": 2, ""-1"": 45}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
239,"符号函数","<p style=""text-align: left;"">本题要求实现符号函数sign(x)。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int sign( int x );</p><p style=""text-align: left;"">其中x是用户传入的整型参数。符号函数的定义为：若x大于0，sign(x) = 1；若x等于0，sign(x) = 0；否则，sign(x)=−1。</p>","<p>一个整数x。<br /></p>","<p>sign（x）的值<br /></p>","[{""input"": ""10"", ""output"": ""1""}]","c1727506ac5c7eaea401a794341d5930","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:53:28.919958+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",56,36,1,"1-107","{""0"": 36, ""-1"": 9, ""-2"": 11}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
240,"使用函数求奇数和","<p style=""text-align: left;"">本题要求实现一个函数，计算N个整数中所有奇数的和，同时实现一个判断奇偶性的函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int even( int n );</p><p style=""text-align: left;"">int OddSum( int List[], int N );</p><p style=""text-align: left;"">其中函数even将根据用户传入的参数n的奇偶性返回相应值：当n为偶数时返回1，否则返回0。函数OddSum负责计算并返回传入的N个整数List[]中所有奇数的和。</p>","<p style=""text-align: left;"">第一行一个整数n。</p><p style=""text-align: left;"">接下来一行是n个整数的序列。</p>","<p>一个整数，表示奇数和。<br /></p>","[{""input"": ""6\n2 -3 7 88 0 15\n"", ""output"": ""19""}]","5a068e6bf5b25873e3d121b77b64defb","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:53:35.83285+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",53,36,1,"1-108","{""0"": 36, ""4"": 5, ""-1"": 6, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
241,"使用函数计算两点间的距离","<p style=""text-align: left;"">本题要求实现一个函数，对给定平面任意两点坐标(x​1​​,y​1​​)和(x​2​​,y​2​​)，求这两点之间的距离。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double dist( double x1, double y1, double x2, double y2);</p><p style=""text-align: left;"">其中用户传入的参数为平面上两个点的坐标(x1, y1)和(x2, y2)，函数dist应返回两点间的距离。</p>","<p>一行四个浮点数。<br /></p>","<p style=""text-align: left;"">一个浮点数，保留两位小数。<span></span></p>","[{""input"": ""10 10 200 100"", ""output"": ""210.24""}]","904ca438e53282c45853bd479b047763","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:53:41.388215+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",42,33,1,"1-109","{""0"": 33, ""4"": 1, ""-1"": 1, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
242,"使用函数求素数和","<p style=""text-align: left;"">本题要求实现一个判断素数的简单函数、以及利用该函数计算给定区间内素数和的函数。</p><p style=""text-align: left;"">素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int prime( int p );</p><p style=""text-align: left;"">int PrimeSum( int m, int n );</p><p style=""text-align: left;"">其中函数prime当用户传入参数p为素数时返回1，否则返回0；函数PrimeSum返回区间[m,n]内所有素数的和。题目保证用户传入的参数m≤n。</p>","<p>两个整数m和n。（m &lt;= n）<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""-1 10"", ""output"": ""17""}]","186d49016e5ea2dde7e1ab7c5dbecf28","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:53:46.251769+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",61,33,1,"1-110","{""0"": 33, ""1"": 2, ""-1"": 19, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
243,"使用函数统计指定数字的个数","<p style=""text-align: left;"">本题要求实现一个统计整数中指定数字的个数的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int CountDigit( int number, int digit );</p><p style=""text-align: left;"">其中number是不超过长整型的整数，digit为[0, 9]区间内的整数。函数CountDigit应返回number中digit出现的次数。</p>","<p>一行两个整数number和digit。<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""-21252 2"", ""output"": ""3""}]","2ea008f24d9c85f28f6b7e0fa196b112","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:53:51.708845+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",46,35,1,"1-111","{""0"": 35, ""4"": 1, ""-1"": 6, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
244,"使用函数输出水仙花数","<p style=""text-align: left;"">水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=1^​3​​+5^​3​​+3^​3​​。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间(m,n)内所有的水仙花数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int narcissistic( int number );</p><p style=""text-align: left;"">void PrintN( int m, int n );</p><p style=""text-align: left;"">函数narcissistic判断number是否为水仙花数，是则返回1，否则返回0。</p><p style=""text-align: left;"">函数PrintN则打印闭区间[m, n]内所有的水仙花数，每个数字占一行。题目保证100≤m≤n≤10000。</p>","<p>一行两个整数m，n。<br /></p>","<p>从小到大输出若干行，每行一个水仙花数。<br /></p>","[{""input"": ""153 400"", ""output"": ""153\n370\n371\n""}]","3333904f830e53b0a7e3fb3326be6bbe","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:53:58.222922+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",63,37,1,"1-112","{""0"": 37, ""-1"": 15, ""-2"": 11}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
245,"使用函数求余弦函数的近似值","<p style=""text-align: left;"">本题要求实现一个函数，用下列公式求cos(x)的近似值，精确到最后一项的绝对值小于e：</p><p style=""text-align: left;"">cos(x)=x^​0​​/0!−x^​2​​/2!+x^​4​​/4!−x^​6​​/6!+⋯</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double funcos( double e, double x );</p><p style=""text-align: left;"">其中用户传入的参数为误差上限e和自变量x；函数funcos应返回用给定公式计算出来、并且满足误差要求的cos(x)的近似值。输入输出均在双精度范围内。</p>","<p>两个浮点数e和x。<br /></p>","<p>一个浮点数表示答案，保留6位小数。<br /></p>","[{""input"": ""0.01 -3.14"", ""output"": ""-0.999899""}]","31cdbb12e253b801129c42caa770e11a","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-15 12:54:04.087995+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",149,42,1,"1-113","{""0"": 42, ""1"": 25, ""4"": 15, ""-1"": 60, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
246,"分类统计字符个数","<p style=""text-align: left;"">本题要求实现一个函数，统计给定字符串中英文字母、空格或回车、数字字符和其他字符的个数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void StringCount( char s[] );</p><p style=""text-align: left;"">其中char s[]是用户传入的字符串。函数StringCount须在一行内按照</p><p style=""text-align: left;"">英文字母个数,空格或回车个数,数字字符个数,其他字符个数</p><p style=""text-align: left;"">的格式输出。</p>","<p>若干行字符串。<br /></p>","<p>一行四个整数表示答案，以空格隔开。<br /></p>","[{""input"": ""aZ &\n09 Az\n"", ""output"": ""4 3 2 1""}]","e2b7bda41a77358f4cf4adf7d7f7dd7f","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 12:56:06.818456+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",561,90,1,"6-1","{""0"": 90, ""1"": 20, ""4"": 71, ""-1"": 257, ""-2"": 123}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
247,"使用函数求特殊a串数列和","<p style=""text-align: left;"">给定两个均不超过9的正整数a和n，要求编写函数求a+aa+aaa++⋯+aa⋯a（n个a）之和。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int fn( int a, int n );</p><p style=""text-align: left;"">int SumA( int a, int n );</p><p style=""text-align: left;"">其中函数fn须返回的是n个a组成的数字；SumA返回要求的和。</p>","<p>一行两个整数a和n。<br /></p>","<p>一行一个整数。<br /></p>","[{""input"": ""2 3"", ""output"": ""246""}]","d1e8e938ef0081d690855a94f2250e03","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:01:58.728894+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",132,100,1,"6-2","{""0"": 100, ""4"": 1, ""-1"": 28, ""-2"": 3}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
248,"使用函数输出指定范围内的完数","<p style=""text-align: left;"">本题要求实现一个函数，输出两正整数m和n（0&lt;m≤n≤10000）之间的所有完数个数。所谓完数就是该数恰好等于除自身外的因子之和，特别的，1也算完数。例如：6=1+2+3，其中1、2、3为6的因子。</p><p style=""text-align: left;"">如果给定区间内没有完数，则输出一行“No perfect number”。</p>","<p>一行两个整数m和n。<br /></p>","<p>输出一行，表示答案。<br /></p>","[{""input"": ""1 30"", ""output"": ""3""}]","6a68acab01069c23546384d687f3b34a","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:05:25.333325+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",268,99,1,"6-3","{""0"": 99, ""1"": 13, ""4"": 3, ""-1"": 123, ""-2"": 30}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
249,"使用函数输出指定范围内的Fibonacci数","<p>本题要求实现一个计算Fibonacci数的简单函数，并利用其实现另一个函数，输出两正整数m和n（0&lt;m≤n≤10000）之间的所有Fibonacci数。所谓Fibonacci数列就是满足任一项数字是前两项的和（最开始两项均定义为1）的数列。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int fib( int n );</p><p style=""text-align: left;"">void PrintFN( int m, int n );</p><p style=""text-align: left;"">其中函数fib须返回第n项Fibonacci数；函数PrintFN要在一行中输出给定范围[m, n]内的所有Fibonacci数，相邻数字间有一个空格，行末不得有多余空格。如果给定区间内没有Fibonacci数，则输出一行“No Fibonacci number”。</p>","<p>一行三个整数m，n，t。</p>","<p>第一行输出fib(t)的值。</p><p>接下来一行输出闭区间[m,n]之间所有Fibonacci数。</p>","[{""input"": ""20 100 7"", ""output"": ""13\n21 34 55 89\n""}]","dadb8e18f6b27a10dfbdce294faff0e2","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:07:10.740584+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",376,100,1,"6-4","{""0"": 100, ""1"": 43, ""4"": 25, ""-1"": 171, ""-2"": 37}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
250,"使用函数验证哥德巴赫猜想","<p>本题要求实现一个判断素数的简单函数，并利用该函数验证哥德巴赫猜想：任何一个不小于6的偶数均可表示为两个奇素数之和。最后给定两个整数m和n，按顺序输出满足条件的数，并按一定形式输出。（素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。）</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int prime( int p );</p><p style=""text-align: left;"">void Goldbach( int n );</p><p style=""text-align: left;"">其中函数prime当用户传入参数p为素数时返回1，否则返回0；函数Goldbach按照格式“n=p+q”输出n的素数分解，其中p≤q均为素数。又因为这样的分解不唯一（例如24可以分解为5+19，还可以分解为7+17），要求必须输出所有解中p最小的解。</p>","<p>一行两个整数m和n。（6 &lt;= m &lt;= n &lt;= 1000）。<br /></p>","<p>输出若干行，每行以“n=p+q”的格式输出。<br /></p>","[{""input"": ""89 100"", ""output"": ""90=7+83\n92=3+89\n94=5+89\n96=7+89\n98=19+79\n100=3+97\n""}]","3c481b3a1c2a619452da25b01bcfa63c","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:10:27.003933+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",215,96,1,"6-5","{""0"": 96, ""1"": 38, ""4"": 2, ""-1"": 65, ""-2"": 14}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
251,"使用函数输出一个整数的逆序数","<p style=""text-align: left;"">本题要求实现一个求整数的逆序数的简单函数。（注意：逆序后去掉前导0）</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int reverse( int number );</p><p style=""text-align: left;"">其中函数reverse须返回用户传入的整型number的逆序数。</p>","<p>一行一个整数n。<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""-12340"", ""output"": ""-4321""}]","27e8f5509ea920fa52533463ca07ef27","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:12:05.791623+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",219,98,1,"6-6","{""0"": 98, ""1"": 19, ""4"": 6, ""-1"": 76, ""-2"": 20}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
252,"简单计算器","<p>模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。<br /></p>","<p>输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。<br /></p>","<p>在一行中输出算式的运算结果，保留两位小数；或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。<br /></p>","[{""input"": ""1+2*10-10/2="", ""output"": ""10.00""}]","8e84ad834c42f52c8604957ed2e2d31f","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:14:12.910413+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",225,92,1,"6-7","{""0"": 92, ""1"": 7, ""4"": 12, ""-1"": 99, ""-2"": 15}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
253,"统计一行文本的单词个数","<p>本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。<br /></p>","<p>输入给出一行字符。<br /></p>","<p>在一行中输出单词个数。<br /></p>","[{""input"": ""Let's go to room 209."", ""output"": ""5""}]","8406c6429b3f8091822c27072a7a333d","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-17 13:15:29.549306+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",284,95,1,"6-8","{""0"": 95, ""1"": 6, ""4"": 13, ""-1"": 145, ""-2"": 25}",0,24,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
254,"数字排序","<p>给你n个数，里面的数字都是乱序的，请将它们都按照从大到小排序。<br /></p>","<p>第一行为一个整数n（1&lt;=n&lt;=1000）</p><p>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","<p>输出一行，按从大到小的顺序输出排序后的数列。<br /></p>","[{""input"": ""5\n8 3 5 4 2\n"", ""output"": ""8 5 4 3 2""}]","20f728202a72bebd00b39c6892b0beb0","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:10:39.253885+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",143,67,1,"A","{""0"": 67, ""4"": 18, ""-1"": 38, ""-2"": 20}",0,25,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
255,"新的A+B","<p>题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。<br /></p>","<p style=""text-align: left;"">输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</p><p style=""text-align: left;"">注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。</p>","<p>如果输入的确是两个正整数，则按格式A + B =和输出。如果某个输入不合要求，则在相应位置输出?，显然此时和也是?。<br /></p>","[{""input"": ""123 456"", ""output"": ""123 + 456 = 579""}, {""input"": ""22. 18"", ""output"": ""? + 18 = ?""}, {""input"": ""-100 blabla bla...33"", ""output"": ""? + ? = ?""}]","269f5bc020dc95083a2223c1ff504386","[{""score"": 11, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 11, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 11, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 11, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 11, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 11, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 11, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 11, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 11, ""input_name"": ""9.in"", ""output_name"": ""9.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:13:36.824767+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",250,44,1,"B","{""0"": 44, ""1"": 1, ""4"": 2, ""-1"": 171, ""-2"": 32}",0,25,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
256,"排座位","<p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。<br /></p>","<p>输入第一行给出3个正整数：<code>N</code>（≤100），即前来参宴的宾客总人数，则这些人从1到<code>N</code>编号；<code>M</code>为已知两两宾客之间的关系数；<code>K</code>为查询的条数。随后<code>M</code>行，每行给出一对宾客之间的关系，格式为：<code>宾客1宾客2关系</code>，其中<code>关系</code>为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后<code>K</code>行，每行给出一对需要查询的宾客编号。</p><p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>","<p>对每个查询输出一行结果：</p><p>如果两位宾客之间是朋友，且没有敌对关系，则输出<code>No problem</code>；如果他们之间并不是朋友，但也不敌对，则输出<code>OK</code>；如果他们之间有敌对，然而也有共同的朋友，则输出<code>OKbut...</code>；如果他们之间只有敌对关系，则输出<code>No way</code>。</p>","[{""input"": ""7 8 4\n5 6 1\n2 7 -1\n1 3 1\n3 4 1\n6 7 -1\n1 2 1\n1 4 1\n2 3 -1\n3 4\n5 7\n2 3\n7 2\n"", ""output"": ""No problem\nOK\nOK but...\nNo way\n""}]","4d388a262bfff7262fd5dc8ce6a3c811","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:16:30.759606+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",219,9,1,"C","{""0"": 9, ""1"": 4, ""4"": 10, ""-1"": 186, ""-2"": 10}",0,25,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
257,"安排任务","<p>给你一堆存在时间冲突的任务，需要你合理安排，尽可能多完成一些任务。假设你已经知道了所有任务的开始和结束时间，你会合理安排吗？（目标是尽可能完成更多的任务）<br /></p>","<p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示需要安排的任务总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个任务的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。<br /></p>","<p>对于每个测试实例，输出能完成的任务个数，每个测试实例的输出占一行。<br /></p>","[{""input"": ""9\n1 4\n0 7\n3 8\n10 15\n8 18\n6 12\n5 10\n4 14\n2 9\n0\n"", ""output"": ""3""}]","3ee37ed04f34221d708552ccac45df03","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:19:34.888265+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",177,36,1,"D","{""0"": 36, ""1"": 2, ""2"": 1, ""4"": 5, ""-1"": 100, ""-2"": 33}",0,25,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
258,"字符分离","<p>小明同学刚刚学会了字符串，现在他想考你一道有关字符串的题目。给定一个只包含小写字母&#039;a&#039;-&#039;z&#039;的字符串S，你需要将S中的字符重新排序，使得任意两个相同的字符不连在一起。<br /></p><p style=""text-align: left;"">如果有多个重排后的字符串满足条件，输出字典序最小的一个。</p><p style=""text-align: left;"">字典序小于定义：对于字符串a和b，找到第一个i使得a[i]&lt;b[i]，且同时满足a[j]=b[j](j&lt;i)，则a的字典序更小。</p><p style=""text-align: left;"">如果不存在满足条件的字符串，输出‘INVALID’(不包括引号)。</p>","<p>第一行一个整数n。(1 ≤ n ≤ 100000)</p><p>第二行长度为n的字符串S。</p>","<p>输出字典序最小的答案或者INVALID。</p>","[{""input"": ""5\naaabc\n"", ""output"": ""abaca\n""}]","f1bf005a3ca6ec3bcf1a81480a2f903c","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:23:01.350221+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",37,0,1,"E","{""1"": 2, ""-1"": 28, ""-2"": 7}",0,25,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
259,"Bomb exploded","<p>给定一个n*m大小的矩阵，矩阵中每个值分别为0、1、2中的一个数。数的含义如下：0表示是一块空地；1表示炸弹，炸弹引爆时会将炸弹所在行、所在列都波及，炸弹引爆会产生连锁反应；2表示墙，会阻挡炸弹在该点及之后方向上的波及。每次引爆1个炸弹付出的代价为1，试求出使得矩阵中所有炸弹都被引爆所需要的最小代价。</p>","<p>第一行输入两个整数n和m（n*m&lt;=10）。<br /></p><p style=""text-align: left;"">接下来n行每行m个整数，每个整数的取值为0或1或2，整数之间以空格分隔。</p>","<p>一行一个整数表示最小的代价。<br /></p>","[{""input"": ""3 3\n0 1 1\n2 2 2\n1 1 0\n"", ""output"": ""2\n""}]","15af5ceb3c7367aaa3f1f24b512d9f36","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:24:18.715195+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",37,5,1,"F","{""0"": 5, ""1"": 1, ""4"": 7, ""-1"": 16, ""-2"": 8}",0,25,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
260,"链表维护","<p>给定一个起始长度为n的单链表head-&gt;a[1]-&gt;a[2]-&gt;…-&gt;a[n]（head为空头节点），有一个p指针初始指向head。现在有Q次操作，每次操作为以下两种中的一种：1.如果p指针有下一个节点，则跳转到下一个节点；2.在p指针节点后插入一个值为val的节点。<br /></p><p style=""text-align: left;"">Q次操作后请输出当前的单链表。</p>","<p>第一行一个整数n。（1&lt;=n&lt;=100000）</p><p>第二行有n个正整数表示单链表。</p><p>第三行一个整数Q。（1&lt;=q&lt;=100000）</p><p>接下来Q行，每行先输入一个值x表示操作编号：x=1，表示操作1；x=2，接下来输入一个值val。</p>","<p>输出一行，每个整数后空一格。</p>","[{""input"": ""5\n1 2 3 4 5\n6\n2 10\n1\n1\n1\n1\n2 11\n"", ""output"": ""10 1 2 3 11 4 5 \n""}]","4906ff64b5d2bf89aceab7568185b65f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>第一次操作，p指针指向head，插入10，单链表变成10 1 2 3 4 5。</p><p>第二次操作，p指针指向head，p指针有下一节点，执行跳转。</p><p>第三次操作，p指针指向10，p指针有下一节点，执行跳转。</p><p>第四次操作，p指针指向1，p指针有下一节点，执行跳转。</p><p>第五次操作，p指针指向2，p指针有下一节点，执行跳转。</p><p>第六次操作，p指针指向3，插入11，单链表变成10 1 2 3 11 4 5。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:25:03.898398+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",169,26,1,"G","{""0"": 26, ""1"": 41, ""2"": 1, ""4"": 41, ""-1"": 42, ""-2"": 18}",0,25,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
261,"最大和II","<p>给定一个长度为n的数组a[1...n]，试找出至少k个位置互不相邻的数（可以恰好等于k个），它们的和最大。<br /></p>","<p>第一行两个整数n和k。$ (1 &lt;= k &lt;= \lceil\frac{n}{3}\rceil &lt;= n &lt;= 100000) $</p><p>接下来一行输入一个长度为n的数组a[1...n]。$ (1&lt;= a[i] &lt;= 10000) $</p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""3 1\n1 2 3"", ""output"": ""4""}]","f3805247edfb1ee11e85869a69b8f380","[{""score"": 5, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 5, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 5, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 5, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 5, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 5, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 5, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 5, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 5, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 5, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 5, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 5, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 5, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 5, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 5, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 5, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 5, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 5, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 5, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 5, ""input_name"": ""20.in"", ""output_name"": ""20.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-09-24 02:28:36.56429+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",49,3,1,"H","{""0"": 3, ""1"": 1, ""2"": 5, ""3"": 3, ""4"": 2, ""-1"": 34, ""-2"": 1}",0,25,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
262,"分类统计字符个数","<p style=""text-align: left;"">本题要求实现一个函数，统计给定字符串中英文字母、空格或回车、数字字符和其他字符的个数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void StringCount( char s[] );</p><p style=""text-align: left;"">其中char s[]是用户传入的字符串。函数StringCount须在一行内按照</p><p style=""text-align: left;"">英文字母个数,空格或回车个数,数字字符个数,其他字符个数</p><p style=""text-align: left;"">的格式输出。</p>","<p>若干行字符串。<br /></p>","<p>一行四个整数表示答案，以空格隔开。<br /></p>","[{""input"": ""aZ &\n09 Az\n"", ""output"": ""4 3 2 1""}]","bab7f60a9976bd8fe9871380c9e5a739","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:07.324079+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",134,34,1,"1-114","{""0"": 34, ""1"": 2, ""4"": 19, ""-1"": 46, ""-2"": 32}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
263,"使用函数求特殊a串数列和","<p style=""text-align: left;"">给定两个均不超过9的正整数a和n，要求编写函数求a+aa+aaa++⋯+aa⋯a（n个a）之和。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int fn( int a, int n );</p><p style=""text-align: left;"">int SumA( int a, int n );</p><p style=""text-align: left;"">其中函数fn须返回的是n个a组成的数字；SumA返回要求的和。</p>","<p>一行两个整数a和n。<br /></p>","<p>一行一个整数。<br /></p>","[{""input"": ""2 3"", ""output"": ""246""}]","d1e8e938ef0081d690855a94f2250e03","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:11.868781+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",49,35,1,"1-115","{""0"": 35, ""1"": 2, ""-1"": 9, ""-2"": 3}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
264,"使用函数输出指定范围内的完数","<p style=""text-align: left;"">本题要求实现一个函数，输出两正整数m和n（0&lt;m≤n≤10000）之间的所有完数个数。所谓完数就是该数恰好等于除自身外的因子之和，特别的，1也算完数。例如：6=1+2+3，其中1、2、3为6的因子。</p><p style=""text-align: left;"">如果给定区间内没有完数，则输出一行“No perfect number”。</p>","<p>一行两个整数m和n。<br /></p>","<p>输出一行，表示答案。<br /></p>","[{""input"": ""1 30"", ""output"": ""3""}]","6a68acab01069c23546384d687f3b34a","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:16.584245+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",69,33,1,"1-116","{""0"": 33, ""1"": 7, ""-1"": 24, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
265,"使用函数输出指定范围内的Fibonacci数","<p>本题要求实现一个计算Fibonacci数的简单函数，并利用其实现另一个函数，输出两正整数m和n（0&lt;m≤n≤10000）之间的所有Fibonacci数。所谓Fibonacci数列就是满足任一项数字是前两项的和（最开始两项均定义为1）的数列。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int fib( int n );</p><p style=""text-align: left;"">void PrintFN( int m, int n );</p><p style=""text-align: left;"">其中函数fib须返回第n项Fibonacci数；函数PrintFN要在一行中输出给定范围[m, n]内的所有Fibonacci数，相邻数字间有一个空格，行末不得有多余空格。如果给定区间内没有Fibonacci数，则输出一行“No Fibonacci number”。</p>","<p>一行三个整数m，n，t。</p>","<p>第一行输出fib(t)的值。</p><p>接下来一行输出闭区间[m,n]之间所有Fibonacci数。</p>","[{""input"": ""20 100 7"", ""output"": ""13\n21 34 55 89\n""}]","dadb8e18f6b27a10dfbdce294faff0e2","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:21.245765+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",116,43,1,"1-117","{""0"": 43, ""1"": 2, ""4"": 6, ""-1"": 59, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
266,"使用函数验证哥德巴赫猜想","<p>本题要求实现一个判断素数的简单函数，并利用该函数验证哥德巴赫猜想：任何一个不小于6的偶数均可表示为两个奇素数之和。最后给定两个整数m和n，按顺序输出满足条件的数，并按一定形式输出。（素数就是只能被1和自身整除的正整数。注意：1不是素数，2是素数。）</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int prime( int p );</p><p style=""text-align: left;"">void Goldbach( int n );</p><p style=""text-align: left;"">其中函数prime当用户传入参数p为素数时返回1，否则返回0；函数Goldbach按照格式“n=p+q”输出n的素数分解，其中p≤q均为素数。又因为这样的分解不唯一（例如24可以分解为5+19，还可以分解为7+17），要求必须输出所有解中p最小的解。</p>","<p>一行两个整数m和n。（6 &lt;= m &lt;= n &lt;= 1000）。<br /></p>","<p>输出若干行，每行以“n=p+q”的格式输出。<br /></p>","[{""input"": ""89 100"", ""output"": ""90=7+83\n92=3+89\n94=5+89\n96=7+89\n98=19+79\n100=3+97\n""}]","3c481b3a1c2a619452da25b01bcfa63c","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:25.632985+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",70,37,1,"1-118","{""0"": 37, ""1"": 3, ""4"": 1, ""-1"": 22, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
267,"使用函数输出一个整数的逆序数","<p style=""text-align: left;"">本题要求实现一个求整数的逆序数的简单函数。（注意：逆序后去掉前导0）</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int reverse( int number );</p><p style=""text-align: left;"">其中函数reverse须返回用户传入的整型number的逆序数。</p>","<p>一行一个整数n。<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""-12340"", ""output"": ""-4321""}]","27e8f5509ea920fa52533463ca07ef27","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:30.140579+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",87,49,1,"1-119","{""0"": 49, ""1"": 6, ""4"": 2, ""-1"": 21, ""-2"": 9}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
268,"简单计算器","<p>模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。<br /></p>","<p>输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。<br /></p>","<p>在一行中输出算式的运算结果，保留两位小数；或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。<br /></p>","[{""input"": ""1+2*10-10/2="", ""output"": ""10.00""}]","a08ed0f7a9558a5820db5ca0bae743df","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:35.957928+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",72,33,1,"1-120","{""0"": 33, ""4"": 5, ""-1"": 26, ""-2"": 3}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
269,"统计一行文本的单词个数","<p>本题目要求编写程序统计一行字符中单词的个数。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。<br /></p>","<p>输入给出一行字符。<br /></p>","<p>在一行中输出单词个数。<br /></p>","[{""input"": ""Let's go to room 209."", ""output"": ""5""}]","8406c6429b3f8091822c27072a7a333d","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-01 11:56:40.61989+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",86,43,1,"1-121","{""0"": 43, ""4"": 3, ""-1"": 29, ""-2"": 11}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
270,"选择排序","<p><font>输入一个正整数</font>n(1&lt;n&lt;=10),<font>再输入</font><font>n</font><font>个整数，将他们从大到小排序后输出。试编写相应程序。</font><br /></p>","<p>先输入一个n 然后在输入n个数，都是整数形式。<br /><br /></p>","<p>输出从大到小排序后的数。中间用空格隔开，输出结尾不保留空格。</p>","[{""input"": ""5\n1 2 3 4 5"", ""output"": ""5 4 3 2 1""}]","82d411e82b2a5c616c4292bfe4863a97","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-07 09:55:10.641856+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",230,101,358,"7-1","{""0"": 101, ""1"": 2, ""4"": 13, ""-1"": 97, ""-2"": 17}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
271,"输出华氏-摄氏温度转换表","<p>输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p>","<p>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开<br /></p>","<p style=""text-align: left;"">每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（浮点数，保留一位小数），并以空格隔开。</p><p style=""text-align: left;"">若输入的范围不合法，则输出&quot;Invalid&quot;。</p>","[{""input"": ""32 35\n"", ""output"": ""32 0.0\n34 1.1\n\n""}, {""input"": ""40 30\n"", ""output"": ""Invalid\n""}]","c9fc5bd14fd2b175010700ac400c92b8","[{""score"": 14, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 14, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 14, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 14, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 14, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 14, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 14, ""input_name"": ""7.in"", ""output_name"": ""7.out""}]","","[""C""]","{}","2019-10-08 02:15:42.227548+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",64,28,1,"1","{""0"": 28, ""-1"": 32, ""-2"": 4}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
272,"计算分段函数","<p>计算下列分段函数f(x)的值：<br /></p><p><img alt=""image.png"" src=""/public/upload/5589a76c17.png"" width=""300"" height=""59.85401459854015"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>在一行中按“f(x) = result”的格式输出，其中x与result都保留两位小数。<br /></p>","[{""input"": ""10"", ""output"": ""f(10.00) = 3.16""}, {""input"": ""-0.5"", ""output"": ""f(-0.50) = -2.75""}]","98312d65fd10d3b2cd9b04c8a12196b8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-10-08 02:16:18.758982+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",115,28,1,"2","{""0"": 28, ""-1"": 81, ""-2"": 6}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
273,"方阵循环右移","<p>本题要求编写程序，将给定n×n方阵中的每个元素循环向右移m个位置，即将第0、1、⋯、n−1列变换为第n−m、n−m+1、⋯、n−1、0、1、⋯、n−m−1列。<br /></p>","<p>输入第一行给出两个正整数m和n（1≤n≤6）。接下来一共n行，每行n个整数，表示一个n阶的方阵。<br /></p>","<p>按照输入格式输出移动后的方阵：即输出n行，每行n个整数，每个整数后输出一个空格。<br /></p>","[{""input"": ""2 3\n1 2 3\n4 5 6\n7 8 9\n"", ""output"": ""2 3 1 \n5 6 4 \n8 9 7 \n""}]","f0dce15a91875e718472d17ac6094f77","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-08 02:21:44.134555+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",83,10,1,"5","{""0"": 10, ""1"": 3, ""4"": 11, ""-1"": 58, ""-2"": 1}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
274,"猜数字游戏","<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次或者3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。<br /></p>","<p>输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。<br /></p>","<p>在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。<br /></p>","[{""input"": ""58 4\n70\n50\n56\n58\n60\n-2\n"", ""output"": ""Too big\nToo small\nToo small\nGood Guess!\n""}]","ad2d03f556feac8e155ebab8a027d2d9","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-08 02:22:08.878919+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",271,13,1,"6","{""0"": 13, ""2"": 1, ""4"": 54, ""-1"": 189, ""-2"": 14}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
275,"矩阵运算","<p>给定一个n×n的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。<br /></p>","<p>输入第一行给出正整数n（1&lt;n≤10）；随后n行，每行给出n个整数，其间以空格分隔。<br /></p>","<p>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。<br /></p>","[{""input"": ""4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1\n"", ""output"": ""35""}]","4c41e7b2578cb093c07c606437ee841b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-10-08 02:22:28.700461+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",45,18,1,"7","{""0"": 18, ""4"": 4, ""-1"": 19, ""-2"": 4}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
276,"天数计算","<p>输入某年某月某日，判断这几一天是这一年的第几天？<br /></p>","<p>分别输入整数形式的某年某月某日<br /></p>","<p>判断这一天是这一年的第几天，输出为整数形式<br /></p>","[{""input"": ""2018 12 6"", ""output"": ""340""}, {""input"": ""2020 3 1\n"", ""output"": ""61""}]","a358f8a413ab1430a66c8791b2d61b0f","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","<p>注意：闰年的2月份是29天。<br /><br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 06:32:36.746653+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",52,29,358,"3","{""0"": 29, ""-1"": 19, ""-2"": 4}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
277,"天数计算","<p>输入某年某月某日，判断这几一天是这一年的第几天？<br /></p>","<p>分别输入整数形式的某年某月某日<br /></p>","<p>判断这一天是这一年的第几天，输出为整数形式<br /></p>","[{""input"": ""2018 12 6"", ""output"": ""340""}, {""input"": ""2020 3 1\n"", ""output"": ""61""}]","77c04e1db95639cc363c703b40021a4c","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","<p>注意：闰年的2月份是29天。<br /><br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 06:32:50.226686+00",NULL,1996,256,False,NULL,NULL,NULL,"ACM",False,"Low","",13,10,358,"1-122","{""0"": 10, ""-1"": 2, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
278,"素数个数","<p>给定两个数m和n，求m和n之间的素数个数（包括m,n）,试编写相应程序。<br /></p>","<p>依次输入两个整数m,n，m&lt;n。<br /></p>","<p>输出m,n和n之间的个数，输出为整数形式。<br /></p>","[{""input"": ""2 10"", ""output"": ""4""}]","6c2582284ed6900d872d6a820fc85858","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 06:39:20.692393+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",49,28,358,"4","{""0"": 28, ""-1"": 14, ""-2"": 7}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
279,"斐波那契数列","<p>给出一个n，求斐波那契数列第n项和第n-1项两数的最大公约数和最小公倍数（n&gt;=4）<br /></p>","<p>输入一个正整数n（n&gt;=4）。<br /></p>","<p>分别输出第n项和n-1的最大公约数和最小公倍数（整数形式）。<br /></p>","[{""input"": ""6"", ""output"": ""1 40""}]","9d61971ebad718d28ed226cac8528f31","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>斐波那契数列 ： F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）<br /></p><p>斐波那契数列是从第零项开始，数列表示为 0 1 1 2 3 5 8 13......当n=6，F(n)=8，F(n-1)=5。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 06:42:55.080684+00",NULL,3000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",43,26,358,"8","{""0"": 26, ""4"": 3, ""-1"": 7, ""-2"": 7}",0,27,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
280,"素数个数","<p>给定两个数m和n，求m和n之间的素数个数（包括m,n）,试编写相应程序。<br /></p>","<p>依次输入两个整数m,n，m&lt;n。<br /></p>","<p>输出m,n和n之间的个数，输出为整数形式。<br /></p>","[{""input"": ""2 10"", ""output"": ""4""}]","6c2582284ed6900d872d6a820fc85858","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 06:43:34.536674+00",NULL,1999,256,False,NULL,NULL,NULL,"ACM",False,"Low","",14,12,358,"1-123","{""0"": 12, ""-1"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
281,"斐波那契数列","<p>给出一个n，求斐波那契数列第n项和第n-1项两数的最大公约数和最小公倍数（n&gt;=4）<br /></p>","<p>输入一个正整数n（n&gt;=4）。<br /></p>","<p>分别输出第n项和n-1的最大公约数和最小公倍数（整数形式）。<br /></p>","[{""input"": ""6"", ""output"": ""1 40""}]","9d61971ebad718d28ed226cac8528f31","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>斐波那契数列 ： F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）<br /></p><p>斐波那契数列是从第零项开始，数列表示为 0 1 1 2 3 5 8 13......当n=6，F(n)=8，F(n-1)=5。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 06:43:40.504987+00",NULL,2001,256,False,NULL,NULL,NULL,"ACM",False,"Low","",15,13,358,"1-124","{""0"": 13, ""-1"": 1, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
282,"求一批整数出现最多的数字。","<p><font>输入一个正整数</font>n<font>（</font><font>1&lt;n&lt;=1000</font><font>），再输入</font><font>n</font><font>个整数，分析每个整数的每一位数字，求出现次数最多的数字。例如输入</font><font>n</font><font>个整数，分析每个整数的每一位数字，求出现次数最多的数字。例如输入</font><font>3</font><font>个整数</font><font>1234</font><font>、</font><font>2345</font><font>、</font><font>3456</font><font>，其中出现次数最多的数字是</font><font>3</font><font>和</font><font>4</font><font>，均出现了</font><font>3</font><font>次。试编写相应程序。</font><br /></p>","<p><font>输入一个正整数</font>n<font>（</font><font>1&lt;n&lt;=1000</font><font>），再输入</font><font>n</font><font>个整数。</font><br /></p>","<p>输出出现次数最多的数字，如果是多个数字同时出现，按从小到大输出，之间用空格隔开，最后无空格。</p>","[{""input"": ""3\n1234 2345 3456\n"", ""output"": ""3 4""}]","e61505fff8a558347b50adf2d060950c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 08:16:28.95874+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",211,100,358,"7-2","{""0"": 100, ""1"": 3, ""4"": 14, ""-1"": 78, ""-2"": 16}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
283,"判断上三角矩阵","<p><font>输入一个正整数</font>n(1&lt;=n&lt;=6)<font>和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，如果</font><font>a</font><font>是上三角矩阵，输出</font>”YES”,<font>否则输出“</font><font>NO</font><font>”。</font><br /></p>","<p><font>输入一个正整数</font>n(1&lt;=n&lt;=6)<font>和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，方阵中a的元素为整数形式</font><br /></p>","<p><font>如果</font><font>a</font><font>是上三角矩阵，输出</font>”YES”，<font>否则输出“</font><font>NO</font><font>”。</font><br /></p>","[{""input"": ""3\n1 2 3\n4 5 6\n0 12 8"", ""output"": ""NO""}, {""input"": ""3\n1 2 3\n0 1 2\n0 0 1"", ""output"": ""YES""}]","45ff0627ed45231a659fee0da0677bfc","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>上三角矩阵指主对角线以下的元素全都为零的矩阵，主对角线为矩阵的左上角至右下角的连线。试编写相应程序。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 08:37:17.107773+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",206,101,358,"7-3","{""0"": 101, ""1"": 4, ""4"": 7, ""-1"": 74, ""-2"": 20}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
284,"求矩阵各行元素之和。","<p><font>输入</font>2<font>个正整数</font><font>m</font><font>和</font><font>n</font><font>（</font><font>1&lt;=m&lt;=6,1&lt;=n&lt;=6</font><font>），然后输入矩阵</font><font>a</font><font>（</font><font>m</font><font>行</font><font>n</font><font>列）中的元素，分别求出各行元素之和，并输出。试编写相应程序。</font><br /></p>","<p><font>输入</font>2<font>个正整数</font><font>m</font><font>和</font><font>n</font><font>（</font><font>1&lt;=m&lt;=6,1&lt;=n&lt;=6</font><font>），然后输入矩阵</font><font>a</font><font>（</font><font>m</font><font>行</font><font>n</font><font>列）中的元素，矩阵中的元素均为整数。</font><br /></p>","<p>依次输出各行元素之和，也是整数形式。</p>","[{""input"": ""2 4\n1 2 3 4\n4 5 6 7"", ""output"": ""10 22""}]","5a7f58d3b3ab192b723e97c70e8ab64e","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 10:01:35.243572+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",194,99,358,"7-4","{""0"": 99, ""4"": 6, ""-1"": 69, ""-2"": 20}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
285,"找鞍点","<p><font>输入</font>1<font>个整数</font><font>n</font><font>（</font><font>1&lt;=n&lt;=6</font><font>）和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，假设方阵</font><font>a</font><font>最多有</font><font>1</font><font>个鞍点，如果找到</font><font>a</font><font>的鞍点，就输出其下标，否则，输出“</font><font>NO</font><font>”。鞍点的元素值在该行上最大，该列上最小，试编写相应程序。</font><br /></p>","<p><font>输入</font>1<font>个整数</font><font>n</font><font>（</font><font>1&lt;=n&lt;=6</font><font>）和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，元素为整数形式</font><br /></p>","<p><font>如果找到</font><font>a</font><font>的鞍点，就输出其下标，否则，输出“</font><font>NO</font><font>”.</font><br /></p>","[{""input"": ""3\n1 2 3\n4 5 6\n7 8 9"", ""output"": ""0 2""}]","1c1e8758fd4057a0e88b0a55c1c9dc87","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>鞍点的元素值在该行上最大，该列上最小，试编写相应程序。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-08 10:53:17.940495+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",375,99,358,"7-5","{""0"": 99, ""1"": 12, ""4"": 7, ""-1"": 229, ""-2"": 28}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
286,"找鞍点","<p><font>输入</font>1<font>个整数</font><font>n</font><font>（</font><font>1&lt;=n&lt;=6</font><font>）和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，假设方阵</font><font>a</font><font>最多有</font><font>1</font><font>个鞍点，如果找到</font><font>a</font><font>的鞍点，就输出其下标，否则，输出“</font><font>NO</font><font>”。鞍点的元素值在该行上最大，该列上最小，试编写相应程序。</font><br /></p>","<p><font>输入</font>1<font>个整数</font><font>n</font><font>（</font><font>1&lt;=n&lt;=6</font><font>）和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，元素为整数形式</font><br /></p>","<p><font>如果找到</font><font>a</font><font>的鞍点，就输出其下标，否则，输出“</font><font>NO</font><font>”.</font><br /></p>","[{""input"": ""3\n1 2 3\n4 5 6\n7 8 9"", ""output"": ""0 2""}]","483f164b0816e06f88bbdf948a6fc080","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>鞍点的元素值在该行上最大，该列上最小，试编写相应程序。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-09 02:35:34.167414+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",173,53,358,"1-125","{""0"": 53, ""4"": 12, ""-1"": 98, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
287,"求矩阵各行元素之和。","<p><font>输入</font>2<font>个正整数</font><font>m</font><font>和</font><font>n</font><font>（</font><font>1&lt;=m&lt;=6,1&lt;=n&lt;=6</font><font>），然后输入矩阵</font><font>a</font><font>（</font><font>m</font><font>行</font><font>n</font><font>列）中的元素，分别求出各行元素之和，并输出。试编写相应程序。</font><br /></p>","<p><font>输入</font>2<font>个正整数</font><font>m</font><font>和</font><font>n</font><font>（</font><font>1&lt;=m&lt;=6,1&lt;=n&lt;=6</font><font>），然后输入矩阵</font><font>a</font><font>（</font><font>m</font><font>行</font><font>n</font><font>列）中的元素，矩阵中的元素均为整数。</font><br /></p>","<p>依次输出各行元素之和，也是整数形式。</p>","[{""input"": ""2 4\n1 2 3 4\n4 5 6 7"", ""output"": ""10 22""}]","2ead06d5758d609844c811a7f37e74e4","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-09 02:35:40.126506+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",73,42,358,"1-126","{""0"": 42, ""4"": 3, ""-1"": 18, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
288,"判断上三角矩阵","<p><font>输入一个正整数</font>n(1&lt;=n&lt;=6)<font>和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，如果</font><font>a</font><font>是上三角矩阵，输出</font>”YES”,<font>否则输出“</font><font>NO</font><font>”。</font><br /></p>","<p><font>输入一个正整数</font>n(1&lt;=n&lt;=6)<font>和</font><font>n</font><font>阶方阵</font><font>a</font><font>中的元素，方阵中a的元素为整数形式</font><br /></p>","<p><font>如果</font><font>a</font><font>是上三角矩阵，输出</font>”YES”，<font>否则输出“</font><font>NO</font><font>”。</font><br /></p>","[{""input"": ""3\n1 2 3\n4 5 6\n0 12 8"", ""output"": ""NO""}, {""input"": ""3\n1 2 3\n0 1 2\n0 0 1"", ""output"": ""YES""}]","45ff0627ed45231a659fee0da0677bfc","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>上三角矩阵指主对角线以下的元素全都为零的矩阵，主对角线为矩阵的左上角至右下角的连线。试编写相应程序。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-09 02:35:45.600645+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",62,37,358,"1-127","{""0"": 37, ""4"": 2, ""-1"": 20, ""-2"": 3}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
289,"求一批整数出现最多的数字。","<p><font>输入一个正整数</font>n<font>（</font><font>1&lt;n&lt;=1000</font><font>），再输入</font><font>n</font><font>个整数，分析每个整数的每一位数字，求出现次数最多的数字。例如输入</font><font>n</font><font>个整数，分析每个整数的每一位数字，求出现次数最多的数字。例如输入</font><font>3</font><font>个整数</font><font>1234</font><font>、</font><font>2345</font><font>、</font><font>3456</font><font>，其中出现次数最多的数字是</font><font>3</font><font>和</font><font>4</font><font>，均出现了</font><font>3</font><font>次。试编写相应程序。</font><br /></p>","<p><font>输入一个正整数</font>n<font>（</font><font>1&lt;n&lt;=1000</font><font>），再输入</font><font>n</font><font>个整数。</font><br /></p>","<p>输出出现次数最多的数字，如果是多个数字同时出现，按从小到大输出，之间用空格隔开，最后无空格。</p>","[{""input"": ""3\n1234 2345 3456\n"", ""output"": ""3 4""}]","e61505fff8a558347b50adf2d060950c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-09 02:35:50.585657+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",49,36,358,"1-128","{""0"": 36, ""4"": 5, ""-1"": 7, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
290,"选择排序","<p><font>输入一个正整数</font>n(1&lt;n&lt;=10),<font>再输入</font><font>n</font><font>个整数，将他们从大到小排序后输出。试编写相应程序。</font><br /></p>","<p>先输入一个n 然后在输入n个数，都是整数形式。<br /><br /></p>","<p>输出从大到小排序后的数。中间用空格隔开，输出结尾不保留空格。</p>","[{""input"": ""5\n1 2 3 4 5"", ""output"": ""5 4 3 2 1""}]","82d411e82b2a5c616c4292bfe4863a97","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-09 02:35:55.536673+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",80,44,358,"1-129","{""0"": 44, ""4"": 3, ""-1"": 23, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
291,"拆分实数的整数与小数部分","<p style=""text-align: left;"">本题要求实现一个拆分实数的整数与小数部分的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void splitfloat( float x, int *intpart, float *fracpart);</p><p style=""text-align: left;"">其中x是被拆分的实数（0≤x&lt;10000），*intpart和*fracpart分别是将实数x拆分出来的整数部分与小数部分。</p><p>请实现函数接口，并在主函数中调用它。</p>","<p>一行一个浮点数x。<br /></p>","<p>一行两个数，分别表示x的整数部分和小数部分。（小数保留三位小数）<br /></p>","[{""input"": ""2.718"", ""output"": ""2 0.718""}]","a2ee28c77030e598888c31b8bc41f375","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:00:40.707733+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",187,96,1,"8-1","{""0"": 96, ""4"": 21, ""-1"": 47, ""-2"": 23}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
292,"在数组中查找指定元素","<p style=""text-align: left;"">本题要求实现一个在数组中查找指定元素的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int search( int list[], int n, int x );</p><p style=""text-align: left;"">其中list[]是用户传入的数组；n（≥0）是list[]中元素的个数；x是待查找的元素。如果找到</p><p style=""text-align: left;"">则函数search返回相应元素的最小下标（下标从0开始），否则返回−1。</p>","<p>第一行一个整数n。</p><p>接下来一行n个整数代表数组a。</p><p>最后一行一个整数表示要查找的元素x。</p>","<p>输出下标或-1。<br /></p>","[{""input"": ""5\n1 2 2 5 4\n2\n"", ""output"": ""1""}, {""input"": ""5\n1 2 2 5 4\n0\n"", ""output"": ""-1""}]","4dab22a30a637f5b976553bf89d45a08","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:02:19.819401+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",179,97,1,"8-2","{""0"": 97, ""4"": 36, ""-1"": 31, ""-2"": 15}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
293,"数组循环右移","<p style=""text-align: left;"">本题要求实现一个对数组进行循环右移的简单函数：一个数组a中存有n（&gt;0）个整数，将每个整数循环向右移m（≥0）个位置，即将a中的数据由（a​0​​a​1​​⋯a​n−1​​）变换为（a​n−m​​⋯a​n−1​​a​0​​a​1​​⋯a​n−m−1​​）（最后m个数循环移至最前面的m个位置）。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int ArrayShift( int a[], int n, int m );</p><p style=""text-align: left;"">其中a[]是用户传入的数组；n是数组的大小；m是右移的位数。函数ArrayShift须将循环右移后的数组仍然存在a[]中。</p>","<p style=""text-align: left;"">第一行两个整数n和m。</p><p style=""text-align: left;"">接下来一行n个整数，代表数组a。</p>","<p>一行n个整数，代表循环右移后的数组a。<br /></p>","[{""input"": ""6 2\n1 2 3 4 5 6\n"", ""output"": ""5 6 1 2 3 4""}]","6ee0d05159aecb8972afaf547032bc05","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:03:57.408929+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",241,95,1,"8-3","{""0"": 95, ""1"": 2, ""4"": 23, ""-1"": 114, ""-2"": 7}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
294,"报数","<p style=""text-align: left;"">报数游戏是这样的：有n个人围成一圈，按顺序从1到n编好号。从第一个人开始报数，报到m（&lt;n）的人退出圈子；下一个人从1开始报数，报到m的人退出圈子。如此下去，直到留下最后一个人。</p><p style=""text-align: left;"">本题要求编写函数，给出每个人的退出顺序编号。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void CountOff( int n, int m, int out[] );</p><p style=""text-align: left;"">其中n是初始人数；m是游戏规定的退出位次（保证为小于n的正整数）。函数CountOff将每个人的退出顺序编号存在数组out[]中。因为C语言数组下标是从0开始的，所以第i个位置上的人是第out[i-1]个退出的。</p>","<p>一行两个整数n和m。<br /></p>","<p>一行n个整数，代表依次退出的人的编号。<br /></p>","[{""input"": ""11 3"", ""output"": ""4 10 1 7 5 2 11 9 3 6 8""}]","988e7dbcc4f5faea4354203cb82f1482","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:05:26.084918+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",186,80,1,"8-4","{""0"": 80, ""1"": 12, ""4"": 45, ""-1"": 35, ""-2"": 14}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
295,"使用函数实现字符串部分复制","<p style=""text-align: left;"">本题要求编写函数，将输入字符串t中从第m个字符开始的全部字符复制到字符串s中。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void strmcpy( char *t, int m, char *s );</p><p style=""text-align: left;"">函数strmcpy将输入字符串char *t中从第m个字符开始的全部字符复制到字符串char *s中。若m超过输入字符串的长度，则结果字符串应为空串。</p>","<p>第一行一个整数m。</p><p>第二行一个字符串t。</p>","<p>一个字符串s。<br /></p>","[{""input"": ""7\nhappy new year\n"", ""output"": ""new year""}]","43f20450615b45df9fc34203cf7a429b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:06:51.324026+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",352,88,1,"8-5","{""0"": 88, ""1"": 1, ""4"": 62, ""-1"": 149, ""-2"": 52}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
296,"删除字符","<p style=""text-align: left;"">本题要求实现一个删除字符串中的指定字符的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void delchar( char *str, char c );</p><p style=""text-align: left;"">其中char *str是传入的字符串，c是待删除的字符。函数delchar的功能是将字符串str中出现的所有c字符删除。</p>","<p>第一行一个字符c。</p><p>第二行一个字符串str。</p>","<p>一行一个字符串，表示字符串str删除字符c后的字符串。<br /></p>","[{""input"": ""a\nhappy new year\n"", ""output"": ""hppy new yer""}]","a34f473b4292dafc539df8fa5bec652e","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:08:04.629639+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",431,84,1,"8-6","{""0"": 84, ""1"": 1, ""4"": 46, ""-1"": 257, ""-2"": 43}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
297,"字符串排序","<p>本题要求编写程序，读入5个字符串，按由小到大的顺序输出。<br /></p>","<p>输入为由空格分隔的5个非空字符串，每个字符串不包括空格、制表符、换行符等空白字符，长度小于80。<br /></p>","<p style=""text-align: left;"">按照以下格式输出排序后的结果：</p><p style=""text-align: left;"">After sorted:</p><p style=""text-align: left;"">每行一个字符串</p>","[{""input"": ""red yellow blue green white"", ""output"": ""After sorted:\nblue\ngreen\nred\nwhite\nyellow""}]","867ed10058ca04612b74cf1cdafaabdd","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:09:22.802074+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",234,88,1,"8-7","{""0"": 88, ""1"": 2, ""4"": 37, ""-1"": 93, ""-2"": 14}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
298,"判断回文字符串","<p style=""text-align: left;"">本题要求编写函数，判断给定的一串字符是否为“回文”。所谓“回文”是指顺读和倒读都一样的字符串。如“XYZYX”和“xyzzyx”都是回文。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">bool palindrome( char *s );</p><p style=""text-align: left;"">函数palindrome判断输入字符串char *s是否为回文。若是则返回true，否则返回false。</p>","<p>一行一个字符串。<br /></p>","<p>输出一行。若是回文，输出‘Yes’，否则输出‘No’。（不包括引号）<br /></p>","[{""input"": ""thisistrueurtsisiht"", ""output"": ""Yes""}]","c5a831287b793d91a522fc86541d4b2c","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:12:39.974636+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",226,91,1,"8-8","{""0"": 91, ""2"": 1, ""4"": 27, ""-1"": 51, ""-2"": 56}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
299,"分类统计各类字符个数","<p style=""text-align: left;"">本题要求实现一个函数，统计给定字符串中的大写字母、小写字母、空格、数字以及其它字符各有多少。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void StringCount( char *s );</p><p style=""text-align: left;"">其中char *s是用户传入的字符串。函数StringCount须在一行内按照</p><p style=""text-align: left;"">大写字母个数 小写字母个数 空格个数 数字个数 其它字符个数 (注： 换行符也算字符）</p><p style=""text-align: left;"">的格式输出。</p>","<p>若干行字符串<br /></p>","<p>一行5个整数。<br /></p>","[{""input"": ""aZ&*?\n093 Az"", ""output"": ""2 2 1 3 4""}]","b4b731fde35d6ff6ce09b65751f18b31","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:14:30.725177+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",315,88,1,"8-9","{""0"": 88, ""1"": 2, ""4"": 28, ""-1"": 157, ""-2"": 40}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
300,"输出学生成绩","<p style=""text-align: left;"">本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。</p><p style=""text-align: left;"">注意：使用动态内存分配来实现！！！</p>","<p>输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。<br /></p>","<p style=""text-align: left;"">按照以下格式输出：</p><p style=""text-align: left;"">average =平均成绩</p><p style=""text-align: left;"">max =最高成绩</p><p style=""text-align: left;"">min =最低成绩</p><p style=""text-align: left;"">结果均保留两位小数。</p>","[{""input"": ""3\n85 90 95\n"", ""output"": ""average = 90.00\nmax = 95.00\nmin = 85.00\n""}]","2bed0b2fa06f6b7e51ecfd9a3813a7be","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-10-17 14:16:00.525738+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",241,95,1,"8-10","{""0"": 95, ""4"": 20, ""-1"": 114, ""-2"": 12}",0,28,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
301,"拆分实数的整数与小数部分","<p style=""text-align: left;"">本题要求实现一个拆分实数的整数与小数部分的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void splitfloat( float x, int *intpart, float *fracpart);</p><p style=""text-align: left;"">其中x是被拆分的实数（0≤x&lt;10000），*intpart和*fracpart分别是将实数x拆分出来的整数部分与小数部分。</p><p>请实现函数接口，并在主函数中调用它。</p>","<p>一行一个浮点数x。<br /></p>","<p>一行两个数，分别表示x的整数部分和小数部分。（小数保留三位小数）<br /></p>","[{""input"": ""2.718"", ""output"": ""2 0.718""}]","a2ee28c77030e598888c31b8bc41f375","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-18 07:48:37.534234+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",49,33,1,"1-130","{""0"": 33, ""4"": 1, ""-1"": 11, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
302,"在数组中查找指定元素","<p style=""text-align: left;"">本题要求实现一个在数组中查找指定元素的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int search( int list[], int n, int x );</p><p style=""text-align: left;"">其中list[]是用户传入的数组；n（≥0）是list[]中元素的个数；x是待查找的元素。如果找到</p><p style=""text-align: left;"">则函数search返回相应元素的最小下标（下标从0开始），否则返回−1。</p>","<p>第一行一个整数n。</p><p>接下来一行n个整数代表数组a。</p><p>最后一行一个整数表示要查找的元素x。</p>","<p>输出下标或-1。<br /></p>","[{""input"": ""5\n1 2 2 5 4\n2\n"", ""output"": ""1""}, {""input"": ""5\n1 2 2 5 4\n0\n"", ""output"": ""-1""}]","4dab22a30a637f5b976553bf89d45a08","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-18 07:48:43.374413+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",52,36,1,"1-131","{""0"": 36, ""4"": 5, ""-1"": 7, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
303,"数组循环右移","<p style=""text-align: left;"">本题要求实现一个对数组进行循环右移的简单函数：一个数组a中存有n（&gt;0）个整数，将每个整数循环向右移m（≥0）个位置，即将a中的数据由（a​0​​a​1​​⋯a​n−1​​）变换为（a​n−m​​⋯a​n−1​​a​0​​a​1​​⋯a​n−m−1​​）（最后m个数循环移至最前面的m个位置）。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int ArrayShift( int a[], int n, int m );</p><p style=""text-align: left;"">其中a[]是用户传入的数组；n是数组的大小；m是右移的位数。函数ArrayShift须将循环右移后的数组仍然存在a[]中。</p>","<p style=""text-align: left;"">第一行两个整数n和m。</p><p style=""text-align: left;"">接下来一行n个整数，代表数组a。</p>","<p>一行n个整数，代表循环右移后的数组a。<br /></p>","[{""input"": ""6 2\n1 2 3 4 5 6\n"", ""output"": ""5 6 1 2 3 4""}]","6ee0d05159aecb8972afaf547032bc05","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-18 07:48:49.205583+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",56,32,1,"1-132","{""0"": 32, ""4"": 4, ""-1"": 15, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
304,"报数","<p style=""text-align: left;"">报数游戏是这样的：有n个人围成一圈，按顺序从1到n编好号。从第一个人开始报数，报到m（&lt;n）的人退出圈子；下一个人从1开始报数，报到m的人退出圈子。如此下去，直到留下最后一个人。</p><p style=""text-align: left;"">本题要求编写函数，给出每个人的退出顺序编号。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void CountOff( int n, int m, int out[] );</p><p style=""text-align: left;"">其中n是初始人数；m是游戏规定的退出位次（保证为小于n的正整数）。函数CountOff将每个人的退出顺序编号存在数组out[]中。因为C语言数组下标是从0开始的，所以第i个位置上的人是第out[i-1]个退出的。</p>","<p>一行两个整数n和m。<br /></p>","<p>一行n个整数，代表依次退出的人的编号。<br /></p>","[{""input"": ""11 3"", ""output"": ""4 10 1 7 5 2 11 9 3 6 8""}]","988e7dbcc4f5faea4354203cb82f1482","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-10-18 07:48:55.641405+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",70,32,1,"1-133","{""0"": 32, ""1"": 6, ""4"": 5, ""-1"": 12, ""-2"": 15}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
305,"使用函数实现字符串部分复制","<p style=""text-align: left;"">本题要求编写函数，将输入字符串t中从第m个字符开始的全部字符复制到字符串s中。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void strmcpy( char *t, int m, char *s );</p><p style=""text-align: left;"">函数strmcpy将输入字符串char *t中从第m个字符开始的全部字符复制到字符串char *s中。若m超过输入字符串的长度，则结果字符串应为空串。</p>","<p>第一行一个整数m。</p><p>第二行一个字符串t。</p>","<p>一个字符串s。<br /></p>","[{""input"": ""7\nhappy new year\n"", ""output"": ""new year""}]","43f20450615b45df9fc34203cf7a429b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-18 07:49:01.078237+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",124,47,1,"1-134","{""0"": 47, ""4"": 15, ""-1"": 51, ""-2"": 11}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
306,"删除字符","<p style=""text-align: left;"">本题要求实现一个删除字符串中的指定字符的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void delchar( char *str, char c );</p><p style=""text-align: left;"">其中char *str是传入的字符串，c是待删除的字符。函数delchar的功能是将字符串str中出现的所有c字符删除。</p>","<p>第一行一个字符c。</p><p>第二行一个字符串str。</p>","<p>一行一个字符串，表示字符串str删除字符c后的字符串。<br /></p>","[{""input"": ""a\nhappy new year\n"", ""output"": ""hppy new yer""}]","3cc312f60e1d1657a1a98b64106e9207","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-18 07:49:06.066386+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",140,38,1,"1-135","{""0"": 38, ""4"": 15, ""-1"": 81, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
307,"字符串排序","<p>本题要求编写程序，读入5个字符串，按由小到大的顺序输出。<br /></p>","<p>输入为由空格分隔的5个非空字符串，每个字符串不包括空格、制表符、换行符等空白字符，长度小于80。<br /></p>","<p style=""text-align: left;"">按照以下格式输出排序后的结果：</p><p style=""text-align: left;"">After sorted:</p><p style=""text-align: left;"">每行一个字符串</p>","[{""input"": ""red yellow blue green white"", ""output"": ""After sorted:\nblue\ngreen\nred\nwhite\nyellow""}]","867ed10058ca04612b74cf1cdafaabdd","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-18 07:49:11.510282+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",104,34,1,"1-136","{""0"": 34, ""4"": 14, ""-1"": 48, ""-2"": 8}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
308,"判断回文字符串","<p style=""text-align: left;"">本题要求编写函数，判断给定的一串字符是否为“回文”。所谓“回文”是指顺读和倒读都一样的字符串。如“XYZYX”和“xyzzyx”都是回文。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">bool palindrome( char *s );</p><p style=""text-align: left;"">函数palindrome判断输入字符串char *s是否为回文。若是则返回true，否则返回false。</p>","<p>一行一个字符串。<br /></p>","<p>输出一行。若是回文，输出‘Yes’，否则输出‘No’。（不包括引号）<br /></p>","[{""input"": ""thisistrueurtsisiht"", ""output"": ""Yes""}]","c5a831287b793d91a522fc86541d4b2c","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-18 07:49:18.262291+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",75,39,1,"1-137","{""0"": 39, ""4"": 10, ""-1"": 18, ""-2"": 8}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
309,"分类统计各类字符个数","<p style=""text-align: left;"">本题要求实现一个函数，统计给定字符串中的大写字母、小写字母、空格、数字以及其它字符各有多少。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void StringCount( char *s );</p><p style=""text-align: left;"">其中char *s是用户传入的字符串。函数StringCount须在一行内按照</p><p style=""text-align: left;"">大写字母个数 小写字母个数 空格个数 数字个数 其它字符个数</p><p style=""text-align: left;"">的格式输出。</p>","<p>若干行字符串<br /></p>","<p>一行5个整数。<br /></p>","[{""input"": ""aZ&*?\n093 Az"", ""output"": ""2 2 1 3 4""}]","b4b731fde35d6ff6ce09b65751f18b31","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-18 07:49:24.12127+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",113,38,1,"1-138","{""0"": 38, ""4"": 11, ""-1"": 55, ""-2"": 9}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
310,"输出学生成绩","<p style=""text-align: left;"">本题要求编写程序，根据输入学生的成绩，统计并输出学生的平均成绩、最高成绩和最低成绩。</p><p style=""text-align: left;"">注意：使用动态内存分配来实现！！！</p>","<p>输入第一行首先给出一个正整数N，表示学生的个数。接下来一行给出N个学生的成绩，数字间以空格分隔。<br /></p>","<p style=""text-align: left;"">按照以下格式输出：</p><p style=""text-align: left;"">average =平均成绩</p><p style=""text-align: left;"">max =最高成绩</p><p style=""text-align: left;"">min =最低成绩</p><p style=""text-align: left;"">结果均保留两位小数。</p>","[{""input"": ""3\n85 90 95\n"", ""output"": ""average = 90.00\nmax = 95.00\nmin = 85.00\n""}]","2bed0b2fa06f6b7e51ecfd9a3813a7be","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-10-18 07:50:29.731538+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",69,32,1,"1-139","{""0"": 32, ""4"": 11, ""-1"": 19, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
311,"吃豆子（15分）","<p>给你一个数组，数组上的每个位置都有一定数量的豆子，现在吃豆人会进行若干次操作，每次操作给定一个坐标x，吃豆人会把位于坐标x上位置的豆子都吃掉，同时位于x位置右边的位置都会向左移动一格。具体来说，x+1位置上的豆子转移到x位置，x+2位置上的豆子转移到x+1位置，以此类推。</p><p>每次操作，如果吃豆人发现x位置上已经没豆子了，输出0，否则输出吃到的豆子数。</p>","<p>第一行两个整数n和m，分别表示数组长度和操作次数。（1&lt;=n,m&lt;=1000）</p><p>第二行有n个整数，代表初始每个位置上的豆子数d[i]。（1&lt;=d[i]&lt;=1000）</p><p>接下来m行，每行一个整数，代表该次操作的位置pos。（1&lt;=pos&lt;=n）</p>","<p>对于每次操作，输出一行，代表该次吃豆人吃到的豆子。<br /></p>","[{""input"": ""3 2\n2 3 1\n2\n3\n"", ""output"": ""3\n0\n""}]","a67f24c2db53f48aeca237baaa1a233e","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-31 12:44:38.140683+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",173,20,1,"1","{""0"": 20, ""2"": 1, ""4"": 5, ""-1"": 134, ""-2"": 13}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
312,"复读机（15分）","<p>复读机就是可以把声音存储下来并且重复播放的一种机器。现在有一个复读机，它可以把你的输入保留信息输出。但是，这个复读机有一个毛病，它在某些时刻会重复当前的语句不止一遍，而在正常时刻只会复读一遍，现在请你输出复读后的语句。<br /></p>","<p>第一行一个整数n和m，分别表示有n个时刻复读机将重复不止一遍，m表示有m个语句。（1 &lt;= n&lt;= m &lt;= 100）</p><p>接下来n行每行两个整数t和c，表示在t时刻的语句重复c遍。（1 &lt;= t&lt;= m, 2 &lt;= c &lt;= 10）</p><p>接下来一行m个整数，第i个整数pi，表示第i个时刻输入的句子。（1 &lt;= pi &lt;=10）</p>","<p>若干个整数，每个整数后一个空格。<br /></p>","[{""input"": ""2 3\n1 2\n2 3\n1 2 3\n"", ""output"": ""1 1 2 2 2 3""}]","df0cd308f1e69b6d7a8e9a2fb6bea65b","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-31 12:46:41.295077+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",77,21,1,"2","{""0"": 21, ""4"": 2, ""-1"": 53, ""-2"": 1}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
313,"判断数据类型（10分）","<p>假设现在你要判断数据类型是否为int、long long、double，输入n个字符串，请你判断其代表的数据类型是什么，且输入的每个字符串保证是正数，且是这三种类型的一种。<br /></p>","<p>第一行一个整数n。（n&lt;=10）</p><p>接下来n行每行一个字符串s。(|s|&lt;=10)</p>","<p>对于每个字符串s，输出“int”或“long long”或“double”。<br /></p>","[{""input"": ""3\n12\n9999999999\n123.44\n"", ""output"": ""int\nlong long\ndouble\n""}]","7a4f606f3bbcdfb62afffb6931cfb4b3","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-31 12:47:56.589628+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",43,7,1,"3","{""0"": 7, ""4"": 1, ""-1"": 34, ""-2"": 1}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
314,"使用函数判断三角形（10分）","<p>给定n个可选的木棍长度，问是否能够选出3个构成三角形。</p><p>注意，你需要实现一个函数ok，来判断传入的三个边长能否构成三角形。</p><p><b>函数接口定义：</b></p><p>int isTriangle( int x, int y, int z);</p><p>传入三个边长参数x，y，z，是三角形返回1，否则0。</p>","<p>第一行一个整数n。（3&lt;=n&lt;=20）</p><p>第二行n个整数，代表木棍长度a[i]。(1&lt;=a[i]&lt;=10^8)</p>","<p>若能够选出3个构成三角形，输出最小的三角形周长，否则输出“No”。<br /></p>","[{""input"": ""3\n1 2 3\n"", ""output"": ""No""}, {""input"": ""3\n1 2 2\n"", ""output"": ""5""}]","4aac7552a50f872b7e5a752d94c3fd15","[{""score"": 13, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 13, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 13, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 13, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 13, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 13, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 13, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 13, ""input_name"": ""8.in"", ""output_name"": ""8.out""}]","","[""C""]","{}","2019-10-31 12:49:26.131573+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",122,21,1,"4","{""0"": 21, ""1"": 2, ""4"": 24, ""-1"": 60, ""-2"": 15}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
315,"使用函数求双阶乘（15分）","<p>双阶乘是一个数学概念，用n!!表示。正整数的双阶乘表示不超过这个正整数且与它有相同奇偶性的所有正整数乘积。</p><p>本题要求实现双阶乘函数fac(x)。</p><p><b>函数接口定义：</b></p><p>long long fac( int x );</p><p>其中x是用户传入的整型参数，返回双阶乘。</p>","<p>一行一个正整数n。（1&lt;=n&lt;=20，保证答案不超过long long范围）<br /></p>","<p>一行一个整数表示答案。(格式控制说明为‘%lld’)<br /></p>","[{""input"": ""4"", ""output"": ""8""}]","e90ce4cabae10862283fdd3a9f823477","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-10-31 12:50:23.644626+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",71,29,1,"5","{""0"": 29, ""4"": 3, ""-1"": 38, ""-2"": 1}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
316,"映射（15分）","<p>给定两个长度为n的全排列a，b（全排列即长度为n的数组，且数组中的元素各不相同），对于第一个全排列的每个数a[i]，输出其在第二个全排列b中出现的位置。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>第二行n个不同的正整数，表示全排列a。（1&lt;=a[i]&lt;=n）</p><p>第三行n个不同的正整数，表示全排列b。（1&lt;=b[i]&lt;=n）</p>","<p>一行n个整数，第i个数表示a[i]在全排列b中出现的位置。（以空格隔开，行末无空格）<br /></p>","[{""input"": ""3\n2 3 1\n1 3 2\n"", ""output"": ""3 2 1""}]","a2b51eebee55cfc16da50b81677287c6","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-31 12:51:35.938501+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",41,28,1,"6","{""0"": 28, ""-1"": 13}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
317,"歌唱比赛（10分）","<p>歌唱比赛有n个裁判(n&gt;=3)，每个裁判会给当前这位歌手打分为[1,10]之间的一个整数，最终这个选手的得分为：去掉一个最高分和一个最低分之后的平均分。</p><p>现在已知小华同学的最终得分p，但是n个裁判给的得分中恰好有一个丢失了，即小华只知道n-1个裁判给出的得分，现在请你帮小华判断他的最终得分是否是对的（即是否存在第n个裁判给出某个分数q满足小华的最终得分为p）？</p>","<p>第一行一个正整数n和一个浮点数p。（3&lt;=n&lt;=100，1&lt;=p&lt;=10）</p><p>第二行n-1个正整数a[i]，表示n-1个裁判给出的得分。（1&lt;=a[i]&lt;=10）</p>","<p>若小华的最终得分是对的，输出“Yes”，否则输出“No”。<br /></p>","[{""input"": ""4 2.5\n1 2 3\n"", ""output"": ""Yes""}]","24796fe4e94a301d7b89cd5d9de77f92","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-10-31 12:52:48.530903+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",113,11,1,"7","{""0"": 11, ""1"": 3, ""4"": 7, ""-1"": 85, ""-2"": 7}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
318,"矩阵连乘（10分）","<p style=""text-align: start;"">矩阵的幂A^k = A * A * ... * A，其中两个矩阵A、B​的乘积会产生一个新矩阵C，且$C_{ij} = \sum_{k=1}^{m}A_{ik}*B_{kj}$​，其中矩阵A是一个n * m的数组，矩阵B的大小是一个m * t的数组。</p><p style=""text-align: start;"">现在给定一个方阵A和一个整数k，求A^k。</p>","<p style=""text-align: start;"">第一行两个整数n、k。$ (1&lt;=n、k&lt;=5) $</p><p style=""text-align: start;"">接下来n行，每行n个整数，表示输入的矩阵A。​$(-3 &lt;= A_{ij} &lt;= 3)$</p>","<p>输出n行，每行n个整数，以空格分隔，表示A^k。（注意：每一行行末无空格）<br /></p>","[{""input"": ""2 2\n1 1\n1 1"", ""output"": ""2 2\n2 2""}]","f5be94b20d67ad1ed87545d736077967","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-10-31 12:54:52.734192+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",76,12,1,"8","{""0"": 12, ""4"": 3, ""-1"": 54, ""-2"": 7}",0,29,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
319,"吃豆子（15分）","<p>给你一个数组，数组上的每个位置都有一定数量的豆子，现在吃豆人会进行若干次操作，每次操作给定一个坐标x，吃豆人会把位于坐标x上位置的豆子都吃掉，同时位于x位置右边的位置都会向左移动一格。具体来说，x+1位置上的豆子转移到x位置，x+2位置上的豆子转移到x+1位置，以此类推。</p><p>每次操作，如果吃豆人发现x位置上已经没豆子了，输出0，否则输出吃到的豆子数。</p>","<p>第一行两个整数n和m，分别表示数组长度和操作次数。（1&lt;=n,m&lt;=1000）</p><p>第二行有n个整数，代表初始每个位置上的豆子数d[i]。（1&lt;=d[i]&lt;=1000）</p><p>接下来m行，每行一个整数，代表该次操作的位置pos。（1&lt;=pos&lt;=n）</p>","<p>对于每次操作，输出一行，代表该次吃豆人吃到的豆子。<br /></p>","[{""input"": ""3 2\n2 3 1\n2\n3\n"", ""output"": ""3\n0\n""}]","9074cdb2d1a64ca66ec9831c866daec7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:26:26.366205+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",46,18,1,"1-140","{""0"": 18, ""4"": 2, ""-1"": 21, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
320,"复读机（15分）","<p>复读机就是可以把声音存储下来并且重复播放的一种机器。现在有一个复读机，它可以把你的输入保留信息输出。但是，这个复读机有一个毛病，它在某些时刻会重复当前的语句不止一遍，而在正常时刻只会复读一遍，现在请你输出复读后的语句。<br /></p>","<p>第一行一个整数n和m，分别表示有n个时刻复读机将重复不止一遍，m表示有m个语句。（1 &lt;= n&lt;= m &lt;= 100）</p><p>接下来n行每行两个整数t和c，表示在t时刻的语句重复c遍。（1 &lt;= t&lt;= m, 2 &lt;= c &lt;= 10）</p><p>接下来一行m个整数，第i个整数pi，表示第i个时刻输入的句子。（1 &lt;= pi &lt;=10）</p>","<p>若干个整数，每个整数后一个空格。<br /></p>","[{""input"": ""2 3\n1 2\n2 3\n1 2 3\n"", ""output"": ""1 1 2 2 2 3""}]","bf71ff9e4259f7fb96e29e097dd52280","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:26:32.303241+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",29,10,1,"1-141","{""0"": 10, ""-1"": 15, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
321,"判断数据类型（10分）","<p>假设现在你要判断数据类型是否为int、long long、double，输入n个字符串，请你判断其代表的数据类型是什么，且输入的每个字符串保证是正数，且是这三种类型的一种。<br /></p>","<p>第一行一个整数n。（n&lt;=10）</p><p>接下来n行每行一个字符串s。(|s|&lt;=10)</p>","<p>对于每个字符串s，输出“int”或“long long”或“double”。<br /></p>","[{""input"": ""3\n12\n9999999999\n123.44\n"", ""output"": ""int\nlong long\ndouble\n""}]","abda7224f494b70aeda3f016be19264d","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:26:37.573407+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",92,19,1,"1-142","{""0"": 19, ""4"": 4, ""-1"": 48, ""-2"": 21}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
322,"使用函数判断三角形（10分）","<p>给定n个可选的木棍长度，问是否能够选出3个构成三角形。</p><p>注意，你需要实现一个函数ok，来判断传入的三个边长能否构成三角形。</p><p><b>函数接口定义：</b></p><p>int isTriangle( int x, int y, int z);</p><p>传入三个边长参数x，y，z，是三角形返回1，否则0。</p>","<p>第一行一个整数n。（3&lt;=n&lt;=20）</p><p>第二行n个整数，代表木棍长度a[i]。(1&lt;=a[i]&lt;=10^8)</p>","<p>若能够选出3个构成三角形，输出最小的三角形周长，否则输出“No”。<br /></p>","[{""input"": ""3\n1 2 3\n"", ""output"": ""No""}, {""input"": ""3\n1 2 2\n"", ""output"": ""5""}]","9994181c5531917448cd26c66084661c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:26:44.452973+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",23,12,1,"1-143","{""0"": 12, ""1"": 1, ""-1"": 8, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
323,"使用函数求双阶乘（15分）","<p>双阶乘是一个数学概念，用n!!表示。正整数的双阶乘表示不超过这个正整数且与它有相同奇偶性的所有正整数乘积。</p><p>本题要求实现双阶乘函数fac(x)。</p><p><b>函数接口定义：</b></p><p>long long fac( int x );</p><p>其中x是用户传入的整型参数，返回双阶乘。</p>","<p>一行一个正整数n。（1&lt;=n&lt;=20，保证答案不超过long long范围）<br /></p>","<p>一行一个整数表示答案。(格式控制说明为‘%lld’)<br /></p>","[{""input"": ""4"", ""output"": ""8""}]","a6e1e036d19c1610edefb7faa2ee6fc6","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:26:49.38906+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",12,8,1,"1-144","{""0"": 8, ""-1"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
324,"映射（15分）","<p>给定两个长度为n的全排列a，b（全排列即长度为n的数组，且数组中的元素各不相同），对于第一个全排列的每个数a[i]，输出其在第二个全排列b中出现的位置。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>第二行n个不同的正整数，表示全排列a。（1&lt;=a[i]&lt;=n）</p><p>第三行n个不同的正整数，表示全排列b。（1&lt;=b[i]&lt;=n）</p>","<p>一行n个整数，第i个数表示a[i]在全排列b中出现的位置。（以空格隔开，行末无空格）<br /></p>","[{""input"": ""3\n2 3 1\n1 3 2\n"", ""output"": ""3 2 1""}]","72e47fd92d8c421e78333c0e29a64b54","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:27:36.769986+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",10,8,1,"1-145","{""0"": 8, ""4"": 1, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
325,"歌唱比赛（10分）","<p>歌唱比赛有n个裁判(n&gt;=3)，每个裁判会给当前这位歌手打分为[1,10]之间的一个整数，最终这个选手的得分为：去掉一个最高分和一个最低分之后的平均分。</p><p>现在已知小华同学的最终得分p，但是n个裁判给的得分中恰好有一个丢失了，即小华只知道n-1个裁判给出的得分，现在请你帮小华判断他的最终得分是否是对的（即是否存在第n个裁判给出某个分数q满足小华的最终得分为p）？</p>","<p>第一行一个正整数n和一个浮点数p。（3&lt;=n&lt;=100，1&lt;=p&lt;=10）</p><p>第二行n-1个正整数a[i]，表示n-1个裁判给出的得分。（1&lt;=a[i]&lt;=10）</p>","<p>若小华的最终得分是对的，输出“Yes”，否则输出“No”。<br /></p>","[{""input"": ""4 2.5\n1 2 3\n"", ""output"": ""Yes""}]","24796fe4e94a301d7b89cd5d9de77f92","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:27:41.704897+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",55,21,1,"1-146","{""0"": 21, ""1"": 1, ""4"": 6, ""-1"": 22, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
326,"矩阵连乘（10分）","<p style=""text-align: start;"">矩阵的幂A^k = A * A * ... * A，其中两个矩阵A、B​的乘积会产生一个新矩阵C，且$C_{ij} = \sum_{k=1}^{m}A_{ik}*B_{kj}$​，其中矩阵A是一个n * m的数组，矩阵B的大小是一个m * t的数组。</p><p style=""text-align: start;"">现在给定一个方阵A和一个整数k，求A^k。</p>","<p style=""text-align: start;"">第一行两个整数n、k。$ (1&lt;=n、k&lt;=5) $</p><p style=""text-align: start;"">接下来n行，每行n个整数，表示输入的矩阵A。​$(-3 &lt;= A_{ij} &lt;= 3)$</p>","<p>输出n行，每行n个整数，以空格分隔，表示A^k。（注意：每一行行末无空格）<br /></p>","[{""input"": ""2 2\n1 1\n1 1"", ""output"": ""2 2\n2 2""}]","f59fad448378da061f836285a1adf6ec","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-11-09 05:27:46.627053+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",48,13,1,"1-147","{""0"": 13, ""-1"": 25, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
327,"判断满足条件的三位数","<p style=""text-align: left;"">本题要求实现一个函数，统计给定区间内的三位数中有两位数字相同的完全平方数（如144、676）的个数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int search( int n );</p><p style=""text-align: left;"">其中传入的参数int n是一个三位数的正整数（最高位数字非0）。函数search返回[101, n]区间内所有满足条件的数的个数。</p>","<p>一行一个正整数n。（101&lt;=n&lt;=999）<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""500"", ""output"": ""6""}]","fa8db9473c9e175997dd0a34c7509a1c","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:50:45.959729+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",138,92,1,"1","{""0"": 92, ""1"": 2, ""4"": 4, ""-1"": 30, ""-2"": 10}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
328,"递归求阶乘和","<p style=""text-align: left;"">本题要求实现一个计算非负整数阶乘的简单函数，并利用该函数求1!+2!+3!+...+n!的值。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double fact( int n );</p><p style=""text-align: left;"">double factsum( int n );</p><p style=""text-align: left;"">函数fact应返回n的阶乘，建议用递归实现。函数factsum应返回1!+2!+...+n!的值。题目保证输入输出在双精度范围内。</p>","<pre><code>一行一个非负整数<span>n</span>。（<span>n &gt;= 0</span>）</code></pre>","<p>第一行输出fact(n)的值。</p><p>第二行输出factsum(n)的值。（两个数均保留0位小数）</p>","[{""input"": ""10"", ""output"": ""3628800\n4037913""}]","e8f40b37194828aae16fdacd85b26e14","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:52:49.848998+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",241,96,1,"2","{""0"": 96, ""1"": 5, ""2"": 4, ""4"": 55, ""-1"": 71, ""-2"": 10}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
329,"递归实现指数函数","<p style=""text-align: left;"">本题要求实现一个计算x^​n​​（n≥1）的函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double calc_pow( double x, int n );</p><p style=""text-align: left;"">函数calc_pow应返回x的n次幂的值。建议用递归实现。题目保证结果在双精度范围内。</p>","<p>一行两个数，实数x和整数n。(n&gt;=1)<br /></p>","<p>一行一个数表示答案。（保留0位小数）<br /></p>","[{""input"": ""2 3"", ""output"": ""8""}]","62c67a3a580bd2bf68158df3e50a109d","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:53:55.082059+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",143,93,1,"3","{""0"": 93, ""4"": 7, ""-1"": 33, ""-2"": 10}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
330,"递归求简单交错幂级数的部分和","<p style=""text-align: left;"">本题要求实现一个函数，计算下列简单交错幂级数的部分和：</p><p style=""text-align: left;"">f(x,n)=x−x^​2​​+x^​3​​−x^​4​​+⋯+(−1)^(n−1)*​​x^​n​​</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double fn( double x, int n );</p><p style=""text-align: left;"">其中题目保证传入的n是正整数，并且输入输出都在双精度范围内。函数fn应返回上述级数的部分和。建议尝试用递归实现。</p>","<p>一行两个数，实数x和正整数n。<br /></p>","<p>一行一个数表示fn(x,n)的值。（保留两位小数）<br /></p>","[{""input"": ""0.5 12"", ""output"": ""0.33""}]","5a2579cb7ccf2762bac4602d1887e7d9","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:56:02.025684+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",123,95,1,"4","{""0"": 95, ""-1"": 17, ""-2"": 11}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
331,"递归计算Ackermenn函数","<p style=""text-align: left;"">本题要求实现Ackermenn函数的计算，其函数定义如下：</p><p style=""text-align: left;""><img alt=""图片.png"" src=""/public/upload/aa5ccdd053.png"" width=""564"" height=""87"" /><br /></p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int Ack( int m, int n );</p><p style=""text-align: left;"">其中m和n是用户传入的非负整数。函数Ack返回Ackermenn函数的相应值。题目保证输入输出都在长整型</p>","<p>一行两个非负整数m和n。<br /></p>","<p>一行一个数表示Ack(m,n)的答案。<br /></p>","[{""input"": ""2 3"", ""output"": ""9""}]","64f1b9ed65c2ca45d7f74e9750ab3408","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:57:32.628607+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",111,95,1,"5","{""0"": 95, ""1"": 1, ""4"": 5, ""-1"": 8, ""-2"": 2}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
332,"递归求Fabonacci数列","<p style=""text-align: left;"">本题要求实现求Fabonacci数列项的函数。Fabonacci数列的定义如下：</p><p style=""text-align: left;"">f(n)=f(n−2)+f(n−1) (n≥2)，其中f(0)=0，f(1)=1。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int f( int n );</p><p style=""text-align: left;"">函数f应返回第n个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。</p>","<p>一行一个非负整数n。<br /></p>","<p>一行一个数表示f(n)的值。<br /></p>","[{""input"": ""6"", ""output"": ""8""}]","57251acd850bc5a39880104418be365b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:58:20.975316+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",144,95,1,"6","{""0"": 95, ""2"": 2, ""4"": 29, ""-1"": 13, ""-2"": 5}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
333,"十进制转换二进制","<p style=""text-align: left;"">本题要求实现一个函数，将自然数n转换为二进制后输出。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void dectobin( int n );</p><p style=""text-align: left;"">函数dectobin应在一行中打印出二进制的n。建议用递归实现。</p>","<p>一行一个自然数n。<br /></p>","<p>一行一个字符串表示二进制的n。<br /></p>","[{""input"": ""10"", ""output"": ""1010""}]","bbab4ddcb5859bdc177db73744c9fe91","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 14:59:12.154655+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",203,94,1,"7","{""0"": 94, ""1"": 3, ""4"": 9, ""-1"": 81, ""-2"": 16}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
334,"递归实现顺序输出整数","<p style=""text-align: left;"">本题要求实现一个函数，对一个整数进行按位顺序输出。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void printdigits( int n );</p><p style=""text-align: left;"">函数printdigits应将n的每一位数字从高位到低位顺序打印出来，每位数字占一行。</p>","<p>一行一个整数n。<br /></p>","<p>输出若干行，每行一个数字。<br /></p>","[{""input"": ""12345"", ""output"": ""1\n2\n3\n4\n5""}]","6856476d482c109791f60db508393c42","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 15:00:06.695156+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",168,96,1,"8","{""0"": 96, ""1"": 1, ""4"": 4, ""-1"": 57, ""-2"": 10}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
335,"递归统计素数个数","<p>输入n（n&lt;10）个整数，统计其中素数的个数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int countPrime( int n );</p><p style=""text-align: left;"">函数countPrime应返回输入前n个数中素数个数。</p>","<p>第一行一个正整数n。（1&lt;=n&lt;10）</p><p>第二行n个正整数a[1..n]。（1&lt;=a[i]&lt;=1000）</p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""3\n2 3 101\n"", ""output"": ""3""}]","f6b22a59df7cebf3d81c14b06ff388a8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 15:01:06.846679+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",219,86,1,"9","{""0"": 86, ""4"": 7, ""-1"": 112, ""-2"": 14}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
336,"三角形面积","<p>三角形面积为</p><p><img alt=""图片.png"" src=""/public/upload/71c0f4af56.png"" width=""554"" height=""27"" /><br /></p><p></p><p>其中a、b、c分别是三角形的3条边。请分别定义计算s和area的宏，再使用函数实现。比较两者在形式上和使用上的区别。</p>","<p>一行三个整数分别表示三角形的3条边。<br /></p>","<p>一行一个实数表示三角形的面积。（保留两位小数）<br /></p>","[{""input"": ""3 4 5"", ""output"": ""6.00""}]","f38b17fcd95c638f298f8b7993b7ea1d","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-14 15:02:09.691431+00",NULL,1,256,False,NULL,NULL,NULL,"ACM",True,"Low","",219,90,1,"10","{""0"": 90, ""4"": 1, ""-1"": 108, ""-2"": 20}",0,30,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
337,"时间换算","<p>本题要求编写程序，以<code>hh:mm:ss</code>的格式输出某给定时间再过<code>n</code>秒后的时间值（超过23:59:59就从0点开始计时）。<br /></p>","<p>输入在第一行中以<code>hh:mm:ss</code>的格式给出起始时间，第二行给出整秒数<font>n</font>。<br /></p>","<p>输出在一行中给出<code>hh:mm:ss</code>格式的结果时间。<br /></p>","[{""input"": ""11:59:40\n30"", ""output"": ""12:00:10""}]","cb7e6a33ae3c9a19eb4c3606d9c0d0a0","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 05:51:55.938707+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",255,91,358,"9-1","{""0"": 91, ""1"": 1, ""4"": 2, ""-1"": 150, ""-2"": 11}",0,31,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
338,"计算两个复数之积","<p>编写程序，利用结构变量求解两个复数之积 。<br /></p>","<p>分别输入四个个数代表第一个复数的实部和虚部和第二个复数的实部与虚部。</p>","<p>输出格式为   (a1+b1i) * (a2+b2i) = a + bi，a,b为计算出的复数积的实部与虚部。（注意空格）</p>","[{""input"": ""3 4 5 6"", ""output"": ""(3+4i) * (5+6i) = -9 + 38i""}]","bf046ede3fec9fc456a4014c4bbeedcf","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>提示： 求解 (al+a2i)*( bl+b2*i), 乘积的实部为：a1 * a2 - b1 * b2 ,   虚部为： a1 * b2 +a2 * b1。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 05:59:41.657712+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",149,93,358,"9-2","{""0"": 93, ""4"": 1, ""-1"": 52, ""-2"": 3}",0,31,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
339,"平面向量加法","<p>输入两个二维平面向量 Vl = ( x l , y l) 和 V2 = ( x2 , y2 ) 的分量，计算并输出两个向量的和向量。试编写相应程序<br /></p>","<p>输入在一行中按照“<span></span><span></span>x​1​​<span></span><span></span>y​1​​<span></span><span></span>x​2​​<span></span><span></span>y​2​​”的格式给出两个二维平面向量<span></span><span></span>v​1​​=(x​1​​,y​1​​)和<span></span><span></span>v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>在一行中按照<code>(x, y)</code>的格式输出和向量（逗号和y之间有空格），坐标输出小数点后一位（注意不能输出−0.0）。<br /></p>","[{""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""(-10.4, 6.0)""}]","9a31d2a4f40cafbc7966f9426c922ddc","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:02:53.864473+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",139,92,358,"9-3","{""0"": 92, ""4"": 3, ""-1"": 39, ""-2"": 5}",0,31,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
340,"查找书籍","<p>给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。<br /></p>","<p>输入第一行给出正整数n（&lt;10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。<br /></p>","<p>在一行中按照“价格, 书名”的格式先后输出价格最高和最低的书。价格保留2位小数。<br /></p>","[{""input"": ""3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0"", ""output"": ""25.00,Programming in Delphi\n18.50,Programming in VB""}]","94b7311c852eeed0f0306de195a94ab5","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:04:36.354693+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",343,94,358,"9-4","{""0"": 94, ""4"": 27, ""-1"": 201, ""-2"": 21}",0,31,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
341,"通讯录排序","<p>输入n个朋友的信息，包括姓名、生日、电话号码，本题要求编写程序，按照年龄从大到小的顺序依次输出通讯录。题目保证所有人的生日均不相同。<br /></p>","<p>输入第一行给出正整数n（&lt;10）。随后n行，每行按照“姓名 生日 电话号码”的格式给出一位朋友的信息，其中“姓名”是长度不超过10的英文字母组成的字符串，“生日”是<code>yyyymmdd</code>格式的日期，“电话号码”是不超过17位的数字及<code>+</code>、<code>-</code>组成的字符串。<br /></p>","<p>按照年龄从大到小输出朋友的信息，格式同输出<br /></p>","[{""input"": ""3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543"", ""output"": ""wang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678""}]","b0069fbcfd34dc8e37534592268bba47","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:06:16.01553+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",214,90,358,"9-5","{""0"": 90, ""4"": 39, ""-1"": 68, ""-2"": 17}",0,31,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
342,"按等级统计学生成绩","<p>输入n（n&lt;20）个学生的学号、姓名和成绩， 输出学生的成绩等级和不及格人数。每个学生的记录包括学号、姓名、成绩和等级，要求定义和调用函数 set_grade(), 根据学生成绩设置其等级，并统计不及格人数，等级设置：85-100 为 A , 70-84 为 B , 60-69 为 C , 0-59 为 D。 试编写相应程序。<br /></p>","<p>第一行输入学生人数n，接下来n行输入n个学生的学号 姓名 成绩<br /><br /></p>","<p>第一行输出不及格的人数   接下来逐行输出学号 姓名 等级。</p>","[{""input"": ""10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78"", ""output"": ""The count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B""}]","3684a96de3ae6da31197ffb709bef741","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:14:38.731487+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",220,88,358,"9-6","{""0"": 88, ""4"": 39, ""-1"": 80, ""-2"": 13}",0,31,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
343,"按等级统计学生成绩","<p>输入n（n&lt;20）个学生的学号、姓名和成绩， 输出学生的成绩等级和不及格人数。每个学生的记录包括学号、姓名、成绩和等级，要求定义和调用函数 set_grade(), 根据学生成绩设置其等级，并统计不及格人数，等级设置：85-100 为 A , 70-84 为 B , 60-69 为 C , 0-59 为 D。 试编写相应程序。<br /></p>","<p>第一行输入学生人数n，接下来n行输入n个学生的学号 姓名 成绩<br /><br /></p>","<p>第一行输出不及格的人数   接下来逐行输出学号 姓名 等级。</p>","[{""input"": ""10\n31001 annie 85\n31002 bonny 75\n31003 carol 70\n31004 dan 84\n31005 susan 90\n31006 paul 69\n31007 pam 60\n31008 apple 50\n31009 nancy 100\n31010 bob 78"", ""output"": ""The count for failed (<60): 1\nThe grades:\n31001 annie A\n31002 bonny B\n31003 carol B\n31004 dan B\n31005 susan A\n31006 paul C\n31007 pam C\n31008 apple D\n31009 nancy A\n31010 bob B""}]","3684a96de3ae6da31197ffb709bef741","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:15:55.222629+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",143,54,358,"1-148","{""0"": 54, ""4"": 4, ""-1"": 70, ""-2"": 15}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
344,"通讯录排序","<p>输入n个朋友的信息，包括姓名、生日、电话号码，本题要求编写程序，按照年龄从大到小的顺序依次输出通讯录。题目保证所有人的生日均不相同。<br /></p>","<p>输入第一行给出正整数n（&lt;10）。随后n行，每行按照“姓名 生日 电话号码”的格式给出一位朋友的信息，其中“姓名”是长度不超过10的英文字母组成的字符串，“生日”是<code>yyyymmdd</code>格式的日期，“电话号码”是不超过17位的数字及<code>+</code>、<code>-</code>组成的字符串。<br /></p>","<p>按照年龄从大到小输出朋友的信息，格式同输出<br /></p>","[{""input"": ""3\nzhang 19850403 13912345678\nwang 19821020 +86-0571-88018448\nqian 19840619 13609876543"", ""output"": ""wang 19821020 +86-0571-88018448\nqian 19840619 13609876543\nzhang 19850403 13912345678""}]","b0069fbcfd34dc8e37534592268bba47","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:16:05.152103+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",78,44,358,"1-149","{""0"": 44, ""4"": 2, ""-1"": 25, ""-2"": 7}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
345,"查找书籍","<p>给定n本书的名称和定价，本题要求编写程序，查找并输出其中定价最高和最低的书的名称和定价。<br /></p>","<p>输入第一行给出正整数n（&lt;10），随后给出n本书的信息。每本书在一行中给出书名，即长度不超过30的字符串，随后一行中给出正实数价格。题目保证没有同样价格的书。<br /></p>","<p>在一行中按照“价格, 书名”的格式先后输出价格最高和最低的书。价格保留2位小数。<br /></p>","[{""input"": ""3\nProgramming in C\n21.5\nProgramming in VB\n18.5\nProgramming in Delphi\n25.0"", ""output"": ""25.00, Programming in Delphi\n18.50, Programming in VB""}]","94b7311c852eeed0f0306de195a94ab5","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:16:11.586851+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",128,46,358,"1-150","{""0"": 46, ""4"": 8, ""-1"": 72, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
346,"平面向量加法","<p>输入两个二维平面向量 Vl = ( x l , y l) 和 V2 = ( x2 , y2 ) 的分量，计算并输出两个向量的和向量。试编写相应程序<br /></p>","<p>输入在一行中按照“<span></span><span></span>x​1​​<span></span><span></span>y​1​​<span></span><span></span>x​2​​<span></span><span></span>y​2​​”的格式给出两个二维平面向量<span></span><span></span>v​1​​=(x​1​​,y​1​​)和<span></span><span></span>v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>在一行中按照<code>(x, y)</code>的格式输出和向量（逗号和y之间有空格），坐标输出小数点后一位（注意不能输出−0.0）。<br /></p>","[{""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""(-10.4, 6.0)""}]","9a31d2a4f40cafbc7966f9426c922ddc","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:16:19.615049+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",65,42,358,"1-151","{""0"": 42, ""4"": 1, ""-1"": 21, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
347,"时间换算","<p>本题要求编写程序，以<code>hh:mm:ss</code>的格式输出某给定时间再过<code>n</code>秒后的时间值（超过23:59:59就从0点开始计时）。<br /></p>","<p>输入在第一行中以<code>hh:mm:ss</code>的格式给出起始时间，第二行给出整秒数<code>n</code>（&lt;60）。<br /></p>","<p>输出在一行中给出<code>hh:mm:ss</code>格式的结果时间。<br /></p>","[{""input"": ""11:59:40\n30"", ""output"": ""12:00:10""}]","cb7e6a33ae3c9a19eb4c3606d9c0d0a0","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:16:32.671905+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",103,41,358,"1-152","{""0"": 41, ""-1"": 58, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
348,"计算两个复数之积","<p>编写程序，利用结构变量求解两个复数之积 。<br /></p>","<p>分别输入四个个数代表第一个复数的实部和虚部和第二个复数的实部与虚部。</p>","<p>输出格式为   (a1+b1i) * (a2+b2i) = a + bi，a,b为计算出的复数积的实部与虚部。（注意空格）</p>","[{""input"": ""3 4 5 6"", ""output"": ""(3+4i) * (5+6i) = -9 + 38i""}]","bf046ede3fec9fc456a4014c4bbeedcf","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>提示： 求解 (al+a2i)*( bl+b2*i), 乘积的实部为：al * bl - a2 * b2 ,   虚部为： al * b2 +a2 * bl。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-11-18 06:17:04.82897+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",71,42,358,"1-153","{""0"": 42, ""-1"": 27, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
349,"判断满足条件的三位数","<p style=""text-align: left;"">本题要求实现一个函数，统计给定区间内的三位数中有两位数字相同的完全平方数（如144、676）的个数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int search( int n );</p><p style=""text-align: left;"">其中传入的参数int n是一个三位数的正整数（最高位数字非0）。函数search返回[101, n]区间内所有满足条件的数的个数。</p>","<p>一行一个正整数n。（101&lt;=n&lt;=999）<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""500"", ""output"": ""6""}]","fa8db9473c9e175997dd0a34c7509a1c","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-12-01 10:09:11.275567+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",43,29,1,"1-154","{""0"": 29, ""4"": 2, ""-1"": 3, ""-2"": 9}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
350,"递归求阶乘和","<p style=""text-align: left;"">本题要求实现一个计算非负整数阶乘的简单函数，并利用该函数求1!+2!+3!+...+n!的值。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double fact( int n );</p><p style=""text-align: left;"">double factsum( int n );</p><p style=""text-align: left;"">函数fact应返回n的阶乘，建议用递归实现。函数factsum应返回1!+2!+...+n!的值。题目保证输入输出在双精度范围内。</p>","<pre><code>一行一个非负整数<span>n</span>。（<span>n &gt;= 0</span>）</code></pre>","<p>第一行输出fact(n)的值。</p><p>第二行输出factsum(n)的值。（两个数均保留0位小数）</p>","[{""input"": ""10"", ""output"": ""3628800\n4037913""}]","e8f40b37194828aae16fdacd85b26e14","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-01 10:09:18.049335+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",71,37,1,"1-155","{""0"": 37, ""2"": 1, ""4"": 12, ""-1"": 16, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
351,"递归实现指数函数","<p style=""text-align: left;"">本题要求实现一个计算x^​n​​（n≥1）的函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double calc_pow( double x, int n );</p><p style=""text-align: left;"">函数calc_pow应返回x的n次幂的值。建议用递归实现。题目保证结果在双精度范围内。</p>","<p>一行两个数，实数x和整数n。(n&gt;=1)<br /></p>","<p>一行一个数表示答案。（保留0位小数）<br /></p>","[{""input"": ""2 3"", ""output"": ""8""}]","62c67a3a580bd2bf68158df3e50a109d","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C""]","{}","2019-12-01 10:09:22.592819+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",54,31,1,"1-156","{""0"": 31, ""4"": 1, ""-1"": 18, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
352,"递归求简单交错幂级数的部分和","<p style=""text-align: left;"">本题要求实现一个函数，计算下列简单交错幂级数的部分和：</p><p style=""text-align: left;"">f(x,n)=x−x^​2​​+x^​3​​−x^​4​​+⋯+(−1)^(n−1)*​​x^​n​​</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">double fn( double x, int n );</p><p style=""text-align: left;"">其中题目保证传入的n是正整数，并且输入输出都在双精度范围内。函数fn应返回上述级数的部分和。建议尝试用递归实现。</p>","<p>一行两个数，实数x和正整数n。<br /></p>","<p>一行一个数表示fn(x,n)的值。（保留两位小数）<br /></p>","[{""input"": ""0.5 12"", ""output"": ""0.33""}]","5a2579cb7ccf2762bac4602d1887e7d9","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-01 10:09:26.984262+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",39,30,1,"1-157","{""0"": 30, ""-1"": 4, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
353,"递归计算Ackermenn函数","<p style=""text-align: left;"">本题要求实现Ackermenn函数的计算，其函数定义如下：</p><p style=""text-align: left;""><img alt=""图片.png"" src=""/public/upload/aa5ccdd053.png"" width=""564"" height=""87"" /><br /></p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int Ack( int m, int n );</p><p style=""text-align: left;"">其中m和n是用户传入的非负整数。函数Ack返回Ackermenn函数的相应值。题目保证输入输出都在长整型</p>","<p>一行两个非负整数m和n。<br /></p>","<p>一行一个数表示Ack(m,n)的答案。<br /></p>","[{""input"": ""2 3"", ""output"": ""9""}]","64f1b9ed65c2ca45d7f74e9750ab3408","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-01 10:09:32.685122+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",40,36,1,"1-158","{""0"": 36, ""4"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
354,"递归求Fabonacci数列","<p style=""text-align: left;"">本题要求实现求Fabonacci数列项的函数。Fabonacci数列的定义如下：</p><p style=""text-align: left;"">f(n)=f(n−2)+f(n−1) (n≥2)，其中f(0)=0，f(1)=1。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">int f( int n );</p><p style=""text-align: left;"">函数f应返回第n个Fabonacci数。题目保证输入输出在长整型范围内。建议用递归实现。</p>","<p>一行一个非负整数n。<br /></p>","<p>一行一个数表示f(n)的值。<br /></p>","[{""input"": ""6"", ""output"": ""8""}]","57251acd850bc5a39880104418be365b","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-01 10:09:37.859267+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",73,44,1,"1-159","{""0"": 44, ""1"": 1, ""4"": 8, ""-1"": 10, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
355,"十进制转换二进制","<p style=""text-align: left;"">本题要求实现一个函数，将自然数n转换为二进制后输出。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void dectobin( int n );</p><p style=""text-align: left;"">函数dectobin应在一行中打印出二进制的n。建议用递归实现。</p>","<p>一行一个自然数n。<br /></p>","<p>一行一个字符串表示二进制的n。<br /></p>","[{""input"": ""10"", ""output"": ""1010""}]","bbab4ddcb5859bdc177db73744c9fe91","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-01 10:09:42.918573+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",72,39,1,"1-160","{""0"": 39, ""4"": 2, ""-1"": 19, ""-2"": 12}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
356,"递归实现顺序输出整数","<p style=""text-align: left;"">本题要求实现一个函数，对一个整数进行按位顺序输出。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void printdigits( int n );</p><p style=""text-align: left;"">函数printdigits应将n的每一位数字从高位到低位顺序打印出来，每位数字占一行。</p>","<p>一行一个整数n。<br /></p>","<p>输出若干行，每行一个数字。<br /></p>","[{""input"": ""12345"", ""output"": ""1\n2\n3\n4\n5""}]","6856476d482c109791f60db508393c42","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-01 10:09:48.05814+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",65,39,1,"1-161","{""0"": 39, ""1"": 1, ""4"": 1, ""-1"": 18, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
357,"递归统计素数个数","<p>输入n（n&lt;10）个整数，统计其中素数的个数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">void countPrime( int n );</p><p style=""text-align: left;"">函数countPrime应返回输入前n个数中素数个数。</p>","<p>第一行一个正整数n。（1&lt;=n&lt;10）</p><p>第二行n个正整数a[1..n]。（1&lt;=a[i]&lt;=1000）</p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""3\n2 3 101\n"", ""output"": ""3""}]","f6b22a59df7cebf3d81c14b06ff388a8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-01 10:09:53.177168+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",21,11,1,"1-162","{""0"": 11, ""-1"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
358,"三角形面积","<p>三角形面积为</p><p><img alt=""图片.png"" src=""/public/upload/71c0f4af56.png"" width=""554"" height=""27"" /><br /></p><p></p><p>其中a、b、c分别是三角形的3条边。请分别定义计算s和area的宏，再使用函数实现。比较两者在形式上和使用上的区别。</p>","<p>一行三个整数分别表示三角形的3条边。<br /></p>","<p>一行一个实数表示三角形的面积。（保留两位小数）<br /></p>","[{""input"": ""3 4 5"", ""output"": ""6.00""}]","f38b17fcd95c638f298f8b7993b7ea1d","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-01 10:09:57.885275+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",55,28,1,"1-163","{""0"": 28, ""-1"": 19, ""-2"": 8}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
359,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。可先输入一个k，接着输入一个字符串（字符串全是小写的英文字母）。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。</p>","<p>先输入距离k值，接着输入将要加密的字符串。</p>","<p>输出k值凯撒加密之后的字符串</p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","abf97544d27b36879ebdfda67df2818c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-01 13:46:06.46388+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",147,26,358,"1","{""0"": 26, ""2"": 1, ""4"": 23, ""-1"": 85, ""-2"": 12}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
360,"数组合并输出","<p>给定两个数组，每个数组中的整数都是从小到大排列。设计一个方法，将两个数组合并到一起，并从大到小输出合并后的结果。试着编写程序实现。<br /></p>","<p>输入k为两个数组的大小，然后读取两个数组的元素。<br /><br /></p>","<p>从大到小输出合并好的数组</p>","[{""input"": ""5\n1 4 6 7 8\n2 3 5 6 9"", ""output"": ""9 8 7 6 6 5 4 3 2 1""}]","9a97d2b7eb1af9330ef4ad9c60142d80","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-01 15:28:04.475173+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",172,12,358,"2","{""0"": 12, ""1"": 37, ""4"": 60, ""-1"": 51, ""-2"": 12}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
361,"比较字符串的相似性","<p>输入字符串A，和输入字符串B，计算B和A 的相似情况，判断两个字符串是否相似，如果相似输出Yes否则输出No<br /></p>","<p>分别输入字符串A和B，第一行输入是A，第二行输入是B。</p>","<p>输出判定后的结果，如果相似输出Yes否则输出No。</p>","[{""input"": ""heloopoojdancdascd\nasdcdancdkaksjcd\n"", ""output"": ""No""}, {""input"": ""hello world\nHllo world"", ""output"": ""Yes""}]","f25992a526fbb7c643fbef1c32067d38","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>相似情况计算：两个字符串同时出现的最大子串，记为 C 。相似情况为：sim=strlen(C)/strlen(A),而sim&gt;=0.5时候就判断为Yes否则判断为No。（区分大小写）<br /></p>","[""C""]","{}","2019-12-01 15:52:59.179896+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",70,14,358,"3","{""0"": 14, ""1"": 3, ""4"": 12, ""-1"": 39, ""-2"": 2}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
362,"单词排序","<p>输入一个字符串语句查看语句中的单词出现的次数，并按照出现的次数对单词从小到大排序<br /></p>","<p>输入一行包含多个单词的字符串语句A，每个单词用空格隔开。</p>","<p>按单词的次数从小到大输出对应的单词。</p>","[{""input"": ""white red red blue red"", ""output"": ""white blue red""}]","78609d6f2251e37ab7319a3719900537","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-02 01:31:57.394218+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",39,3,358,"4","{""0"": 3, ""1"": 1, ""2"": 1, ""4"": 9, ""-1"": 22, ""-2"": 3}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
363,"平面向量点积","<p>输入两个二维平面向量Vl = ( x1 , y1)和V2 = ( x2 , y2 )的分量，计算并输出两个向量的点积。试编写相应程序。<br /></p>","<p>输入在一行中按照“x​1​​y​1​​x​2​​y​2​​”的格式给出两个二维平面向量v​1​​=(x​1​​,y​1​​)和v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>在一行中输出一个实数，保留3位小数。<br /></p>","[{""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""-72.140""}]","2b0e3092fa991216502ba29bda7736d9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-02 03:05:42.403902+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",49,29,1,"5","{""0"": 29, ""-1"": 17, ""-2"": 3}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
364,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","fe40133bfd8f988f28b8ec95fbb0b134","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-02 03:07:40.794202+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",15,4,1,"6","{""0"": 4, ""1"": 1, ""4"": 1, ""-1"": 6, ""-2"": 3}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
365,"三维排序","<p>给定三维平面上的n个点，先按x轴从小到大排序，x轴相同的按y轴从小到大排序，x和y轴都相同的按z轴从小到大排序。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>接下来n行，每行三个数x，y，z，表示三维空间中的一个点。（保证没有重合的两个点）</p>","<p>输出n行，每行三个数，表示排完序后的点集。<br /></p>","[{""input"": ""3\n3 4 5\n1 3 4\n1 3 1"", ""output"": ""1 3 1\n1 3 4\n3 4 5""}]","35539d74346ba47bd25588ea44d0d09c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-02 03:09:29.903665+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",96,27,1,"7","{""0"": 27, ""4"": 1, ""-1"": 62, ""-2"": 6}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
366,"兔子繁衍II","<p>小王家在第一年养了一只兔子（1岁），已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一只新兔子，但是兔子在10岁的时候会死去。请问第n年小王家一共有多少只兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""53""}]","a9268e6701e816277b96ef21a02581d2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-02 03:11:15.998465+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",112,4,1,"8","{""0"": 4, ""4"": 1, ""-1"": 99, ""-2"": 8}",0,32,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
367,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","fe40133bfd8f988f28b8ec95fbb0b134","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-03 02:33:08.412202+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",41,17,1,"1-164","{""0"": 17, ""1"": 5, ""4"": 4, ""-1"": 6, ""-2"": 9}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
368,"兔子繁衍II","<p>小王家在第一年养了一只兔子（1岁），已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一只新兔子，但是兔子在10岁的时候会死去。请问第n年小王家一共有多少只兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""53""}]","a9268e6701e816277b96ef21a02581d2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-03 02:33:14.181171+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",66,21,1,"1-165","{""0"": 21, ""1"": 2, ""4"": 5, ""-1"": 37, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
369,"输出华氏-摄氏温度转换表","<p>输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。</p><p>温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。</p>","<p>在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开<br /></p>","<p style=""text-align: left;"">每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（浮点数，保留一位小数），并以空格隔开。</p><p style=""text-align: left;"">若输入的范围不合法，则输出&quot;Invalid&quot;。</p>","[{""input"": ""32 35\n"", ""output"": ""32 0.0\n34 1.1\n""}, {""input"": ""40 30\n"", ""output"": ""Invalid\n""}]","55914d8b6d591c09779d77aa4d640be9","[{""score"": 14, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 14, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 14, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 14, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 14, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 14, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 14, ""input_name"": ""7.in"", ""output_name"": ""7.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:07:52.607847+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",55,6,1,"1","{""0"": 6, ""-1"": 46, ""-2"": 3}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
370,"计算分段函数","<p>计算下列分段函数f(x)的值：<br /></p><p><img alt=""image.png"" src=""/public/upload/5589a76c17.png"" width=""300"" height=""59.85401459854015"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>在一行中按“f(x) = result”的格式输出，其中x与result都保留两位小数。<br /></p>","[{""input"": ""10"", ""output"": ""f(10.00) = 3.16""}, {""input"": ""-0.5"", ""output"": ""f(-0.50) = -2.75""}]","98312d65fd10d3b2cd9b04c8a12196b8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:08:09.399067+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",27,8,1,"2","{""0"": 8, ""-1"": 9, ""-2"": 10}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
371,"吃豆子","<p>给你一个数组，数组上的每个位置都有一定数量的豆子，现在吃豆人会进行若干次操作，每次操作给定一个坐标x，吃豆人会把位于坐标x上位置的豆子都吃掉，同时位于x位置右边的位置都会向左移动一格。具体来说，x+1位置上的豆子转移到x位置，x+2位置上的豆子转移到x+1位置，以此类推。</p><p>每次操作，如果吃豆人发现x位置上已经没豆子了，输出0，否则输出吃到的豆子数。</p>","<p>第一行两个整数n和m，分别表示数组长度和操作次数。（1&lt;=n,m&lt;=1000）</p><p>第二行有n个整数，代表初始每个位置上的豆子数d[i]。（1&lt;=d[i]&lt;=1000）</p><p>接下来m行，每行一个整数，代表该次操作的位置pos。（1&lt;=pos&lt;=n）</p>","<p>对于每次操作，输出一行，代表该次吃豆人吃到的豆子。<br /></p>","[{""input"": ""3 2\n2 3 1\n2\n3\n"", ""output"": ""3\n0\n""}]","a67f24c2db53f48aeca237baaa1a233e","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:08:34.001233+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",33,7,1,"3","{""0"": 7, ""4"": 8, ""-1"": 13, ""-2"": 5}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
372,"歌唱比赛","<p>歌唱比赛有n个裁判(n&gt;=3)，每个裁判会给当前这位歌手打分为[1,10]之间的一个整数，最终这个选手的得分为：去掉一个最高分和一个最低分之后的平均分。</p><p>现在已知小华同学的最终得分p，但是n个裁判给的得分中恰好有一个丢失了，即小华只知道n-1个裁判给出的得分，现在请你帮小华判断他的最终得分是否是对的（即是否存在第n个裁判给出某个分数q满足小华的最终得分为p）？</p>","<p>第一行一个正整数n和一个浮点数p。（3&lt;=n&lt;=100，1&lt;=p&lt;=10）</p><p>第二行n-1个正整数a[i]，表示n-1个裁判给出的得分。（1&lt;=a[i]&lt;=10）</p>","<p>若小华的最终得分是对的，输出“Yes”，否则输出“No”。<br /></p>","[{""input"": ""4 2.5\n1 2 3\n"", ""output"": ""Yes""}]","24796fe4e94a301d7b89cd5d9de77f92","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:09:00.402039+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",45,6,1,"4","{""0"": 6, ""4"": 5, ""-1"": 33, ""-2"": 1}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
373,"矩阵连乘","<p style=""text-align: start;"">矩阵的幂A^k = A * A * ... * A，其中两个矩阵A、B​的乘积会产生一个新矩阵C，且$C_{ij} = \sum_{k=1}^{m}A_{ik}*B_{kj}$​，其中矩阵A是一个n * m的数组，矩阵B的大小是一个m * t的数组。</p><p style=""text-align: start;"">现在给定一个方阵A和一个整数k，求A^k。</p>","<p style=""text-align: start;"">第一行两个整数n、k。$ (1&lt;=n、k&lt;=5) $</p><p style=""text-align: start;"">接下来n行，每行n个整数，表示输入的矩阵A。​$(-3 &lt;= A_{ij} &lt;= 3)$</p>","<p>输出n行，每行n个整数，以空格分隔，表示A^k。（注意：每一行行末无空格）<br /></p>","[{""input"": ""2 2\n1 1\n1 1"", ""output"": ""2 2\n2 2""}]","f5be94b20d67ad1ed87545d736077967","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:09:09.693064+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",42,6,1,"5","{""0"": 6, ""4"": 2, ""-1"": 25, ""-2"": 9}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
374,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","fe40133bfd8f988f28b8ec95fbb0b134","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:10:32.656097+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,2,1,"6","{""0"": 2}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
375,"兔子繁衍II","<p>小王家在第一年养了一只兔子（1岁），已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一只新兔子，但是兔子在10岁的时候会死去。请问第n年小王家一共有多少只兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""53""}]","a9268e6701e816277b96ef21a02581d2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:10:43.225217+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",35,2,1,"7","{""0"": 2, ""2"": 3, ""4"": 2, ""-1"": 25, ""-2"": 3}",0,33,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
376,"神奇的数列","<p>定义数列$ f_{n+2} = f_{n+1} + f_{n} $，数列中任何一个元素都是正整数。从定义可以看出，不同的$ f_1,f_2 $会产生不同的数列。</p><p>假设给定一个数字$ x(2 &lt;= x &lt;= 2^{32} ) $，给出这个数字出现在位置$ i(i &gt;= 3，数列下标从1开始) $的数列个数。</p>","<p>数字$ x $<br /></p>","<p>每行为2个数字，空格分隔。第一个数字为$ x $在数列中的位置$ i $，第二个为符合条件的数列个数，即$ f_1、f_2 $的组合种数。若存在多行，则按照$ i $由小到大的顺序输出。<br /></p>","[{""input"": ""3"", ""output"": ""3 2\n4 1""}]","803763ef7788eada1b35270b09d1d773","[{""score"": 3, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 3, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 3, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 3, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 3, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 3, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 3, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 3, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 3, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 3, ""input_name"": ""10.in"", ""output_name"": ""10.out""}, {""score"": 3, ""input_name"": ""11.in"", ""output_name"": ""11.out""}, {""score"": 3, ""input_name"": ""12.in"", ""output_name"": ""12.out""}, {""score"": 3, ""input_name"": ""13.in"", ""output_name"": ""13.out""}, {""score"": 3, ""input_name"": ""14.in"", ""output_name"": ""14.out""}, {""score"": 3, ""input_name"": ""15.in"", ""output_name"": ""15.out""}, {""score"": 3, ""input_name"": ""16.in"", ""output_name"": ""16.out""}, {""score"": 3, ""input_name"": ""17.in"", ""output_name"": ""17.out""}, {""score"": 3, ""input_name"": ""18.in"", ""output_name"": ""18.out""}, {""score"": 3, ""input_name"": ""19.in"", ""output_name"": ""19.out""}, {""score"": 3, ""input_name"": ""20.in"", ""output_name"": ""20.out""}, {""score"": 3, ""input_name"": ""21.in"", ""output_name"": ""21.out""}, {""score"": 3, ""input_name"": ""22.in"", ""output_name"": ""22.out""}, {""score"": 3, ""input_name"": ""23.in"", ""output_name"": ""23.out""}, {""score"": 3, ""input_name"": ""24.in"", ""output_name"": ""24.out""}, {""score"": 3, ""input_name"": ""25.in"", ""output_name"": ""25.out""}, {""score"": 3, ""input_name"": ""26.in"", ""output_name"": ""26.out""}, {""score"": 3, ""input_name"": ""27.in"", ""output_name"": ""27.out""}, {""score"": 3, ""input_name"": ""28.in"", ""output_name"": ""28.out""}, {""score"": 3, ""input_name"": ""29.in"", ""output_name"": ""29.out""}, {""score"": 3, ""input_name"": ""30.in"", ""output_name"": ""30.out""}]","<p style=""text-align: start;"">以下数列包含3，分别为</p><p style=""text-align: start;"">1 1 2 3 5 ...</p><p style=""text-align: start;"">1 2 3 5 8 ...</p><p style=""text-align: start;"">2 1 3 4 7 ...</p><p style=""text-align: start;"">其中3出现在数列第3位的数列有两个，出现在第四位的数列有一个，因此输出为：</p><p style=""text-align: start;"">3 2</p><p style=""text-align: start;"">4 1</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-03 03:14:41.247561+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",5,0,1,"8","{""1"": 2, ""-1"": 3}",0,33,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
377,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。可先输入一个k，接着输入一个字符串（字符串全是小写的英文字母）。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。</p>","<p>先输入距离k值，接着输入将要加密的字符串。</p>","<p>输出k值凯撒加密之后的字符串</p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","abf97544d27b36879ebdfda67df2818c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-06 11:29:32.509736+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",59,21,358,"1-166","{""0"": 21, ""4"": 14, ""-1"": 19, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
378,"数组合并输出","<p>给定两个数组，每个数组中的整数都是从小到大排列。设计一个方法，将两个数组合并到一起，并从大到小输出合并后的结果。试着编写程序实现。<br /></p>","<p>输入k为两个数组的大小，然后读取两个数组的元素。<br /><br /></p>","<p>从大到小输出合并好的数组</p>","[{""input"": ""5\n1 4 6 7 8\n2 3 5 6 9"", ""output"": ""9 8 7 6 6 5 4 3 2 1""}]","9a97d2b7eb1af9330ef4ad9c60142d80","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-06 11:29:38.797337+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",108,26,358,"1-167","{""0"": 26, ""1"": 22, ""4"": 22, ""-1"": 33, ""-2"": 5}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
379,"比较字符串的相似性","<p>输入字符串A，和输入字符串B，计算B和A 的相似情况，判断两个字符串是否相似，如果相似输出Yes否则输出No<br /></p>","<p>分别输入字符串A和B，第一行输入是A，第二行输入是B。</p>","<p>输出判定后的结果，如果相似输出Yes否则输出No。</p>","[{""input"": ""heloopoojdancdascd\nasdcdancdkaksjcd\n"", ""output"": ""No""}, {""input"": ""hello world\nHllo world"", ""output"": ""Yes""}]","f25992a526fbb7c643fbef1c32067d38","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>相似情况计算：两个字符串同时出现的最大子串，记为 C 。相似情况为：sim=strlen(C)/strlen(A),而sim&gt;=0.5时候就判断为Yes否则判断为No。（区分大小写）<br /></p>","[""C""]","{}","2019-12-06 11:29:45.320932+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",64,25,358,"1-168","{""0"": 25, ""4"": 11, ""-1"": 22, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
380,"单词排序","<p>输入一个字符串语句查看语句中的单词出现的次数，并按照出现的次数对单词从小到大排序<br /></p>","<p>输入一行包含多个单词的字符串语句A，每个单词用空格隔开。</p>","<p>按单词的次数从小到大输出对应的单词。</p>","[{""input"": ""white red red blue red"", ""output"": ""white blue red""}]","78609d6f2251e37ab7319a3719900537","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2019-12-06 11:29:51.674986+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",149,20,358,"1-169","{""0"": 20, ""1"": 1, ""2"": 1, ""4"": 27, ""-1"": 0, ""-2"": 26}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
381,"平面向量点积","<p>输入两个二维平面向量Vl = ( x1 , y1)和V2 = ( x2 , y2 )的分量，计算并输出两个向量的点积。试编写相应程序。<br /></p>","<p>输入在一行中按照“x​1​​y​1​​x​2​​y​2​​”的格式给出两个二维平面向量v​1​​=(x​1​​,y​1​​)和v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>在一行中输出一个实数，保留3位小数。<br /></p>","[{""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""-72.140""}]","2b0e3092fa991216502ba29bda7736d9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-06 11:29:56.762958+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",21,13,1,"1-170","{""0"": 13, ""-1"": 6, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
382,"三维排序","<p>给定三维平面上的n个点，先按x轴从小到大排序，x轴相同的按y轴从小到大排序，x和y轴都相同的按z轴从小到大排序。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>接下来n行，每行三个数x，y，z，表示三维空间中的一个点。（保证没有重合的两个点）</p>","<p>输出n行，每行三个数，表示排完序后的点集。<br /></p>","[{""input"": ""3\n3 4 5\n1 3 4\n1 3 1"", ""output"": ""1 3 1\n1 3 4\n3 4 5""}]","35539d74346ba47bd25588ea44d0d09c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-06 11:30:05.314132+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",13,10,1,"1-171","{""0"": 10, ""-1"": 1, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
383,"输出月份英文名","<p>输入月份，输出对应的英文名称。要求用指针数组表示 12个月的英文名称。例如，输入5,输出May。试编写相应程序。<br /></p>","<p>输入一个正整数n</p>","<p>输出对应月份的英文表示，开头字母大写，如果输出月份过大或者过小则输出wrong input!</p>","[{""input"": ""5"", ""output"": ""May""}, {""input"": ""-1"", ""output"": ""wrong input!""}]","a9431561139c57bc9abcca2af864e07b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 16:45:32.085997+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",154,90,358,"11-1","{""0"": 90, ""4"": 9, ""-1"": 50, ""-2"": 5}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
384,"查找星期","<p>定义一个指针数组，将下表的星期信息组织起来，信息表中首字母大写，比如Monday，输入一个字符串，在表中查找，若存在，输出该字符串在表中的序号，否则输出 “wrong input!”，本题区分大小写。试编写相应程序<br /></p>","<p>输入一个英文字符串</p>","<p>输出查找结果，若存在则输出下标，否则输出wrong input!</p>","[{""input"": ""Tuesday"", ""output"": ""2""}, {""input"": ""today"", ""output"": ""wrong input!""}]","995985cbd5f76fcfc3e005379ef6d426","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>信息表英文对应的下标：</p><p>0：Sunday<br />1：Monday<br />2：Tuesday<br />3：Wednesday<br />4：Thursday<br />5：Friday<br />6：Saturday<br /><br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 16:51:37.959219+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",180,90,358,"11-2","{""0"": 90, ""4"": 30, ""-1"": 41, ""-2"": 19}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
385,"计算最长的字符串长度","<p>输入n（n&lt;lO)个字符串，输出其中最长字符串的有效长度（&lt;100）。要求自定义函数 int  max_len( char *s[]  ,  int n ),用于计算有m个元素的指针数组s中最长的字符串的长度。试编写相应程序 。<br /></p>","<p>输入正整数n（n&lt;10），接下来输入n个字符串</p>","<p>输出函数计算出的最长字符串的长度值</p>","[{""input"": ""4\nblue\nyellow\nred\ngreen"", ""output"": ""6""}]","b5a1414859302b3a50698f01453397bf","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 16:55:37.084285+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",240,87,358,"11-3","{""0"": 87, ""4"": 64, ""-1"": 73, ""-2"": 16}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
386,"字符串的拼接","<p>输入两个字符串，输出连接后的字符串。要求自定义函数 char *strcat (char *str1,char *str2),将字符串str2复制到字符串str1的末端，并且返回字符串s的首地址。试编写相应程序。<br /></p>","<p>输入两行字符串，str1和str2。<br /></p>","<p>p=strcat (char *str1,char *str2)，第一行输出p，第二行输出str1。<br /></p>","[{""input"": ""abc\ndef"", ""output"": ""abcdef\nabcdef""}]","5bd7176b428ddb489cbec101f48ae410","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 17:05:15.66031+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",240,83,358,"11-4","{""0"": 83, ""1"": 1, ""4"": 62, ""-1"": 53, ""-2"": 41}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
387,"字符串的拼接","<p>输入两个字符串，输出连接后的字符串。要求自定义函数 char *strcat (char *str1,char *str2),将字符串str2复制到字符串str1的末端，并且返回字符串s的首地址。试编写相应程序。<br /></p>","<p>输入两行字符串，str1和str2。<br /></p>","<p>p=strcat (char *str1,char *str2)，第一行输出p，第二行输出str1。<br /></p>","[{""input"": ""abc\ndef"", ""output"": ""abcdef\nabcdef""}]","5bd7176b428ddb489cbec101f48ae410","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 17:06:53.12821+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",108,51,358,"1-172","{""0"": 51, ""4"": 7, ""-1"": 36, ""-2"": 14}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
388,"计算最长的字符串长度","<p>输入n（n&lt;lO)个字符串，输出其中最长字符串的有效长度（&lt;100）。要求自定义函数 int  max_len( char *s[]  ,  int n ),用于计算有m个元素的指针数组s中最长的字符串的长度。试编写相应程序 。<br /></p>","<p>输入正整数n（n&lt;10），接下来输入n个字符串</p>","<p>输出函数计算出的最长字符串的长度值</p>","[{""input"": ""4\nblue\nyellow\nred\ngreen"", ""output"": ""6""}]","b5a1414859302b3a50698f01453397bf","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 17:06:59.097192+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",87,53,358,"1-173","{""0"": 53, ""4"": 9, ""-1"": 23, ""-2"": 2}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
389,"查找星期","<p>定义一个指针数组，将下表的星期信息组织起来，信息表中首字母大写，比如Monday，输入一个字符串，在表中查找，若存在，输出该字符串在表中的序号，否则输出 “wrong input!”，本题区分大小写。试编写相应程序<br /></p>","<p>输入一个英文字符串</p>","<p>输出查找结果，若存在则输出下标，否则输出wrong input!</p>","[{""input"": ""Tuesday"", ""output"": ""2""}, {""input"": ""today"", ""output"": ""wrong input!""}]","995985cbd5f76fcfc3e005379ef6d426","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>信息表英文对应的下标：</p><p>0：Sunday<br />1：Monday<br />2：Tuesday<br />3：Wednesday<br />4：Thursday<br />5：Friday<br />6：Saturday<br /><br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 17:07:10.32447+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",85,48,358,"1-175","{""0"": 48, ""4"": 12, ""-1"": 19, ""-2"": 6}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
390,"输出月份英文名","<p>输入月份，输出对应的英文名称。要求用指针数组表示 12个月的英文名称。例如，输入5,输出May。试编写相应程序。<br /></p>","<p>输入一个正整数n</p>","<p>输出对应月份的英文表示，开头字母大写，如果输出月份过大或者过小则输出wrong input!</p>","[{""input"": ""5"", ""output"": ""May""}, {""input"": ""-1"", ""output"": ""wrong input!""}]","a9431561139c57bc9abcca2af864e07b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-11 17:07:38.51012+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",79,48,358,"1-174","{""0"": 48, ""4"": 4, ""-1"": 17, ""-2"": 10}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
391,"指定位置输出字符串","<p style=""text-align: left;"">本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">char *match( char *s, char ch1, char ch2 );</p><p style=""text-align: left;"">函数match应打印s中从ch1到ch2之间的所有字符，并且返回ch1的地址。</p>","<p style=""text-align: left;"">第一行一个字符串s。（|s| &lt;= 10）</p><p style=""text-align: left;"">第二行两个字符ch1和ch2。</p>","<p style=""text-align: left;"">第一行输出<code>s</code>中从<code>ch1</code>到<code>ch2</code>之间的所有字符。</p><p style=""text-align: left;"">第二行输出s中从ch1开始到末尾的所有字符。</p>","[{""input"": ""program\nr g"", ""output"": ""rog\nrogram""}, {""input"": ""program\nz o"", ""output"": ""\n\n""}, {""input"": ""program\ng z\n"", ""output"": ""gram\ngram""}]","6937e5af2191cad13b6b54a068b839e9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-12 00:09:59.139836+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",272,79,1,"11-5","{""0"": 79, ""4"": 69, ""-1"": 106, ""-2"": 18}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
392,"查找子串","<p style=""text-align: left;"">本题要求实现一个字符串查找的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">char *search( char *s, char *t );</p><p style=""text-align: left;"">函数search在字符串s中查找子串t，返回子串t在s中的首地址。若未找到，则返回NULL。</p>","<p>第一行一个字符串s。（|s|&lt;30）</p><p>第二行一个字符串t。（|t|&lt;30）</p>","<p>一个整数，表示t在s中的首地址。<br /></p>","[{""input"": ""The C Programming Language\nram\n"", ""output"": ""10""}, {""input"": ""The C Programming Language\nbored\n"", ""output"": ""-1""}]","395d27abee3f95c174f337717db3d7a3","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-12 00:11:29.499984+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",217,76,1,"11-6","{""0"": 76, ""1"": 2, ""4"": 6, ""-1"": 107, ""-2"": 26}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
393,"奇数值结点链表","<p style=""text-align: left;"">本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中奇数值的结点重新组成一个新的链表。链表结点定义如下：</p><p style=""text-align: left;"">struct ListNode {</p><p style=""text-align: left;"">int data;</p><p style=""text-align: left;"">ListNode *next;</p><p style=""text-align: left;"">};</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">struct ListNode *readlist();</p><p style=""text-align: left;"">struct ListNode *getodd( struct ListNode **L );</p><p style=""text-align: left;"">函数readlist从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到−1时表示输入结束，函数应返回指向单链表头结点的指针。</p><p style=""text-align: left;"">函数getodd将单链表L中奇数值的结点分离出来，重新组成一个新的链表。返回指向新链表头结点的指针，同时将L中存储的地址改为删除了奇数值结点后的链表的头结点地址（所以要传入L的指针）。</p>","<p>输入若干数（输入-1结束，-1不算在链表中）<br /></p>","<p>输出两行。</p><p>第一行为奇数值链表，第二行为偶数值链表。</p><p>每行输出为若干整数，每个整数后输出空格。（包括每行的最后一个数）</p>","[{""input"": ""1 2 2 3 4 5 6 7 -1"", ""output"": ""1 3 5 7 \n2 2 4 6 \n""}]","94c896967ce2c00b7460451c11eed04c","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-12 00:13:34.540203+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",197,74,1,"11-7","{""0"": 74, ""1"": 3, ""4"": 38, ""-1"": 44, ""-2"": 38}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
394,"单链表结点删除","<p style=""text-align: left;"">本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中所有存储了某给定值的结点删除。链表结点定义如下：</p><p style=""text-align: left;"">struct ListNode {</p><p style=""text-align: left;"">int data;</p><p style=""text-align: left;"">ListNode *next;</p><p style=""text-align: left;"">};</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">struct ListNode *readlist();</p><p style=""text-align: left;"">struct ListNode *deletem( struct ListNode *L, int m );</p><p style=""text-align: left;"">函数readlist从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到−1时表示输入结束，函数应返回指向单链表头结点的指针。</p><p style=""text-align: left;"">函数deletem将单链表L中所有存储了m的结点删除。返回指向结果链表头结点的指针。</p>","<p>第一行输入若干数（输入-1结束，-1不算在链表中）</p><p>第二行输入一个整数m。</p>","<p>一行若干整数，表示删除m之后的单链表。<br /></p>","[{""input"": ""10 11 10 12 10 -1\n10\n"", ""output"": ""11 12 ""}]","8ec010b021bb3ef7f3044cfbdbf98ebc","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-12 00:15:09.036871+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",155,76,1,"11-8","{""0"": 76, ""1"": 1, ""2"": 1, ""4"": 31, ""-1"": 34, ""-2"": 12}",0,34,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
395,"指定位置输出字符串","<p style=""text-align: left;"">本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">char *match( char *s, char ch1, char ch2 );</p><p style=""text-align: left;"">函数match应打印s中从ch1到ch2之间的所有字符，并且返回ch1的地址。</p>","<p style=""text-align: left;"">第一行一个字符串s。（|s| &lt;= 10）</p><p style=""text-align: left;"">第二行两个字符ch1和ch2。</p>","<p style=""text-align: left;"">第一行输出<code>s</code>中从<code>ch1</code>到<code>ch2</code>之间的所有字符。</p><p style=""text-align: left;"">第二行输出s中从ch1开始到末尾的所有字符。</p>","[{""input"": ""program\nr g"", ""output"": ""rog\nrogram""}, {""input"": ""program\nz o"", ""output"": ""\n\n""}, {""input"": ""program\ng z\n"", ""output"": ""gram\ngram""}]","6937e5af2191cad13b6b54a068b839e9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2019-12-17 11:53:45.247904+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",112,36,1,"1-176","{""0"": 36, ""4"": 11, ""-1"": 50, ""-2"": 15}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
396,"查找子串","<p style=""text-align: left;"">本题要求实现一个字符串查找的简单函数。</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">char *search( char *s, char *t );</p><p style=""text-align: left;"">函数search在字符串s中查找子串t，返回子串t在s中的首地址。若未找到，则返回NULL。</p>","<p>第一行一个字符串s。（|s|&lt;30）</p><p>第二行一个字符串t。（|t|&lt;30）</p>","<p>一个整数，表示t在s中的首地址。<br /></p>","[{""input"": ""The C Programming Language\nram\n"", ""output"": ""10""}, {""input"": ""The C Programming Language\nbored\n"", ""output"": ""-1""}]","395d27abee3f95c174f337717db3d7a3","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-12-17 11:53:50.074264+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",77,32,1,"1-177","{""0"": 32, ""4"": 4, ""-1"": 37, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
397,"奇数值结点链表","<p style=""text-align: left;"">本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中奇数值的结点重新组成一个新的链表。链表结点定义如下：</p><p style=""text-align: left;"">struct ListNode {</p><p style=""text-align: left;"">int data;</p><p style=""text-align: left;"">ListNode *next;</p><p style=""text-align: left;"">};</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">struct ListNode *readlist();</p><p style=""text-align: left;"">struct ListNode *getodd( struct ListNode **L );</p><p style=""text-align: left;"">函数readlist从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到−1时表示输入结束，函数应返回指向单链表头结点的指针。</p><p style=""text-align: left;"">函数getodd将单链表L中奇数值的结点分离出来，重新组成一个新的链表。返回指向新链表头结点的指针，同时将L中存储的地址改为删除了奇数值结点后的链表的头结点地址（所以要传入L的指针）。</p>","<p>输入若干数（输入-1结束，-1不算在链表中）<br /></p>","<p>输出两行。</p><p>第一行为奇数值链表，第二行为偶数值链表。</p><p>每行输出为若干整数，每个整数后输出空格。（包括每行的最后一个数）</p>","[{""input"": ""1 2 2 3 4 5 6 7 -1"", ""output"": ""1 3 5 7 \n2 2 4 6 \n""}]","94c896967ce2c00b7460451c11eed04c","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-12-17 11:53:55.212033+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",100,37,1,"1-178","{""0"": 37, ""4"": 19, ""-1"": 22, ""-2"": 22}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
398,"单链表结点删除","<p style=""text-align: left;"">本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中所有存储了某给定值的结点删除。链表结点定义如下：</p><p style=""text-align: left;"">struct ListNode {</p><p style=""text-align: left;"">int data;</p><p style=""text-align: left;"">ListNode *next;</p><p style=""text-align: left;"">};</p><p style=""text-align: left;""><b>函数接口定义：</b></p><p style=""text-align: left;"">struct ListNode *readlist();</p><p style=""text-align: left;"">struct ListNode *deletem( struct ListNode *L, int m );</p><p style=""text-align: left;"">函数readlist从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到−1时表示输入结束，函数应返回指向单链表头结点的指针。</p><p style=""text-align: left;"">函数deletem将单链表L中所有存储了m的结点删除。返回指向结果链表头结点的指针。</p>","<p>第一行输入若干数（输入-1结束，-1不算在链表中）</p><p>第二行输入一个整数m。</p>","<p>一行若干整数，表示删除m之后的单链表。<br /></p>","[{""input"": ""10 11 10 12 10 -1\n10\n"", ""output"": ""11 12 ""}]","8ec010b021bb3ef7f3044cfbdbf98ebc","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C""]","{}","2019-12-17 11:54:00.44138+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",162,44,1,"1-179","{""0"": 44, ""1"": 1, ""4"": 21, ""-1"": 52, ""-2"": 44}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
399,"结构体数组","<p>输入学生人数n，然后构建一个结构体数组，结构体包含学号和学生成绩（都是int类型），然后输出成绩不及格（&lt;60）的学生的学号。</p>","<p>输入n，接着输入n名学生的信息，主要是学号和成绩；</p>","<p>输出成绩不及格学生的学号，每个学号一行。</p>","[{""input"": ""4\n121212 5\n121213 100\n121216 70\n121218 60"", ""output"": ""121212\n""}]","f6f17d2e311b127c7d507db49186ed41","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-31 11:13:28.782357+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",51,28,358,"3","{""0"": 28, ""4"": 5, ""-1"": 12, ""-2"": 6}",0,35,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
400,"扫雷游戏1（函数）","<p style=""text-align: start;"">扫雷游戏是一款十分经典的单机小游戏。</p><p style=""text-align: start;"">现在有个简易版扫雷游戏：在1行m列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p><p style=""text-align: start;"">现在给出1行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p><p style=""text-align: start;""><strong>注：一个格子的周围格子包括其左、右两个方向上与之直接相邻的格子。</strong></p><p style=""text-align: start;""><strong>注意：请使用函数接口void transMap(char* input,char* output) 完成题目，其中input是传入字符串，output是最后要输出的字符串</strong><br /></p>","<p>输入文件第一行是一个整数m，表示雷区的列数。(1 &lt;= m &lt;= 100)</p><p>接下来一行，每行m个字符，描述了雷区中的地雷分布情况。字符’*’表示相应格子是地雷格，字符’?’表示相应格子是非地雷格。相邻字符之间无分隔符。</p>","<p>输出文件包含1行m个字符，描述整个雷区。用’*’表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。<br /></p>","[{""input"": ""3\n*??"", ""output"": ""*10""}, {""input"": ""3\n???"", ""output"": ""000""}, {""input"": ""3\n?*?"", ""output"": ""1*1""}]","46815d96c9affb4befcc1e673cc7728c","[{""score"": 13, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 13, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 13, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 13, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 13, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 13, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 13, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 13, ""input_name"": ""8.in"", ""output_name"": ""8.out""}]","","[""C""]","{}","2019-12-31 11:28:31.859906+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",101,20,1,"1","{""0"": 20, ""1"": 2, ""4"": 1, ""-1"": 73, ""-2"": 5}",0,35,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
401,"打分（指针）","<p style=""text-align: start;"">高中作文打分（满分为60分），为了避免作文打分的主观因素的影响，一般会请n个老师进行打分，从中去掉最高分和最低分，对保留的求和并平均。</p><p style=""text-align: start;"">现在给定n个老师打分的情况，你需要求出最高分和最低分，并分别存到指针变量p和q中（int类型指针）；对剩下的分数求和平均保存到指针变量r（double类型指针）中。</p><p style=""text-align: start;"">程序最后一行请输出如下代码：</p><p>printf(&quot;%d %d %.2f\n&quot;,*p,*q,*r);</p>","<p style=""text-align: start;"">一行一个整数n。（$ 3 &lt;= n &lt;= 10 $）<br /></p><p style=""text-align: start;"">一行n个整数表示n位老师打分情况数组score。（$ 0 &lt;= score[i] &lt;= 60$）</p>","<p>按题目描述中的代码进行输出。（p、q、r分别输出的是最高分、最低分、剩下的平均分）<br /></p>","[{""input"": ""3\n60 60 60"", ""output"": ""60 60 60.00""}]","f3066719a0733d3590ad966263a7421e","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2019-12-31 11:31:14.83802+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",79,27,1,"2","{""0"": 27, ""4"": 10, ""-1"": 36, ""-2"": 6}",0,35,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
402,"链表操作","<p>输入一串int类型的数字以-1结束输入，将读取的不重复的数字构建成链表。并按照指示删除指定数字的节点，最后将剩余的链表的数字依次输出。</p>","<p>输入要求链表的输入用-1结束，将不重复的数字构建成链表，比如 1 2 1 2 5 6 4 -1 构建成的链表 1 2 5 6 4；</p><p>接着输入要删除的数字。</p>","<p>输出删除指定数字后的链表，中间用空格隔开，最后一个数字有空格。</p>","[{""input"": ""1 2 3 4 5 6 5 4 6 -1\n4"", ""output"": ""1 2 3 5 6""}]","97bfe4db418b22dcf2fe105311e090c8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>链表的中重复元素的查找，要在构建时进行，即链表中存在了不插入，不存在将节点插入到链表最后</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2019-12-31 11:32:57.672502+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",45,13,358,"4","{""0"": 13, ""1"": 1, ""3"": 1, ""4"": 11, ""-1"": 11, ""-2"": 8}",0,35,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
403,"扫雷游戏1（函数）","<p style=""text-align: start;"">扫雷游戏是一款十分经典的单机小游戏。</p><p style=""text-align: start;"">现在有个简易版扫雷游戏：在1行m列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p><p style=""text-align: start;"">现在给出1行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p><p style=""text-align: start;""><strong>注：一个格子的周围格子包括其左、右两个方向上与之直接相邻的格子。</strong></p><p style=""text-align: start;""><strong>注意：请使用函数接口void transMap(char* input,char* output) 完成题目，其中input是传入字符串，output是最后要输出的字符串</strong><br /></p>","<p>输入文件第一行是一个整数m，表示雷区的列数。(1 &lt;= m &lt;= 100)</p><p>接下来一行，每行m个字符，描述了雷区中的地雷分布情况。字符’*’表示相应格子是地雷格，字符’?’表示相应格子是非地雷格。相邻字符之间无分隔符。</p>","<p>输出文件包含1行m个字符，描述整个雷区。用’*’表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。<br /></p>","[{""input"": ""3\n*??"", ""output"": ""*10""}, {""input"": ""3\n???"", ""output"": ""000""}, {""input"": ""3\n?*?"", ""output"": ""1*1""}]","46815d96c9affb4befcc1e673cc7728c","[{""score"": 13, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 13, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 13, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 13, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 13, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 13, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 13, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 13, ""input_name"": ""8.in"", ""output_name"": ""8.out""}]","","[""C""]","{}","2020-01-06 07:05:31.493852+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",17,6,1,"1-180","{""0"": 6, ""4"": 9, ""-1"": 1, ""-2"": 1}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
404,"打分（指针）","<p style=""text-align: start;"">高中作文打分（满分为60分），为了避免作文打分的主观因素的影响，一般会请n个老师进行打分，从中去掉最高分和最低分，对保留的求和并平均。</p><p style=""text-align: start;"">现在给定n个老师打分的情况，你需要求出最高分和最低分，并分别存到指针变量p和q中（int类型指针）；对剩下的分数求和平均保存到指针变量r（double类型指针）中。</p><p style=""text-align: start;"">程序最后一行请输出如下代码：</p><p>printf(&quot;%d %d %.2f\n&quot;,*p,*q,*r);</p>","<p style=""text-align: start;"">一行一个整数n。（$ 3 &lt;= n &lt;= 10 $）<br /></p><p style=""text-align: start;"">一行n个整数表示n位老师打分情况数组score。（$ 0 &lt;= score[i] &lt;= 60$）</p>","<p>按题目描述中的代码进行输出。（p、q、r分别输出的是最高分、最低分、剩下的平均分）<br /></p>","[{""input"": ""3\n60 60 60"", ""output"": ""60 60 60.00""}]","f3066719a0733d3590ad966263a7421e","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2020-01-06 07:05:38.050066+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",17,6,1,"1-181","{""0"": 6, ""4"": 3, ""-1"": 5, ""-2"": 3}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
405,"结构体数组","<p>输入学生人数n，然后构建一个结构体数组，结构体包含学号和学生成绩（都是int类型），然后输出成绩不及格（&lt;60）的学生的学号。</p>","<p>输入n，接着输入n名学生的信息，主要是学号和成绩；</p>","<p>输出成绩不及格学生的学号，每个学号一行。</p>","[{""input"": ""4\n121212 5\n121213 100\n121216 70\n121218 60"", ""output"": ""121212\n""}]","f6f17d2e311b127c7d507db49186ed41","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-01-06 07:05:43.673887+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",22,16,358,"1-182","{""0"": 16, ""4"": 1, ""-1"": 2, ""-2"": 3}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
406,"链表操作","<p>输入一串int类型的数字以-1结束输入，将读取的不重复的数字构建成链表。并按照指示删除指定数字的节点，最后将剩余的链表的数字依次输出。</p>","<p>输入要求链表的输入用-1结束，将不重复的数字构建成链表，比如 1 2 1 2 5 6 4 -1 构建成的链表 1 2 5 6 4；</p><p>接着输入要删除的数字。</p>","<p>输出删除指定数字后的链表，中间用空格隔开，最后一个数字有空格。</p>","[{""input"": ""1 2 3 4 5 6 5 4 6 -1\n4"", ""output"": ""1 2 3 5 6""}]","97bfe4db418b22dcf2fe105311e090c8","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","<p>链表的中重复元素的查找，要在构建时进行，即链表中存在了不插入，不存在将节点插入到链表最后</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-01-06 07:05:48.500781+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",52,18,358,"1-183","{""0"": 18, ""4"": 13, ""-1"": 17, ""-2"": 4}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
408,"LifeGame","<p>输入一个初始配置（矩阵大小限制为6*6, 0代表死, 1代表活），输出下一代<br /></p>","<p style=""margin-left: 0px;"">输入活着的节点的坐标（横纵坐标都为-1时代表结束）。<br /></p><p>第一行一个正整数k，表示迭代次数。后面每行两个正整数 x y(中间一个空格)，表示点矩阵网格点(x,y)是活着，x=y=-1输入结束。(1&lt;=k&lt;=100000，1&lt;=x, y&lt;=6)。</p>","<p>输出下一代<br /></p>","[{""input"": ""1\n3 3\n3 4\n-1 -1"", ""output"": ""0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0""}]","32b0507afbd90f9f70dbfbd790f7f482","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-02-20 05:33:18.794617+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",607,106,1,"1","{""0"": 106, ""1"": 11, ""4"": 26, ""-1"": 260, ""-2"": 204}",0,36,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
409,"CircularQueue","<p>向队列中插入若干个元素（循环队列最大容量为8），访问并移除队列中的所有元素</p>","<p>输入：要插入的元素的个数</p><p>要插入的每一个元素的值</p>","<p>输出：访问并移除的每一个元素的值</p>","[{""input"": ""5\n6 2 3 8 7"", ""output"": ""6 2 3 8 7""}, {""input"": ""9\n1 4 6 7 9 10 5 3 8 "", ""output"": ""This queue is overflow!\n1 4 6 7 9 10 5 3""}]","89591348b8c9e7bb8044c07e88bc71a2","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-02-27 09:41:21.790427+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",63,32,511,"1","{""0"": 32, ""4"": 2, ""-1"": 9, ""-2"": 20}",0,37,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
410,"CirLinkList","<p>实现一个循环链表,并解决约瑟夫问题.</p>","<p>输入约瑟夫问题中的n和m;</p><p>输入要插入循环队列的n个元素的值;</p>","<p>按顺序输出所有被踢出队列的元素的值;</p><p>输出最终的优胜者;</p>","[{""input"": ""8 3\n1 2 3 4 5 6 7 8"", ""output"": ""3 6 1 5 2 8 4 \n7""}]","6014791e712daba9be2567d78a5a768e","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-03-28 06:11:41.187559+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",83,30,511,"1","{""0"": 30, ""4"": 20, ""-1"": 15, ""-2"": 18}",0,38,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
411,"用DFS解决滑雪问题","<p>Michael喜欢滑雪这并不奇怪，因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael想知道载一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。<br /></p><p>下面是一个例子:一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。<br /></p><p><b>要求用DFS实现</b></p>","<p>输入的第一行表示区域的行数R和列数C(1 &lt;= R,C &lt;= 100)。下面是R行，每行有C个整数，代表高度h，0&lt;=h&lt;=10000。<br /></p>","<p>输出最长区域的长度。<br /></p>","[{""input"": ""5 5\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n"", ""output"": ""25""}]","587c2656e4786fdc8a6218d21f0d350e","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-04-06 10:09:04.829516+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",301,97,511,"1","{""0"": 97, ""1"": 8, ""4"": 26, ""-1"": 96, ""-2"": 74}",0,39,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
412,"用BFS解决滑雪问题","<p style=""margin-left: 0px;"">Michael喜欢滑雪这并不奇怪，因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael想知道载一个区域中最长底滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。<br /></p><p>下面是一个例子:一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。<br /></p><p><b>要求用BFS实现</b></p>","<p>输入的第一行表示区域的行数R和列数C(1 &lt;= R,C &lt;= 100)。下面是R行，每行有C个整数，代表高度h，0&lt;=h&lt;=10000。<br /></p>","<p>输出最长区域的长度。<br /></p>","[{""input"": ""5 5\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n"", ""output"": ""25""}]","c124497f5938576896de10985ff43d11","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-04-06 15:25:26.540927+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",230,97,511,"2","{""0"": 97, ""1"": 31, ""3"": 3, ""4"": 15, ""-1"": 41, ""-2"": 43}",0,39,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
413,"OrderedList","<p>1、用数组(大小限定为30)实现一个链表类，基于链表类派生一个有序链表类(重写插入和替换函数)。</p><p>2、自定义一个数据结构Record作为有序链表类的数据类型，重载操作符&gt;, &lt;, ==。</p>","<p>依次输入要插入到链表内的数据（输入-1代表结束）</p>","<p>有序输出链表内的所有数据</p>","[{""input"": ""3 6 9 8 10 7 5 4 2 1 -1"", ""output"": ""1 2 3 4 5 6 7 8 9 10 ""}]","b11100be0549de586179bce113b4dd28","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-04-14 07:58:58.397479+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",72,30,511,"1","{""0"": 30, ""-1"": 4, ""-2"": 38}",0,40,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
414,"BinarySearch","<p>基于problem 1实现的有序链表，实现二分查找</p>","<p>1、依次输入要插入到链表内的数据（输入-1代表结束）</p><p>2、输入要查询的目标值</p>","<p>1、有序输出链表内的所有数据</p><p>2、如果链表内包含要查询的目标值，输出目标值的位置（从0开始）；如果不包含，输出Target not present!</p>","[{""input"": ""9 8 7 6 5 4 3 2 1 -1\n5"", ""output"": ""1 2 3 4 5 6 7 8 9 \n4""}, {""input"": ""9 8 7 6 5 4 3 2 1 -1\n10"", ""output"": ""1 2 3 4 5 6 7 8 9 \nTarget not present!""}]","4ddb6900125d9c8f5df99d8506f46d78","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-04-20 07:43:32.604984+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",66,30,511,"2","{""0"": 30, ""4"": 1, ""-1"": 23, ""-2"": 12}",0,40,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
415,"低位优先基数排序","<p>用低位优先基数排序对下列字符串进行排序。</p>","<p>输入包含两行，第一行为列表中元素个数n，第二行为列表中的元素。</p><p>本题列表中的元素都是包含三个字母的英文单词。</p>","<p>1. 输出排序后的字符串序列。</p><p>2. 中间用空格隔开。</p><p>3. 末尾不得有空格。</p>","[{""input"": ""9\ndog cat pig cow fox rat bee ant bat"", ""output"": ""ant bat bee cat cow dog fox pig rat""}]","2b8b0e66077e6cb6b8822834d3c71b1c","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-04-26 02:25:38.586142+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",52,26,511,"1","{""0"": 26, ""4"": 11, ""-1"": 10, ""-2"": 5}",0,41,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
416,"MergeSort","<p>对下列数字进行归并排序</p>","<p style=""margin-left: 0px;"">输入为两行；</p><p>第一行为n，表示需要排序的元素的个数；</p><p>第二行为需要排序的元素，中间用空格隔开。</p>","<p>输出排好序的数字序列；</p><p>两个元素之间用空格隔开；</p><p>行末不得有空格。</p>","[{""input"": ""9\n85 96 78 35 125 63 25 13 101"", ""output"": ""13 25 35 63 78 85 96 101 125""}]","138f10c8ab3bc12845960a0c0c083e3f","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-07 02:36:56.000151+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",52,27,511,"1","{""0"": 27, ""4"": 1, ""-1"": 11, ""-2"": 13}",0,42,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
417,"A+B Problem","<p>请计算两个整数的和并输出结果。</p><p>注意不要有不必要的输出，比如&quot;请输入 a 和 b 的值: &quot;。</p>","<p>一行两个整数。</p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""1 1"", ""output"": ""2""}]","2d8be1fa07f8a47f1f79cf265c392929","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-07 02:44:11.56735+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",255,124,1,"A","{""0"": 124, ""4"": 10, ""-1"": 16, ""-2"": 105}",0,43,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
418,"新的A+B","<p>题的目标很简单，就是求两个正整数A和B的和，其中A和B都在区间[1,1000]。稍微有点麻烦的是，输入并不保证是两个正整数。<br /></p>","<p>输入在一行给出A和B，其间以空格分开。问题是A和B不一定是满足要求的正整数，有时候可能是超出范围的数字、负数、带小数点的实数、甚至是一堆乱码。</p><p>注意：我们把输入中出现的第1个空格认为是A和B的分隔。题目保证至少存在一个空格，并且B不是一个空字符串。</p>","<p>如果输入的确是两个正整数，则按格式A + B = 和输出。如果某个输入不合要求，则在相应位置输出?，显然此时和也是?。</p>","[{""input"": ""123 456"", ""output"": ""123 + 456 = 579\n""}, {""input"": ""22. 18\n"", ""output"": ""? + 18 = ?\n""}, {""input"": ""-100 blabla bla...33\n"", ""output"": ""? + ? = ?\n""}]","86120c91c40c7a7a945291dee7ed568b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-07 03:40:22.99949+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",385,105,1,"C","{""0"": 105, ""1"": 1, ""4"": 15, ""-1"": 121, ""-2"": 143}",0,43,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
419,"降序排序","<p>给你n个数，里面的数字都是乱序的，请将它们都按照从大到小排序。<br /></p>","<p>第一行为一个整数n（1&lt;=n&lt;=1000）</p><p>第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>","<p>输出一行，按从大到小的顺序输出排序后的数列。<br /></p>","[{""input"": ""5\n8 3 5 4 2\n"", ""output"": ""8 5 4 3 2\n""}]","df4ff751c075c31fb5d8894419265a22","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-07 03:41:15.91262+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",False,"Low","",6,2,1,"D","{""0"": 2, ""-2"": 4}",0,43,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
420,"QuickSort","<p>对下列数字进行快速排序。</p>","<p>输入为两行；</p><p>第一行为n，表示需要排序的元素的个数；</p><p>第二行为需要排序的元素，中间用空格隔开。</p>","<p>输出排好序的数字序列；</p><p>两个元素之间用空格隔开；</p><p>行末不得有空格。</p>","[{""input"": ""9\n85 96 78 35 125 63 25 13 101"", ""output"": ""13 25 35 63 78 85 96 101 125""}]","dcf45660b3fec492f319002c8b84b2a3","[{""score"": 100, ""input_name"": ""1.in"", ""output_name"": ""1.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-07 08:29:32.048903+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",35,26,511,"2","{""0"": 26, ""2"": 1, ""-1"": 2, ""-2"": 6}",0,42,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
421,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。可先输入一个k，接着输入一个字符串（字符串全是小写的英文字母）。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。</p>","<p>先输入距离k值，接着输入将要加密的字符串。</p>","<p>输出k值凯撒加密之后的字符串</p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","abf97544d27b36879ebdfda67df2818c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-10 03:36:58.086725+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",349,110,358,"B","{""0"": 110, ""4"": 45, ""-1"": 106, ""-2"": 88}",0,43,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
422,"经典的哈希表——TwoSum问题（1）","<p>给一个整数数组，找到两个数使得他们的和等于一个给定的数target。你需要实现的函数twoSum需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 1 到 n，不是以 0 开头。数组是给定的，允许对数组建索引，每次的问题输入是target。<br /></p><p>要求：需使用C++类与对象的方法实现哈希表的定义，哈希函数及冲突处理方法可自定义。</p>","<p>控制台输入三行，第一行表示数组的大小，第二行顺序输入整数，第三行输入目标值。</p>","<p>输出查询到的下标，注意：</p><p>（1）输出的两个下标是从1开始计数，且前一个数的下标小于后一个数；</p><p>（2）按照第一个数的下标递增依次换行输出所有的结果。</p><p>（3）最后一行保留一个换行空格；</p><p>（4）如果不存在，则返回None。</p>","[{""input"": ""4\n2 7 11 15\n9"", ""output"": ""[1,2]\n""}, {""input"": ""10\n2 5 11 8 1 7 4 16 13 3\n15"", ""output"": ""[1,9]\n[3,7]\n[4,6]\n""}, {""input"": ""3\n1 2 3\n2"", ""output"": ""None\n""}]","ec6bf727a0c9f2f91be551f9e6c4f731","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++""]","{}","2020-05-14 05:35:40.792492+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",105,28,511,"1","{""0"": 28, ""4"": 1, ""-1"": 59, ""-2"": 17}",0,45,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
423,"经典的哈希表——TwoSum问题（2）","<p style=""margin-left: 0px;"">给一个整数数组，找到两个数使得他们的和等于一个给定的数target。你需要实现的函数twoSum需要返回这两个数的下标, 并且第一个下标小于第二个下标。注意这里下标的范围是 1 到 n，不是以 0 开头。数组是给定的，允许对数组建索引，每次的问题输入是target。<br /></p><p>要求：需使用标准模板库STL类函数实现HashMap。</p>","<p>控制台输入三行，第一行表示数组的大小，第二行顺序输入整数，第三行输入目标值。<br /></p>","<p style=""margin-left: 0px;"">输出查询到的下标，注意：</p><p>（1）输出的两个下标是从1开始计数，且前一个数的下标小于后一个数；</p><p>（2）按照第一个数的下标递增依次换行输出所有的结果。</p><p>（3）最后一行保留一个换行空格；</p><p>（4）如果不存在，则返回None。</p>","[{""input"": ""4\n2 7 11 15\n9"", ""output"": ""[1,2]\n""}, {""input"": ""10\n2 5 11 8 1 7 4 16 13 3\n15"", ""output"": ""[1,9]\n[3,7]\n[4,6]\n""}, {""input"": ""3\n1 2 3\n2"", ""output"": ""None\n""}]","cfec7fe54c2cf4c716e5b844a8ea82da","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++""]","{}","2020-05-14 05:48:50.725499+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",45,26,511,"2","{""0"": 26, ""-1"": 5, ""-2"": 14}",0,45,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
424,"排序II","<p style=""text-align: left;"">给定一个长度为n的整数序列，要求对序列中的正数按升序排列，负数按降序排列，并且排完序后，原来是正数的位置上的数还是正数，原来是负数的位置上的数还是负数，0所在位置的数还是0。</p><p style=""text-align: left;""><strong>***</strong><b>注意：本题禁止使用</b><b>sort</b><b>库函数</b><strong>***</strong></p>","<p style=""text-align: left;"">第一行一个整数n。(n&lt;= 100)</p><p style=""text-align: left;"">第二行n个整数，代表待排序的整数序列，每个整数的绝对值小于100。</p>","<p>输出一行，表示排序后的序列。<br /><br /></p>","[{""input"": ""5\n1 2 0 -3 -1"", ""output"": ""1 2 0 -1 -3""}]","aed453dd8ba1dd254361227056716935","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-15 01:54:38.298137+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",188,46,1,"A","{""0"": 46, ""1"": 2, ""3"": 1, ""4"": 6, ""-1"": 88, ""-2"": 45}",0,46,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
425,"苹果摆盘","<p>幼儿园老师有n个苹果，现在需要摆盘。老师需要把这n个苹果放到尽可能多的盘子里，但是有限制条件：每个果盘至少放一个苹果，从第三个及以后的果盘中的苹果数量至少是它前面两个果盘中的苹果数量之和。</p><p>请问这n个苹果最多能放几个果盘呢？</p><p style=""text-align: left;""><strong>***</strong><b>注意：本题必须使用递归</b><strong>***</strong></p>","<p>一行一个整数n。(4 &lt;= n &lt;=10^9)<br /><br /></p>","<p>输出一个整数，表示n个苹果最多能放几个果盘。<br /><br /></p>","[{""input"": ""5"", ""output"": ""3""}]","8f330ee1b2a652d15e1c4517388c8b61","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-15 01:57:20.132775+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",251,29,1,"B","{""0"": 29, ""1"": 51, ""3"": 3, ""4"": 29, ""-1"": 122, ""-2"": 17}",0,46,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
426,"链表报数","<p>n个人围成一个圆环，编号为1，2，3，4…到n， 现在从指定的一名同学编号为s的同学开始，从s依次开始报数，s报1，s的后一位同学报2，依次类推，一直报到m。每个报到m的同学将退出圆环。然后从报到m的下一位同学继续开始从1到m报数。一直这样执行，求最后一名留在圆环中的人的编号。<br /><br /></p>","<p>三个数字，分别表示n (2&lt;=n&lt;=10001),s(1&lt;=s&lt;=n) , m(1&lt;=m)<br /><br /></p>","<p>输出为1行，即最后一名留在圆环中的人的编号。<br /><br /></p>","[{""input"": ""10 4 3"", ""output"": ""7""}]","cbd23cb0f939fa7f8797d7c7c4f60d33","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-15 01:58:32.278004+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",112,34,1,"C","{""0"": 34, ""1"": 14, ""4"": 8, ""-1"": 44, ""-2"": 12}",0,46,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
427,"城市水管连接","<p>现在有n个城镇，编号为1, 2, 3, 4…n。他们之间有m条互通的道路，每条道路有相应的长度，现在基于这些道路，选择其中的一部分，在其上铺设水管，水管长度等于道路长度。要求使得任意两个城市之间都能通水，即任何城市之间可以通过水管连接。求使得所有城市连接的水管最短长度。<br /><br /></p>","<p>第一行两个数，分别表示n和m (1&lt;=n&lt;=10001,1&lt;=m&lt;=10000*10000/2)。</p><p>后面为m行，其中每行3个数，分别表示连接的第一个城市，第二个城市，和道路长度，道路长度为大于0的整数。</p>","<p>输出为1行，即水管最短长度。提示，如果不存在一种方案使得所有城市之间都能两两相通，那么输出的最短长度为-1。<br /><br /></p>","[{""input"": ""4 5\n1 2 1\n1 3 1\n1 4 2\n2 4 3\n3 4 3"", ""output"": ""4""}]","b5ba662ed3738897291388dad75f0398","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-15 01:59:45.593914+00",NULL,1000,512,False,NULL,NULL,NULL,"ACM",True,"Low","",119,11,1,"D","{""0"": 11, ""1"": 10, ""4"": 4, ""-1"": 55, ""-2"": 39}",0,46,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
428,"爬山问题","<p style=""margin-left: 18pt;"">Jack喜欢登山，登的区域必须向上倾斜，而且当爬到坡顶，不得不再次从另一个坡底出发。Jack想知道在一个区域中最长的爬坡。区域由一个m*n的二维数组给出。数组的每个数字代表点的高度。下面是一个例子，Jack可以从某个点爬向上下左右相邻四个点之一，<u>当且仅当高度增加</u>。在上面的例子中，一条可行的坡道为1-2-17-23。当然1-2-3-4-5-6…-20-21-22-23这条更长。事实上，这是最长的一条。请写出相应的代码，求出这条最长坡道的长度，即坡道包含的点的数量。</p><p>1    2    3  4  5</p><p>16 17 18 19 6</p><p>15 23 23 20 7</p><p>14 22 22 21 8</p><p>13 12 11 10 9</p>","<p>其中第一行两个数字。分别表示m和n。（1&lt;=m&lt;=120;1&lt;=n&lt;=120）</p><p>下面有m行，每行n个数字，分别表示高度，高度为大于0的整数。</p>","<p>一个整数表示最长坡道的长度。<br /><br /></p>","[{""input"": ""5 5\n1   2   3   4   5\n16  17  18  19  6\n15  23  23  20  7\n14  22  22  21  8\n13  12  11  10  9"", ""output"": ""23""}]","bd1638c061eb3900ee92cef65e06446d","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-15 02:00:48.955384+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",80,20,1,"E","{""0"": 20, ""3"": 1, ""4"": 8, ""-1"": 39, ""-2"": 12}",0,46,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
429,"链表分组","<p>n<font>个人排成一排（用链表实现）。给定一份名单，该名单中共有</font><font>m</font><font>个人（是</font><font>n</font><font>个人的子集）。现要将名单中的人进行分组，分组规则是连续排在一起的人为一组。求名单中的人一共能分成多少组？</font><br /></p>","<p>n和m<font>，</font><font>分别代表</font><font>排成一排的人数和名单中的人数</font><font>；</font></p><p>n个人（用数字代替，无重复）排成一排的顺序；</p><p><font>名单中包含的</font>m个人（用数字代替，无重复）。</p>","<p><font>名单中的人一共能分成多少组（末尾无空格）。</font><br /></p>","[{""input"": ""4 3\n0 1 2 3\n0 1 3"", ""output"": ""2""}]","bcfbfaa11ff7987272190e7d79907494","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-19 03:24:15.193826+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",39,12,511,"2","{""0"": 12, ""4"": 12, ""-1"": 12, ""-2"": 3}",0,44,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
430,"字符串的得分","<p><font>给定一个平衡括号字符串</font>S<font>，按下述规则计算该字符串的分数：</font></p><p>()<font>得</font><font>1</font><font>分。</font></p><p>AB<font>得</font><font>A + B</font><font>分，其中</font><font>A</font><font>和</font><font>B</font><font>是平衡括号字符串。</font><font>例如</font>“()()”<font>得</font><font>1+1=2</font><font>分。</font></p><p>(A)<font>得</font>2 * A<font>分，其中</font><font>A</font><font>是平衡括号字符串</font><font>，例如</font>“(())”<font>得</font><font>2*1=2</font><font>分</font><font>。</font></p><p><font>提示：可用栈实现，括号在栈中可用0代替，遇到左括号进栈，遇到右括号出栈后算分，算出局部分数后，可以将该分数重新压入栈中。</font></p>","<p>输入仅一行，即为平衡括号字符串。<br /><br /></p>","<p>输出该字符串的得分。</p>","[{""input"": ""()"", ""output"": ""1""}, {""input"": ""()()"", ""output"": ""2""}, {""input"": ""(())"", ""output"": ""2""}, {""input"": ""(()(()))"", ""output"": ""6""}]","3abfbaa75db66f278c07284220b760f5","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-19 06:48:23.446781+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",64,19,511,"3","{""0"": 19, ""4"": 3, ""-1"": 24, ""-2"": 18}",0,44,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
431,"合并两个有序链表","<p><font>将两个有序的存有大写字母的链表进行合并，保证合并后的链表依然有序并去重，仅保留不重复的字母结点。</font><br /></p>","<p>n和m，分别代表两个待合并链表的长度；</p><p>n个大写字母，中间用空格隔开，代表第一个待合并链表；</p><p>m个大写字母，中间用空格隔开，代表第二个待合并链表。</p>","<p><font>输出按要求合并后的链表，末尾不得有空格。</font><br /></p>","[{""input"": ""3 3\nA B D\nA C D"", ""output"": ""A B C D""}]","12bac3fcef9218d6acf9a05825410147","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-19 07:00:14.120224+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",68,18,511,"1","{""0"": 18, ""1"": 1, ""4"": 10, ""-1"": 30, ""-2"": 9}",0,44,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
432,"BinaryTree","<p>1、给出后序遍历序列###ca##ji####spom(#代表空指针), 构建二叉树。</p><p>2、上述二叉树实际是一颗二叉排序树，请实现程序</p><p>（1）查找c节点，输出从树根到c节点的路径。</p><p>（2）删除其中的m节点，使得删除后仍为二叉排序树，并输出其中序遍历序列。</p>","<p>输入后序遍历序列；</p><p>输入要查找的节点值；</p><p>输入要删除的节点值。</p>","<p>输出构建好的二叉树的中序遍历序列(末尾有空格)；</p><p>输出从树根到要查找节点的路径（末尾有空格）；</p><p>输出删除节点后的二叉树的中序遍历序列（末尾有空格）。</p>","[{""input"": ""###ca##ji####spom\nc\nm"", ""output"": ""a c i j m o p s \nm i a c \na c i j o p s ""}]","620e667fae07f227046c9653c99003f1","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-05-25 13:32:30.517936+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",82,24,511,"1","{""0"": 24, ""1"": 4, ""3"": 1, ""4"": 5, ""-1"": 20, ""-2"": 28}",0,47,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
433,"堆排序","<p>给出n个坐标点&lt;x1,y1&gt;, &lt;x2, y2&gt;…..&lt;xn, yn&gt;，请对他们进行堆排序。坐标点的大小关系是：如果 xi&gt; xj, 则 &lt;xi,yi&gt;  大于 &lt;xj, yj&gt;；若 xi=xj 且 yi &gt;yj, 那么同样有&lt;xi,yi&gt;  大于 &lt;xj, yj&gt;。</p><p>请使用堆排序完成，建议使用C++的面向对象的程序设计。</p>","<p>输入部分包括几个部分：</p><p>第一行，一个整型数，表示输入的坐标个数N。</p><p>第二行至第N+1行，每行包括两个整型数，分别表示坐标的X和Y值；</p>","<p>输出N行排序后的坐标，每行表示坐标的X和Y值，输出格式为坐标格式(X,Y)，最后不要留换行空格。</p>","[{""input"": ""4\n9 1\n3 6\n1 1\n2 8"", ""output"": ""(1,1)\n(2,8)\n(3,6)\n(9,1)""}, {""input"": ""6\n-2 -4\n3 3\n1 -1\n3 7\n4 0\n-2 8"", ""output"": ""(-2,-4)\n(-2,8)\n(1,-1)\n(3,3)\n(3,7)\n(4,0)""}, {""input"": ""3\n-1 -2\n0 1\n2 1"", ""output"": ""(-1,-2)\n(0,1)\n(2,1)""}]","f60857ef56e77962438097993c5479cd","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++""]","{}","2020-06-02 15:25:40.776453+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",62,28,511,"1","{""0"": 28, ""4"": 1, ""-1"": 15, ""-2"": 18}",0,48,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
434,"堆排序的应用——TopK","<p>有一堆二维坐标点&lt;x1,y1&gt;, &lt;x2, y2&gt;…..&lt;xn, yn&gt;。假定坐标点是一个一个来的，请利用堆，能时刻报告数据中的<b>最小的k项</b>。比如k=1,  有4个坐标数据 &lt;2,2&gt;, &lt;1,1&gt;, &lt;3,3&gt;, &lt;0,0&gt; 依次到来。那么当来第一个&lt;2,2&gt;时， top-1的值是&lt;2,2&gt;, 再来一个数据&lt;1,1&gt;,这时top-1的值变为了 &lt;1,1&gt;, 再来一个&lt;3,3&gt;数据，top-1还是&lt;1,1&gt;, 第四个数据&lt;0,0&gt;到了后，top-1 就变为了 &lt;0,0&gt;。<br /></p>","<p>输入部分包括几个部分：</p><p>第一行，两个整型数，表示输入的坐标个数N以及K值。</p><p>第二行至第N+1行，每行包括两个整型数，分别表示坐标的X和Y值；</p>","<p style=""margin-left: 0px;"">输出若干行，每行表示坐标的X和Y值，输出格式为坐标格式(X,Y)，最后不要留换行空格。</p><p>注意：输入的前K-1个数时不需要打印，当输入第K个值时，每次输入一个坐标，返回topK个坐标，</p><p>注意每次输出的K个坐标时由小到大排序的。</p>","[{""input"": ""4 1\n2 2\n1 1\n3 3\n0 0"", ""output"": ""(2,2)\n(1,1)\n(1,1)\n(0,0)""}, {""input"": ""5 3\n2 0\n3 2\n2 2\n1 8\n3 6"", ""output"": ""(2,0)\n(2,2)\n(3,2)\n(1,8)\n(2,0)\n(2,2)\n(1,8)\n(2,0)\n(2,2)""}]","4f9a2549bb59d54be496fc1d636e20f3","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++""]","{}","2020-06-02 16:03:11.81316+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",68,27,511,"2","{""0"": 27, ""1"": 1, ""-1"": 32, ""-2"": 8}",0,48,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
435,"字符串统计","<p>输入一个字符串（不包含空格），统计其中非数字字符的个数。<br /></p>","<p>一行一个字符串s。（s的长度不超过100）<br /></p>","<p>一个整数表示答案。<br /></p>","[{""input"": ""A1b2#3"", ""output"": ""3""}]","6b1548f50ba9723468b942a2f58c949d","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-05 03:27:14.285597+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",37,10,1,"A","{""0"": 10, ""1"": 1, ""4"": 2, ""-1"": 9, ""-2"": 15}",0,49,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
436,"排序III","<p>给定一个长度为n的整数序列，要求使用<b>快速排序</b>进行升序排序。</p><p><strong>***</strong><b>注意：本题禁止使用</b><b>sort</b><b>库函数，且其他排序方法不得分</b><strong>***</strong></p>","<p>第一行一个整数n。（n&lt;=100000）</p><p>第二行n个整数，代表待排序的整数序列。</p>","<p>输出一行，表示排序后的序列。<br /></p>","[{""input"": ""5\n1 2 0 3 1\n"", ""output"": ""0 1 1 2 3""}]","cabe79148dd50e13e63e6d74b0d976fa","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-05 03:28:48.90593+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",66,2,1,"B","{""0"": 2, ""1"": 10, ""2"": 1, ""4"": 9, ""-1"": 35, ""-2"": 9}",0,49,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
437,"链表","<p style=""text-align: left;"">给定一个长度为n的链表（链表节点包含一个整型值）。同时给定大小为m的列表G，该列表是上述链表中整型值的一个子集。请返回列表G中组件的个数，这里对组件的定义为：链表中一段最长连续节点的值（该值必须在列表G中）构成的集合。</p><p style=""text-align: left;"">注：该题中提到的链表必须用链表实现，不得使用STL类，否则不得分。</p>","<p>n和m，分别代表链表的长度和列表G的大小；</p><p>链表内节点整型值的顺序；</p><p>列表G内的所有整型值。</p>","<p>列表G中组件的个数。<br /></p>","[{""input"": ""4 3\n0 1 2 3\n0 1 3\n"", ""output"": ""2""}]","69dd85e678a31b9ba4464406fd2c8fd4","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>解释：链表中，0和1是相连的，且G中不包含2，所以[0,1]是一个组件，同理[3]也是一个组件，故返回2。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-05 03:43:02.379739+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",47,5,1,"C","{""0"": 5, ""1"": 4, ""4"": 6, ""-1"": 28, ""-2"": 4}",0,49,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
438,"连通分量","<p>给定一个无向图G，其中包含n个顶点（编号为1-n）和m条边，求图中连通分量的个数。连通分量的定义为：一个无向图的极大连通子图称为该图的连通分量。连通图的极大连通子图只有1个，就是其自身。非连通图可以拆为数个极大，也称连通分量，每个分量显然都是连通图。<br /></p>","<p>n（n&gt;=0）和m (m&gt;=0)，分别代表图中顶点和边的个数；</p><p>图中每条边连接的两个顶点的值。</p>","<p>图中连通分量的个数。<br /></p>","[{""input"": ""4 2\n1 2\n3 4\n"", ""output"": ""2""}]","537d78c36334ae3e240783950d6c7863","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>解释：图中有4个顶点{1,2,3,4}，其中1和2连成一条边，3和4连成一条边。那图中1和2是一个连通分量，3和4是一个连通分量，故返回2。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-05 03:44:41.261484+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",18,0,1,"D","{""4"": 3, ""-1"": 12, ""-2"": 3}",0,49,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
439,"BinaryTree","<p>1、给出层序遍历序列abc##de(#代表空指针), 构建二叉树。</p><p>2、实现一个函数，检查二叉树是否平衡。平衡树的定义：任意一个节点，其两棵子树的高度差不超过1。</p><p>3、找出二叉树中某两个节点的最近公共祖先。最近公共祖先的定义：对于有跟树T的两个节点p,q，最近公共祖先表示为一个结点x，满足x是p、q的祖先且x的深度尽可能大（一个节点也可以是它自己的祖先）。</p><p>说明：所有节点的值都是唯一的，p,q为不同节点且均存在于给定的二叉树中。</p>","<p>1、层序遍历序列</p><p>2、二叉树中两个节点p和q的值</p>","<p>1、输出二叉树是否是平衡二叉树</p><p>2、输出两个节点p和q的最近公共祖先的值</p>","[{""input"": ""abc##de\nd e"", ""output"": ""true\nc""}]","e34b48be515082eb371627745b579030","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-09 09:34:56.513609+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",53,24,511,"1","{""0"": 24, ""4"": 7, ""-1"": 10, ""-2"": 12}",0,50,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
440,"最小生成树","<p>输入一个带权连通图，输出最小生成树</p>","<p>输入包含如下内容：</p><p>第一行两个整型数N和M，分别表示结点的个数以及带权边的个数</p><p>第二行输入N个数，分别表示N个结点</p><p>第三行开始，一共输入M行，每行有三个整型数，分别表示边的两端结点以及权值；</p>","<p>输出包含两个部分：</p><p>1、输出若干行，每行输出三个数 a,b,c（相邻两数中间空一个空格），分别表示最小生成树中边的两端结点以及权值，需要注意的是：</p><p>（1）请按照权值的顺序按行依次输出；</p><p>（2）每行前两个值a和b（边的两端结点）要满足a&lt;=b。</p><p>2、最后一行输出一个整型数，表示最小生成树所有权值和，末尾不要留换行符。</p>","[{""input"": ""6 10\n0 1 2 3 4 5\n0 1 6\n2 0 1\n0 3 5\n1 2 5\n2 3 5\n1 4 3\n2 4 6\n2 5 4\n3 5 2\n4 5 6"", ""output"": ""0 2 1\n3 5 2\n1 4 3\n2 5 4\n1 2 5\n15""}, {""input"": ""6 10\n0 1 2 3 4 5\n0 1 6\n0 3 4\n1 3 7\n1 4 7\n1 2 10\n3 2 8\n3 4 12\n2 4 5\n2 5 6\n4 5 7"", ""output"": ""0 3 4\n2 4 5\n0 1 6\n2 5 6\n1 4 7\n28""}]","531335dc1cb2d285cf8cf64132d5a3a4","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++""]","{}","2020-06-17 01:32:24.135391+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",34,16,511,"1","{""0"": 16, ""4"": 2, ""-1"": 10, ""-2"": 6}",0,51,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
441,"右叶子之和","<p><font>给定一棵二叉树，计算</font><font>树</font><font>中</font><font>所有右叶子之和。</font><br /></p><p>注：<font style="""">题中给定的二叉树需要自己根据测试案例中的层序遍历序列构建。</font></p>","<p><font>输入二叉树的层序遍历的长度；</font></p><p><font>输入二叉树的层序遍历序列（树中的每个节点的值都为大于等于0的整型数据，</font>-1<font>代表空指针）。</font><br /></p>","<p><font>输出二叉树的所有右叶子之和。（行末尾无空格）</font><br /></p>","[{""input"": ""11\n3 9 18 15 1 -1 -1 -1 -1 -1 -1"", ""output"": ""19""}]","a0303217dfae2f9738ed59abf76c3406","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-27 04:05:17.351826+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",84,23,511,"1","{""0"": 23, ""4"": 3, ""-1"": 47, ""-2"": 11}",0,52,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
442,"二叉树剪枝","<p><font>给定</font><font>一棵</font><font>二叉树</font><font>，树</font><font>中</font><font>的每个结点的值要么是</font>0<font>，要么是</font><font>1</font><font>。移除</font><font>树中</font><font>所有不包含</font>1<font>的子树（子树节点全为0）。</font><br /></p><p><font><font>子树的定义：对于树中的任意一个节点</font>node,<font>以</font>node<font>为根，</font>node<font>的后代构成的二叉树称之为子树。</font><br /></font></p><p>注：<font style="""">题中给定的二叉树需要自己根据测试案例中的层序遍历序列构建。</font></p>","<p><font>输入二叉树的层序遍历序列的长度；</font></p><p><font>输入二叉树的层序遍历序列（树中的每个节点的值都为大于等于0的整型数据，</font>-1<font>代表空指针）。</font><br /></p>","<p><font>输出移除</font><font>所有不包含</font>1<font>的子树</font><font>后的二叉树的层序遍历序列（</font>-1<font>代表空指针）。(行末尾有空格)</font><br /></p>","[{""input"": ""15\n1 0 1 0 0 0 1 -1 -1 -1 -1 -1 -1 -1 -1"", ""output"": ""1 -1 1 -1 1 -1 -1 ""}]","c8101ea7ec20f4a8b0cbe35ef7f0446b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-27 04:22:46.428659+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",59,12,511,"2","{""0"": 12, ""4"": 4, ""-1"": 36, ""-2"": 7}",0,52,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
443,"图的连通分量","<p><font>给定一个无向图</font>G<font>，其中包含</font><font>n</font><font>个顶点（编号为</font><font>1-n</font><font>）和</font><font>m</font><font>条边，求图中连通分量的个数。连通分量的定义为：一个无向图的极大连通子图称为该图的连通分量。连通图的极大连通子图只有</font><font>1</font><font>个，就是其自身。非连通图可以拆为数个极大，也称</font><a href=""https://www.baidu.com/s?wd=%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao"" target=""_blank""><font>连通分量</font></a><font>，每个分量显然都是连通图。</font><br /></p>","<p>n<font>（</font>n&gt;=0<font>）和</font>m(m&gt;=0)<font>，</font><font>分别代表</font><font>图中顶点和边的个数；</font></p><p><font>图中每条边连接的两个顶点的值。</font></p>","<p><font>图中连通分量的个数。（行末尾无空格）</font><br /></p>","[{""input"": ""4 2\n1 2\n3 4"", ""output"": ""2""}]","2b05de13875692efa69e4d9c74e16331","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-06-27 04:26:34.081224+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",56,11,511,"3","{""0"": 11, ""3"": 4, ""4"": 6, ""-1"": 29, ""-2"": 6}",0,52,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
444,"排序IV","<p>给定一个长度为n的正整数序列a，其中有一些值是未知的（用0表示），要求将这些未知的数用正整数填上，且最终的正整数序列是非递减序列，并且字典序是最小的。（字典序比较的定义是：对于两个不完全相同的序列a和b，假设存在一个正整数k，使得a[k] &lt; b[k]，并且对于任意i &lt; k，都满足a[i]=b[i]，则字典序a &lt; b）。<br /></p>","<p>第一行一个整数n。（n&lt;=1000）</p><p>第二行n个整数，代表初始的整数序列。（0 &lt;= a[i] &lt;= 10^9）</p>","<p>一行n个整数，表示最终的整数序列。（注意：若不存在满足条件的序列，输出-1）<br /></p>","[{""input"": ""5\n1 2 0 0 4\n"", ""output"": ""1 2 2 2 4""}]","f509ca7f2404ce796805b123159f01a6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-14 13:40:55.788473+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",223,35,1,"A","{""0"": 35, ""4"": 11, ""-1"": 166, ""-2"": 11}",0,53,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
445,"选择运算","<p>老师给你出了一道题：初始你手上有一个值为0的数，现在你需要经过n次运算，每次运算有两种选择，你需要选择其中的一种并和你手上的数进行运算，n次运算后输出最大的结果（运算按照从前往后的顺序，不需要考虑优先级）。这自然难不倒会编程的你，所以解决它吧。<br /></p>","<p>第一行一个整数n，表示运算次数。（n&lt;=18）</p><p>接下来n行，每行两个字符串，表示两种运算。（运算由运算符和数组成，运算符包括’+’,’-’,’*’,’/’，为了简化运算，除法所得小数将被舍掉，数的范围在1~10之间）。</p>","<p>一行一个整数，表示最大的结果。<br /></p>","[{""input"": ""3\n+1 *3\n+2 *4\n-3 /2"", ""output"": ""2""}]","5594ad01423af2b87f0e40a09878fe74","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-14 13:44:16.705247+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",135,47,1,"B","{""0"": 47, ""4"": 8, ""-1"": 66, ""-2"": 14}",0,53,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
446,"保险箱","<p>王总忘记了自己保险箱的密码，想找你帮忙破解。根据王老板的提示，密码是从0-9中选取的前n个数字从小到大进行排列组合，得到的第m个数字组合就是密码。例如：n=3, 则进行排列组合的前三个数字就是0，1，2，王总记录提示的m是5。则根据 这三个数字的所有排列组合：012，021，102，120，201，210，王总的保险箱的密码为201。<br /></p>","<p>输入组合数字个数n （1&lt;=n&lt;=10)；和记录的密码在从大到小排列中的位置是m（1&lt;=m&lt;=n！）。<br /></p>","<p>输出你所查找的密码。<br /></p>","[{""input"": ""3 2"", ""output"": ""021""}]","e725d06f59c32112bb1876b5c0f15af3","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-14 13:50:47.438161+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",130,31,1,"C","{""0"": 31, ""1"": 29, ""3"": 1, ""4"": 19, ""-1"": 33, ""-2"": 17}",0,53,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
447,"分割数组","<p style=""margin-left: 0cm;"">给定一个长度为n的非负整数数组和一个整数 m，将这个数组分成 m 个非空的连续子数组，每个子数组内所有数据的和被称为该子数组的分数。对于任意一种分割方案，其对应的所有子数组分数的最大值，记为该次分割方案的分数。请问所有分割方案的分数的最小值是多少？</p><p style=""margin-left: 0cm;"">解释：假设数组为[7, 2, 5, 10, 8], m=2。给定一种分割方案为[7,2], [5,10,8]。那两个子数组的分数分别为为9和23，该分割方案的分数为23（两个子数组分数的最大值）.</p>","<p style=""text-align: left;"">分别输入数组的长度n和整数m的值；</p><p style=""text-align: left;"">依次输入数组中的n个非负整数。</p>","<p>输出所有分割方案的分数的最小值。（行末尾无空格）<br /></p>","[{""input"": ""5 2\n7 2 5 10 8\n"", ""output"": ""18""}]","3f5eaa93bddf2aace8f91f4a8918e04b","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-14 14:15:38.819647+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",113,12,1,"D","{""0"": 12, ""1"": 3, ""4"": 8, ""-1"": 77, ""-2"": 13}",0,53,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
448,"二叉树","<p>给定一棵二叉树，树中的每个结点的值要么是0，要么是1。移除树中所有不包含1的子树（子树节点全是0）。子树的定义：对于树中的任意一个节点node,以node为根，node的后代构成的二叉树称之为子树。</p><p style=""text-align: left;"">注：题中给定的二叉树需要自己根据测试案例中的层序遍历序列构建。</p>","<p>输入二叉树的层序遍历序列的长度；</p><p>输入二叉树的层序遍历序列（树中的每个节点的值都为大于等于0的整型数据，-1代表空指针）。</p>","<p>输出移除所有不包含1的子树后的二叉树的层序遍历序列（-1代表空指针）。（行末尾有空格）<br /></p>","[{""input"": ""15\n1 0 1 0 0 0 1 -1 -1 -1 -1 -1 -1 -1 -1\n"", ""output"": ""1 -1 1 -1 1 -1 -1""}]","8450455146e0fa45a28e7f4a142822e1","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>解释：红色节点满足条件“所有不包含1的子树”。右图为返回的答案。</p><p><img alt=""图片.png"" src=""/public/upload/9dd8874d3c.png"" width=""419"" height=""113"" /><br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-14 14:20:21.655278+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",100,10,1,"E","{""0"": 10, ""4"": 10, ""-1"": 78, ""-2"": 2}",0,53,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
449,"二分图","<p style=""text-align: left;"">给定一个无向图G，当这个图为二分图时返回true。</p><p style=""text-align: left;"">二分图的定义为：如果我们能将一个图的节点集合分割成两个独立的子集A和B，使得图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p><p style=""text-align: left;"">G将会以邻接表的方式给出，G[i]表示图中与节点i相连的所有节点。每个节点都是一个在0到G.length-1之间的整数。图中没有自环和平行边：G[i]中不存在i，并且G[i]中没有重复的值。</p>","<p style=""text-align: left;"">输入图中节点的个数；</p><p style=""text-align: left;"">依次输入与每个节点相连的所有节点（-1代表与某个节点相连的所有节点输入完毕）。</p>","<p>输出该图是否为二分图：是就输出true，不是就输出false。（行末尾无空格）<br /></p>","[{""input"": ""4\n1 3 -1\n0 2 -1\n1 3 -1\n0 2 -1\n"", ""output"": ""true""}]","c2bae3c46a0b2ef5796a281230d0f917","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-14 14:23:13.324795+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",89,21,1,"F","{""0"": 21, ""1"": 2, ""3"": 1, ""4"": 16, ""-1"": 42, ""-2"": 7}",0,53,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
450,"转置矩阵(10分）","<p>给定一个矩阵A，m行n列，返回A的转置矩阵。</p><p>矩阵的转置是指将矩阵的主对角线翻转，交换矩阵的行索引与列索引。<br /></p>","<p>输入第一行给出两个正整数m和n</p><p>随后m行，每行给出n个100以内的正整数，其间以空格分隔</p>","<p>输出该矩阵的转置矩阵</p>","[{""input"": ""2 3\n1 5 6\n3 9 4"", ""output"": ""1 3\n5 9\n6 4""}]","c9f11beaaf89d51f572ae0886eadf61c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>1 &lt;= m &lt;= 1000<br /></p><p>1 &lt;= n &lt;= 1000<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-20 14:02:08.589884+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",30,5,1,"1","{""0"": 5, ""4"": 5, ""-1"": 20}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
451,"压缩字符串(10分）","<p>给定一串字符，使用特定的方法将其压缩成新的字符串，压缩后的长度必须始终小于或等于原数组长度。具体方法为：计算字符连续出现的次数，若次数为1保持不变;若次数&gt;1,则进行压缩。<br /></p>","<p>输入一串由&#039;a&#039; - &#039;z&#039;组成的字符串</p>","<p>输出压缩后的新字符串</p>","[{""input"": ""aabbccc"", ""output"": ""a2b2c3""}, {""input"": ""abbbbbbbbbbbb"", ""output"": ""ab12""}]","6be8147a06af611faed3493e6dcb22fd","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>1 &lt;= 字符串长度 &lt;= 10000<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-20 14:50:32.065653+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",14,5,1,"2","{""0"": 5, ""4"": 5, ""-1"": 4}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
452,"删除排序链表中的重复元素(15分）","<p>输入一串由小到大排列的int类型的数字以-1结束输入，将读取的数组构造成一个链表，删除所有重复的元素，使得每个元素只出现一次，最后输出新的链表。<br /></p>","<p>输入一串int类型的数字，以-1结束输入<br /></p>","<p>输出去重后的排序链表，中间用空格隔开。<br /></p>","[{""input"": ""1 1 2 -1"", ""output"": ""1 2""}, {""input"": ""1 1 2 3 3 -1"", ""output"": ""1 2 3""}]","a792c7c088b410f8c237f04047df32a7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p><br />链表的中重复元素的查找，要在构建时进行，即链表中存在了不插入，不存在将节点插入到链表最后</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-20 15:23:45.281957+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",6,3,1,"3","{""0"": 3, ""4"": 2, ""-1"": 1}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
453,"三个数的最大乘积(15分）","<p>本题要求实现一个在给定数组中找出由三个数组成的最大乘积的简单函数。<br /></p><p><b>函数接口定义：</b><br /></p><p>int canThreePartsEqualSum ( int *A, int n); 其中A 为给出的整型数组，n为数组长度</p><p>请实现函数接口，并在主函数中调用它。<br /></p>","<p>第一行给出n</p><p>第二行给出n个整数，由空格分隔</p>","<p>输出由数组中的三个数组成的最大乘积</p>","[{""input"": ""4\n1 2 3 4"", ""output"": ""24""}, {""input"": ""5\n-3 -1 6 5 -2"", ""output"": ""36""}]","aacc82d765620ff409c35a2a0ad9573d","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>3 &lt;= n &lt; 10</p><p>输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-21 02:24:30.638456+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",19,7,1,"4","{""0"": 7, ""-1"": 10, ""-2"": 2}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
454,"上台阶问题(10分）","<p>一只兔子一次可以跳上1级台阶，也可以跳上2级台阶。求该兔子跳上一个 n级的台阶总共有多少种跳法。请采用递归的思想来解此题。<br /></p>","<p>输入一个正整数n</p>","<p>输出结果数</p>","[{""input"": ""2"", ""output"": ""2""}, {""input"": ""7"", ""output"": ""21""}]","4b907376bf3df7a424bd048dde175cc9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>1 &lt;= n &lt;= 90</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-21 03:06:58.22188+00",NULL,60000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",27,2,1,"5","{""0"": 2, ""1"": 18, ""-1"": 5, ""-2"": 2}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
455,"将数组分成和相等的三个部分(15分）","<p>给你一个数组A，只有可以将其划分为三个和相等的非空部分时才返回true，否则返回false。<br /></p>","<p>第一行给出数组A的长度n</p><p>第二行给出n个整数，用空格分隔<br /><br /></p>","<p>如果可以将目标数组划分为三个和相等的非空部分时才返回true，否则返回false。<br /></p>","[{""input"": ""11\n0 2 1 -6 6 -7 9 1 2 0 1"", ""output"": ""true""}, {""input"": ""11\n0 2 1 -6 6 7 9 -1 2 0 1"", ""output"": ""false""}]","d69851070d6e00aaa752493bb6affdb2","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>如果可以找出索引 i+1 &lt; j 且满足 A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1] 就可以将数组三等分</p><p>3 &lt;= n &lt; 10000</p><p>数组元素大小介于(10^-4, 10^4)之间</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-21 03:26:02.039708+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",27,3,1,"6","{""0"": 3, ""1"": 16, ""-1"": 8}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
456,"时间差计算(10分）","<p>输入两个时刻（24小时制），要求定义一个时间结构体类型（时和分），并计算两个时刻之间的时间差<br /></p>","<p>给出两行时间</p>","<p>计算两个时间的时间差，输出相隔的小时数和分钟数</p>","[{""input"": ""23:59\n00:01"", ""output"": ""0h2m""}, {""input"": ""16:31\n9:54"", ""output"": ""6h37m""}]","ad849967814c90656fd925ad04efdd1a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>时间差应不超过12h</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-21 04:03:31.401598+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",28,8,1,"7","{""0"": 8, ""-1"": 18, ""-2"": 2}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
457,"大数乘小数(15分）","<p>大数通常指超过int或long表示范围的整数数值，通常以字符串数组的形式保存，此题给出1个大数和1个小数，要求计算两数之积并输出。</p>","<p>输入共两行，第一行为1个大数 a，第2行为一个小数 b</p>","<p>输出两数之积</p>","[{""input"": ""124525798723480985986\n6"", ""output"": ""747154792340885915916""}, {""input"": ""637893778455431\n15"", ""output"": ""9568406676831465""}]","f00e19c973c590c495d1781e1a02e8d3","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>10^10 &lt; a &lt; 10^30</p><p>1 &lt; b &lt; 100</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-21 08:18:36.675819+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"High","",5,2,1,"8","{""0"": 2, ""-1"": 3}",0,54,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
458,"分析矩阵 （10分）","<h5>给定一个矩阵A，求矩阵 A 每一列的平均值和每一行的最大值，并依次输出。</h5>","<p>第一行为两个整数m和n ( 0 &lt; m &lt; 1000 , 0 &lt; n &lt; 1000), 其分别表示矩阵的行数和列数。</p><p>后m行，为矩阵对应的数据。</p>","<p>输出两行，第一行为矩阵列的平均值（直接取整）。第二行为矩阵每行的最大值。注意结果可能会超出int类型。</p>","[{""input"": ""2 3\n1 2 3\n3 4 5"", ""output"": ""2 3 4\n3 5""}]","dcadb3ff696cee5b5504618ef378608b","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>每个数值之间用空格隔开，但每一行末尾不能有空格。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-25 09:46:30.164475+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",13,1,1,"1","{""0"": 1, ""-1"": 12}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
459,"字符排序 （10分）","<p>将打乱的字符，按照指定的顺序排序。</p>","<p>给定2行数据; 第1行n个字符，每个字符以空格分开；第2行为一组编号（0,...,n-1），代表第1行被打乱的字符的真实循序。</p><p>请按照第2行的顺序信息复原第1行的字符。<br /></p>","<p>输出一行复原的字符串。</p>","[{""input"": ""o d o g !\n1 3 2 0 4\n"", ""output"": ""good!""}]","54c711344d43b22ff6b288c750dc76f6","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>末尾不能有换行符。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-25 14:26:46.587347+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",17,1,1,"2","{""0"": 1, ""4"": 6, ""-1"": 9, ""-2"": 1}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
460,"数素数 （10分）","<p>给定两个正整数a,b, 以表示一个范围 包括a,b。 输出该范围内素数的个数。（函数，mid）<br /></p><p>要求：写出一个 判断当前数是否为素数的函数，并在主函数中调用。函数名为<b>isPrime , 返回布尔值。</b><br /></p>","<p>给定两个正整数, m, n (0&lt;m &lt; n &lt;1000)。<b>范围为闭区间，即 [ m, n]。</b><br /></p>","<p>返回指定范围内所有的素数个数。</p>","[{""input"": ""2 8"", ""output"": ""4""}, {""input"": ""10 20"", ""output"": ""4""}]","5c4b0ef1f18de8d8050bd89e33eeaf32","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>素数即质数，是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数。（即只能被1或其自身整除）<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-25 16:01:34.055437+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",5,5,1,"3","{""0"": 5}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
461,"成绩排名 （15分）","<p>C语言考试成绩信息的每条记录包含，考试学号，考试姓名，考试成绩(0~100)。</p><p><b>请根据所有考试信息，构造考试记录结构体。</b>同时找出成绩最高的同学（们）的姓名 以及成绩最低同学（们）的学号。</p>","<p>第一行为整数n，n &lt; 100;</p><p>之后有n行，每行的信息为</p><p>学号 姓名 分数</p><p>其中 学号、姓名字段大小不超过16个字节。分数为0到100的整数。</p>","<p>输出两行，第一行为成绩最高同学的姓名。第二行为成绩最低同学的学号。</p><p>如果出现同分情况，需要输出所有同分同学对应的信息，并以空格隔开,<b>且输出顺序依照输入时的顺序。</b></p><p>注意，每行行末不能有空格。第二行（即最后一行）末尾不能有换行符。</p>","[{""input"": ""3\nid1 stu1 100\nid68 stu213 50\nid2 stu2 25"", ""output"": ""stu1\nid2""}, {""input"": ""4\nid1 stu3 100\nid68 stu213 50\nid2 stu2 25\nid3 stu1 100"", ""output"": ""stu3 stu1\nid2""}]","1229fbe5235a4f883a5965543b597b50","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>请务必使用结构体</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-25 17:24:26.55089+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",5,4,1,"4","{""0"": 4, ""-1"": 1}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
462,"链表插入和遍历 （15分）","<p><b>构造一个链表</b>，在指定位置插入节点<b>(实现链表的插入操作），</b>最后遍历链表，要求<b>从头到尾</b>输出遍历链表信息。</p>","<p>第一行为两个int类型， n, m ; 其中 n &gt;= 0 ，表示需要插入的节点位置，<b>位置从0开始</b>； m &gt;= 0 为需要插入的节点值。</p><p>第二行为原始链表，长度 &gt;= n。每个节点值均为整数，<b>-1 表示链表结束</b>。</p><p>节点值可能会出现重复。</p>","<p>按指定位置插入节点，从头到尾输出节点，以 -1作为输出结束。</p>","[{""input"": ""0 6\n1 3 8 -1"", ""output"": ""6 1 3 8 -1""}, {""input"": ""2 99\n2 1 3 5 5 5 5 -1"", ""output"": ""2 1 99 3 5 5 5 5 -1""}]","6cb08deec22e9b8d6bb4760fc3aa4952","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>要求实现链表的建立和插入操作。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-26 06:02:05.007367+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",6,2,1,"5","{""0"": 2, ""-1"": 4}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
463,"矩形拼图 (10分)","<p>用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><p><b>要求用递归的方法解决此问题。</b><br /></p>","<p>输入正整数 n</p>","<p>输出一共有几种方法。</p>","[{""input"": ""2"", ""output"": ""2""}, {""input"": ""10"", ""output"": ""89""}]","c4f4b2b02f62e992b988ce54cb9dd102","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-26 07:16:02.949642+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",9,2,1,"6","{""0"": 2, ""1"": 5, ""-1"": 2}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
464,"检查密码 （15分）","<p>登入网站是一般需要输入密码。现在写一个自动检查用户密码的程序。具体要求如下：<br /><br /></p><p>密码不少于6个字符组成，且不能超过30个字符。<b>密码只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。</b></p><p>- 如果密码合法，输出 yes</p><p>- 如果密法太长，不论合法与否，都输出 too long</p><p>- 如果密码太短，不论合法与否，都输出 too short</p><p>- 如果密码长度合法，但存在不合法字符，则输出 illegal char</p><p>- 如果密码长度合法，但只有字母没有数字，则输出 need num</p><p>- 如果密码长度合法，但只有数字没有字母，则输出 need char</p><p>每次只输出一种提醒，提醒种类优先级由上到下依次递减。</p>","<p>输入为一行密码</p>","<p>输出为判断密码结果的信息。输出的信息首尾不能有空格。</p>","[{""input"": ""Ecun.2020"", ""output"": ""yes""}, {""input"": ""Ecun 2020"", ""output"": ""illegal char""}]","419d85420ff35abf3174a5f64dd9c6c0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-26 07:44:44.936435+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",15,1,1,"7","{""0"": 1, ""4"": 11, ""-1"": 3}",0,55,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
465,"分数减法 （15分）","<p>实现分数减法。分数分为，整数部分和纯分数部分。</p>","<p>输入为一行，4个部分，分别为两个分数的分子和分母。每个部分分别以空格隔开。</p><p>示例：</p><p style=""margin-left: 40px;"">分子1 分母1 分子2 分母2</p><p>注意输入的分子和分母均可以为负数，输入的分数均为最简形式。</p><p>*分母不会为0。无需考虑大整数。</p>","<p>输出 分数1 - 分数2 的结果</p><p>示例：</p><p style=""margin-left: 40px;"">整数部分 分子/分母</p><p>输出要求：</p><p>1. 分数为最简形式。即分子分母不能再约分。</p><p>2. 如果有整数部分，整数部分和纯分数部分以空格隔开。若没有整数部分，则直接输出纯分数部分。</p><p>3. 如果没有分数部分（即分子为0），则直接输出整数部分。</p><p>4. 如果结果为负数：如果分数有整数部分，则负号在整数部分，否在在分子部分。</p><p>5. 若减法结果为0 则输出0即可。</p>","[{""input"": ""3 -2 -3 2"", ""output"": ""0""}, {""input"": ""1 2 3 1"", ""output"": ""-2 1/2""}, {""input"": ""3 5 7 10"", ""output"": ""-1/10""}]","62e7805d06363df5be174cabb73d4fbf","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>解题关键：</p><p>1. 实现寻找两个数最大公约数的函数来化简分数。</p><p>2. 保证结果中的分母，始终为正数。</p><p>C语言中的整型绝对值函数: abs()函数，在头文件“stdlib.h”中。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-07-26 08:42:25.517378+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",9,2,1,"8","{""0"": 2, ""-1"": 7}",0,55,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
466,"方阵循环右移","<p>本题要求编写程序，将给定n×n方阵中的每个元素循环向右移m个位置，即将第0、1、⋯、n−1列变换为第n−m、n−m+1、⋯、n−1、0、1、⋯、n−m−1列。<br /></p>","<p>输入第一行给出两个正整数m和n（1≤n≤6）。接下来一共n行，每行n个整数，表示一个n阶的方阵。<br /></p>","<p>按照输入格式输出移动后的方阵：即输出n行，每行n个整数，每个整数后输出一个空格。<br /></p>","[{""input"": ""2 3\n1 2 3\n4 5 6\n7 8 9"", ""output"": ""2 3 1 \n5 6 4 \n8 9 7 ""}]","5816462c040c3a40829bdcbbf5f3840e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-10-09 09:23:53.48878+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",154,22,1,"5","{""0"": 22, ""4"": 11, ""-1"": 100, ""-2"": 21}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
467,"斐波那契数列","<p>给出一个n，求斐波那契数列第n项和第n-1项两数的最大公约数和最小公倍数（n&gt;=4）<br /></p>","<p>输入一个正整数n（n&gt;=4）。<br /></p>","<p>分别输出第n项和n-1的最大公约数和最小公倍数（整数形式）。<br /></p>","[{""input"": ""6"", ""output"": ""1 40""}]","b957abd0c4887e299adc80a5b925209c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p style=""margin-left: 0px;"">斐波那契数列 ： F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）<br /></p><p>斐波那契数列是从第零项开始，数列表示为 0 1 1 2 3 5 8 13......当n=6，F(n)=8，F(n-1)=5。</p>","[""C"", ""C++""]","{}","2020-10-09 09:36:33.778736+00",NULL,3000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",144,59,1,"8","{""0"": 59, ""1"": 8, ""4"": 30, ""-1"": 34, ""-2"": 13}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
468,"天数计算","<p>输入某年某月某日，判断这几一天是这一年的第几天？<br /></p>","<p>分别输入整数形式的某年某月某日<br /></p>","<p>判断这一天是这一年的第几天，输出为整数形式<br /></p>","[{""input"": ""2018 12 6"", ""output"": ""340""}, {""input"": ""2020 3 1"", ""output"": ""61""}]","7192e61ce05a9778799085843aad86f9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>注意：闰年的2月份是29天。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-09 09:44:31.717416+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",216,56,1,"3","{""0"": 56, ""4"": 3, ""-1"": 114, ""-2"": 43}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
469,"矩阵运算","<p>给定一个n×n的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。<br /></p>","<p>输入第一行给出正整数n（1&lt;n≤10）；随后n行，每行给出n个整数，其间以空格分隔。<br /></p>","<p>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。<br /></p>","[{""input"": ""4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1"", ""output"": ""35""}]","cc705834469eb51ab602a77835efd6ee","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-09 09:47:09.504783+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",144,35,1,"7","{""0"": 35, ""1"": 8, ""4"": 10, ""-1"": 70, ""-2"": 21}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
470,"猜数字游戏","<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次或者3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。<br /></p>","<p>输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。<br /></p>","<p>在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。<br /></p>","[{""input"": ""58 4\n70\n50\n56\n58\n60\n-2\n"", ""output"": ""Too big\nToo small\nToo small\nGood Guess!\n""}]","1291110cceeef1f72ab80c58b3cebe8e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-09 09:49:36.535408+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",497,28,1,"6","{""0"": 28, ""1"": 1, ""4"": 40, ""-1"": 376, ""-2"": 52}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
471,"重量单位转换","<p>实现重量盎司和克的<b>相互</b>转换。</p><p>为简便计算，规定 1盎司 = 28.35 克。</p>","<p>输入2个数a, b;  a为整数，b为小数。</p><p>a 表示转换模式, 若，a = 0 表示已知 盎司， 需要将重量转化为克。若 a = 1 则表示，已知 克，需要将重量转化为盎司。</p><p>b 为已知重量（单位根据a的模式判断）</p>","<p>输出重量b，单位转化后的值。要求保留2位小数。</p>","[{""input"": ""0 1.0"", ""output"": ""28.35""}, {""input"": ""1 28.35"", ""output"": ""1.00""}]","6921992c55009938175cfc4c77be0fde","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-11 13:13:30.823123+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",121,65,1,"1","{""0"": 65, ""4"": 2, ""-1"": 33, ""-2"": 21}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
472,"计算分段函数","<p>计算下列分段函数：</p><p><img alt=""2.png"" src=""/public/upload/76cbf63762.png"" width=""400"" height=""88"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>根据输入 x 计算 f(x) 的结果 result, 结果直接取整。（注意不是四舍五入，而是类型的强制转换，即只取整数部分）</p>","[{""input"": ""4.00"", ""output"": ""7""}, {""input"": ""-2"", ""output"": ""1""}]","9796081c6ca950dc6213541f3ede9806","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-11 13:59:17.144855+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",174,61,1,"2","{""0"": 61, ""4"": 3, ""-1"": 83, ""-2"": 27}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
473,"非素数之和","<p>给定两个大于0的整数，m和n，求m和n之间的所有<b>非素数</b>之和（范围包括m,n）<br /></p>","<p>正整数m, n ( 2&lt;= m &lt;= n);</p><p>两个整数之间以空格隔开。</p>","<p>输出范围内所有非素数的和。</p>","[{""input"": ""2 10"", ""output"": ""37""}]","a82bed6367e3ef72477b1527777323ff","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>区间[2,10] 所有的<b>非素数</b>为4 6 8 9 10</p><p>所以输出 4 + 6 + 8 + 9 + 10 = 37</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-11 14:23:54.23757+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",163,56,1,"4","{""0"": 56, ""1"": 5, ""4"": 2, ""-1"": 85, ""-2"": 15}",0,56,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
474,"统计大写辅音字母","<p>输入一行字符串（少于100个字符），包含空格和特殊符号等。 统计并输出其中大写辅音字母的个数。大写辅音字母是指除&#039;A&#039; , &#039;E&#039; , &#039;I&#039; , &#039; O &#039; ,  &#039; U &#039;以外的大写字母。试编写相应程序。<br /></p>","<p>输入一行字符串（少于100个字符），包含空格和特殊符号等。<br /><br /></p>","<p>输出该字符串中包含大写辅音字母的数量。</p>","[{""input"": ""DASE school"", ""output"": ""2""}]","e75dc602889a26009d023460e88aacab","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-28 06:43:32.96312+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",291,65,358,"7-6","{""0"": 65, ""1"": 1, ""4"": 160, ""-1"": 43, ""-2"": 22}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
475,"字符串替换","<p>输入一个字符串（少于 80 个字符），包含空格和特殊符号等。将其中的大写字母用下面列出的对应大写字母替换， 其余字符不变， 输出替 换后的字符串。试编写相应程序。</p><p>原字母对应字母</p><p>A ——&gt; Z</p><p>B ——&gt; Y</p><p>C ——&gt; X</p><p>D ——&gt; W</p><p>...</p><p>X ——&gt; C</p><p>Y ——&gt; B</p><p>Z ——&gt; A<br /></p>","<p>输入一个字符串（少于 80 个字符），包含空格和特殊符号等。<br /></p>","<p>输入一个字符串（少于 80 个字符），包含空格和特殊符号等。<br /></p>","[{""input"": ""DASE"", ""output"": ""WZHV""}, {""input"": ""HSAHD NDUEAPSJDI wiziaijsdzjisiadasdde"", ""output"": ""SHZSW MWFVZKHQWR wiziaijsdzjisiadasdde""}]","b6c7a5d009bd4e16d7850d61d90cb13c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-28 06:50:26.540346+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",232,62,358,"7-7","{""0"": 62, ""1"": 6, ""4"": 77, ""-1"": 75, ""-2"": 12}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
476,"字符串转换成十进制整数。","<p>输入一个以字符 &quot;&quot; #&quot;&quot; 结束的字符串， 滤去所有的非十六进 制字符 （不分大小写）， 组成一个 新的表示十六进 制数字的 字符 串， 然后 将其转换为十进制 数后输出 。如果过滤后字符串的首字符为 ＂-＂， 代表该 数是负数。试编写相应程序。<br /></p>","<p>输入一个以字符 &quot;&quot; #&quot;&quot; 结束的字符串<br /></p>","<p>输出该字符串对应生成的十进制表示</p>","[{""input"": ""-sasd#"", ""output"": ""-173""}]","27d2e6f16dd61f5a29663d170f7893eb","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-28 06:54:44.780777+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",140,58,358,"7-8","{""0"": 58, ""1"": 1, ""4"": 7, ""-1"": 65, ""-2"": 9}",0,26,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
477,"统计大写辅音字母","<p>输入一行字符串（少于80个字符），包含空格和特殊符号等。 统计并输出其中大写辅音字母的个数。大写辅音字母是指除&#039;A&#039; , &#039;E&#039; , &#039;I&#039; , &#039; O &#039; ,  &#039; U &#039;以外的大写字母。试编写相应程序。<br /></p>","<p>输入一行字符串（少于80个字符），包含空格和特殊符号等。<br /><br /></p>","<p>输出该字符串中包含大写辅音字母的数量。</p>","[{""input"": ""DASE school"", ""output"": ""2""}]","e75dc602889a26009d023460e88aacab","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-28 10:34:52.491989+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,358,"1-184","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
478,"字符串替换","<p>输入一个字符串（少于 80 个字符），包含空格和特殊符号等。将其中的大写字母用下面列出的对应大写字母替换， 其余字符不变， 输出替 换后的字符串。试编写相应程序。</p><p>原字母对应字母</p><p>A ——&gt; Z</p><p>B ——&gt; Y</p><p>C ——&gt; X</p><p>D ——&gt; W</p><p>...</p><p>X ——&gt; C</p><p>Y ——&gt; B</p><p>Z ——&gt; A<br /></p>","<p>输入一个以回车结束的字符串（少于 80 个字符）<br /></p>","<p>输入一个字符串（少于 80 个字符），包含空格和特殊符号等。<br /></p>","[{""input"": ""DASE"", ""output"": ""WZHV""}, {""input"": ""HSAHD NDUEAPSJDI wiziaijsdzjisiadasdde"", ""output"": ""SHZSW MWFVZKHQWR wiziaijsdzjisiadasdde""}]","b6c7a5d009bd4e16d7850d61d90cb13c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-28 10:35:02.362389+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,358,"1-185","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
479,"字符串转换成十进制整数。","<p>输入一个以字符 &quot;&quot; #&quot;&quot; 结束的字符串， 滤去所有的非十六进 制字符 （不分大小写）， 组成一个 新的表示十六进 制数字的 字符 串， 然后 将其转换为十进制 数后输出 。如果过滤后字符串的首字符为 ＂-＂， 代表该 数是负数。试编写相应程序。<br /></p>","<p>输入一个以字符 &quot;&quot; #&quot;&quot; 结束的字符串<br /></p>","<p>输出该字符串对应生成的十进制表示</p>","[{""input"": ""-sasd#"", ""output"": ""-173""}]","27d2e6f16dd61f5a29663d170f7893eb","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-28 10:35:10.248207+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,358,"1-186","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
482,"重量单位转换","<p>实现重量盎司和克的<b>相互</b>转换。</p><p>为简便计算，规定 1盎司 = 28.35 克。</p>","<p>输入2个数a, b;  a为整数，b为小数。</p><p>a 表示转换模式, 若，a = 0 表示已知 盎司， 需要将重量转化为克。若 a = 1 则表示，已知 克，需要将重量转化为盎司。</p><p>b 为已知重量（单位根据a的模式判断）</p>","<p>输出重量b，单位转化后的值。要求保留2位小数。</p>","[{""input"": ""0 1.0"", ""output"": ""28.35""}, {""input"": ""1 28.35"", ""output"": ""1.00""}]","6921992c55009938175cfc4c77be0fde","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:19:12.143182+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-1","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
483,"计算分段函数","<p>计算下列分段函数：</p><p><img alt=""2.png"" src=""/public/upload/76cbf63762.png"" width=""400"" height=""88"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>根据输入 x 计算 f(x) 的结果 result, 结果直接取整。（注意不是四舍五入，而是类型的强制转换，即只取整数部分）</p>","[{""input"": ""4.00"", ""output"": ""7""}, {""input"": ""-2"", ""output"": ""1""}]","9796081c6ca950dc6213541f3ede9806","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:19:20.794921+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-2","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
484,"天数计算","<p>输入某年某月某日，判断这几一天是这一年的第几天？<br /></p>","<p>分别输入整数形式的某年某月某日<br /></p>","<p>判断这一天是这一年的第几天，输出为整数形式<br /></p>","[{""input"": ""2018 12 6"", ""output"": ""340""}, {""input"": ""2020 3 1"", ""output"": ""61""}]","7192e61ce05a9778799085843aad86f9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>注意：闰年的2月份是29天。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:19:27.51971+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-3","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
485,"重量单位转换","<p>实现重量盎司和克的<b>相互</b>转换。</p><p>为简便计算，规定 1盎司 = 28.35 克。</p>","<p>输入2个数a, b;  a为整数，b为小数。</p><p>a 表示转换模式, 若，a = 0 表示已知 盎司， 需要将重量转化为克。若 a = 1 则表示，已知 克，需要将重量转化为盎司。</p><p>b 为已知重量（单位根据a的模式判断）</p>","<p>输出重量b，单位转化后的值。要求保留2位小数。</p>","[{""input"": ""0 1.0"", ""output"": ""28.35""}, {""input"": ""1 28.35"", ""output"": ""1.00""}]","6921992c55009938175cfc4c77be0fde","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:24:03.56495+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",6,5,1,"1","{""0"": 5, ""-1"": 1}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
486,"计算分段函数","<p>计算下列分段函数：</p><p><img alt=""2.png"" src=""/public/upload/76cbf63762.png"" width=""400"" height=""88"" /><br /></p><p>注：可在头文件中包含math.h，并调用sqrt函数求平方根，调用pow函数求幂。<br /></p>","<p>输入在一行中给出实数x。<br /></p>","<p>根据输入 x 计算 f(x) 的结果 result, 结果直接取整。（注意不是四舍五入，而是类型的强制转换，即只取整数部分）</p>","[{""input"": ""4.00"", ""output"": ""7""}, {""input"": ""-2"", ""output"": ""1""}]","9796081c6ca950dc6213541f3ede9806","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:24:08.513593+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",6,5,1,"2","{""0"": 5, ""-2"": 1}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
487,"天数计算","<p>输入某年某月某日，判断这几一天是这一年的第几天？<br /></p>","<p>分别输入整数形式的某年某月某日<br /></p>","<p>判断这一天是这一年的第几天，输出为整数形式<br /></p>","[{""input"": ""2018 12 6"", ""output"": ""340""}, {""input"": ""2020 3 1"", ""output"": ""61""}]","7192e61ce05a9778799085843aad86f9","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>注意：闰年的2月份是29天。<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:24:12.885515+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",8,6,1,"3","{""0"": 6, ""-1"": 2}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
488,"非素数之和","<p>给定两个大于0的整数，m和n，求m和n之间的所有<b>非素数</b>之和（范围包括m,n）<br /></p>","<p>正整数m, n ( 2&lt;= m &lt;= n);</p><p>两个整数之间以空格隔开。</p>","<p>输出范围内所有非素数的和。</p>","[{""input"": ""2 10"", ""output"": ""37""}]","a82bed6367e3ef72477b1527777323ff","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>区间[2,10] 所有的<b>非素数</b>为4 6 8 9 10</p><p>所以输出 4 + 6 + 8 + 9 + 10 = 37</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:25:00.200405+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-4","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
489,"方阵循环右移","<p>本题要求编写程序，将给定n×n方阵中的每个元素循环向右移m个位置，即将第0、1、⋯、n−1列变换为第n−m、n−m+1、⋯、n−1、0、1、⋯、n−m−1列。<br /></p>","<p>输入第一行给出两个正整数m和n（1≤n≤6）。接下来一共n行，每行n个整数，表示一个n阶的方阵。<br /></p>","<p>按照输入格式输出移动后的方阵：即输出n行，每行n个整数，每个整数后输出一个空格。<br /></p>","[{""input"": ""2 3\n1 2 3\n4 5 6\n7 8 9"", ""output"": ""2 3 1 \n5 6 4 \n8 9 7 ""}]","5816462c040c3a40829bdcbbf5f3840e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-10-29 05:25:09.668411+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",0,0,1,"2-5","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
490,"猜数字游戏","<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次或者3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。<br /></p>","<p>输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。<br /></p>","<p>在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。<br /></p>","[{""input"": ""58 4\n70\n50\n56\n58\n60\n-2\n"", ""output"": ""Too big\nToo small\nToo small\nGood Guess!\n""}]","1291110cceeef1f72ab80c58b3cebe8e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:25:17.932589+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-6","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
491,"矩阵运算","<p>给定一个n×n的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。<br /></p>","<p>输入第一行给出正整数n（1&lt;n≤10）；随后n行，每行给出n个整数，其间以空格分隔。<br /></p>","<p>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。<br /></p>","[{""input"": ""4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1"", ""output"": ""35""}]","cc705834469eb51ab602a77835efd6ee","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:25:25.041438+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",0,0,1,"2-7","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
492,"斐波那契数列","<p>给出一个n，求斐波那契数列第n项和第n-1项两数的最大公约数和最小公倍数（n&gt;=4）<br /></p>","<p>输入一个正整数n（n&gt;=4）。<br /></p>","<p>分别输出第n项和n-1的最大公约数和最小公倍数（整数形式）。<br /></p>","[{""input"": ""6"", ""output"": ""1 40""}]","b957abd0c4887e299adc80a5b925209c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p style=""margin-left: 0px;"">斐波那契数列 ： F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）<br /></p><p>斐波那契数列是从第零项开始，数列表示为 0 1 1 2 3 5 8 13......当n=6，F(n)=8，F(n-1)=5。</p>","[""C"", ""C++""]","{}","2020-10-29 05:25:31.377914+00",NULL,3000,256,False,NULL,NULL,NULL,"ACM",False,"Mid","",0,0,1,"2-8","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
493,"非素数之和","<p>给定两个大于0的整数，m和n，求m和n之间的所有<b>非素数</b>之和（范围包括m,n）<br /></p>","<p>正整数m, n ( 2&lt;= m &lt;= n);</p><p>两个整数之间以空格隔开。</p>","<p>输出范围内所有非素数的和。</p>","[{""input"": ""2 10"", ""output"": ""37""}]","a82bed6367e3ef72477b1527777323ff","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>区间[2,10] 所有的<b>非素数</b>为4 6 8 9 10</p><p>所以输出 4 + 6 + 8 + 9 + 10 = 37</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:25:56.905029+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",9,6,1,"4","{""0"": 6, ""-1"": 3}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
494,"方阵循环右移","<p>本题要求编写程序，将给定n×n方阵中的每个元素循环向右移m个位置，即将第0、1、⋯、n−1列变换为第n−m、n−m+1、⋯、n−1、0、1、⋯、n−m−1列。<br /></p>","<p>输入第一行给出两个正整数m和n（1≤n≤6）。接下来一共n行，每行n个整数，表示一个n阶的方阵。<br /></p>","<p>按照输入格式输出移动后的方阵：即输出n行，每行n个整数，每个整数后输出一个空格。<br /></p>","[{""input"": ""2 3\n1 2 3\n4 5 6\n7 8 9"", ""output"": ""2 3 1 \n5 6 4 \n8 9 7 ""}]","5816462c040c3a40829bdcbbf5f3840e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-10-29 05:26:01.662814+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",35,14,1,"5","{""0"": 14, ""1"": 1, ""-1"": 18, ""-2"": 2}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
495,"猜数字游戏","<p>猜数字游戏是令游戏机随机产生一个100以内的正整数，用户输入一个数对其进行猜测，需要你编写程序自动对其与随机产生的被猜数进行比较，并提示大了（“Too big”），还是小了（“Too small”），相等表示猜到了。如果猜到，则结束程序。程序还要求统计猜的次数，如果1次猜出该数，提示“Bingo!”；如果3次或者3次以内猜到该数，则提示“Lucky You!”；如果超过3次但是在N（&gt;3）次以内（包括第N次）猜到该数，则提示“Good Guess!”；如果超过N次都没有猜到，则提示“Game Over”，并结束程序。如果在到达N次之前，用户输入了一个负数，也输出“Game Over”，并结束程序。<br /></p>","<p>输入第一行中给出两个不超过100的正整数，分别是游戏机产生的随机数、以及猜测的最大次数N。最后每行给出一个用户的输入，直到出现负数为止。<br /></p>","<p>在一行中输出每次猜测相应的结果，直到输出猜对的结果或“Game Over”则结束。<br /></p>","[{""input"": ""58 4\n70\n50\n56\n58\n60\n-2\n"", ""output"": ""Too big\nToo small\nToo small\nGood Guess!\n""}]","1291110cceeef1f72ab80c58b3cebe8e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:26:07.306333+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",66,15,1,"6","{""0"": 15, ""4"": 1, ""-1"": 48, ""-2"": 2}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
496,"矩阵运算","<p>给定一个n×n的方阵，本题要求计算该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。副对角线为从矩阵的右上角至左下角的连线。<br /></p>","<p>输入第一行给出正整数n（1&lt;n≤10）；随后n行，每行给出n个整数，其间以空格分隔。<br /></p>","<p>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。<br /></p>","[{""input"": ""4\n2 3 4 1\n5 6 1 1\n7 1 8 1\n1 1 1 1"", ""output"": ""35""}]","cc705834469eb51ab602a77835efd6ee","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2020-10-29 05:26:11.916399+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",32,9,1,"7","{""0"": 9, ""-1"": 14, ""-2"": 9}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
497,"斐波那契数列","<p>给出一个n，求斐波那契数列第n项和第n-1项两数的最大公约数和最小公倍数（n&gt;=4）<br /></p>","<p>输入一个正整数n（n&gt;=4）。<br /></p>","<p>分别输出第n项和n-1的最大公约数和最小公倍数（整数形式）。<br /></p>","[{""input"": ""6"", ""output"": ""1 40""}]","b957abd0c4887e299adc80a5b925209c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p style=""margin-left: 0px;"">斐波那契数列 ： F（0）=0，F（1）=1，F（n）=F(n-1)+F(n-2)（n≥2，n∈N*）<br /></p><p>斐波那契数列是从第零项开始，数列表示为 0 1 1 2 3 5 8 13......当n=6，F(n)=8，F(n-1)=5。</p>","[""C"", ""C++""]","{}","2020-10-29 05:26:16.084785+00",NULL,3000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",10,6,1,"8","{""0"": 6, ""4"": 1, ""-1"": 3}",0,57,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
498,"吃豆子（15分）","<p>给你一个数组，数组上的每个位置都有一定数量的豆子，现在吃豆人会进行若干次操作，每次操作给定一个坐标x，吃豆人会把位于坐标x上位置的豆子都吃掉，同时位于x位置右边的位置都会向左移动一格。具体来说，x+1位置上的豆子转移到x位置，x+2位置上的豆子转移到x+1位置，以此类推。</p><p>每次操作，如果吃豆人发现x位置上已经没豆子了，输出0，否则输出吃到的豆子数。</p>","<p>第一行两个整数n和m，分别表示数组长度和操作次数。（1&lt;=n,m&lt;=1000）</p><p>第二行有n个整数，代表初始每个位置上的豆子数d[i]。（1&lt;=d[i]&lt;=1000）</p><p>接下来m行，每行一个整数，代表该次操作的位置pos。（1&lt;=pos&lt;=n）</p>","<p>对于每次操作，输出一行，代表该次吃豆人吃到的豆子。<br /></p>","[{""input"": ""3 2\n2 3 1\n2\n3\n"", ""output"": ""3\n0\n""}]","c678b6c3656a9ca43922696cd6e2203e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:12:27.506399+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",289,23,1,"1","{""0"": 23, ""1"": 4, ""4"": 30, ""-1"": 221, ""-2"": 11}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
499,"复读机（15分）","<p>复读机就是可以把声音存储下来并且重复播放的一种机器。现在有一个复读机，它可以把你的输入保留信息输出。但是，这个复读机有一个毛病，它在某些时刻会重复当前的语句不止一遍，而在正常时刻只会复读一遍，现在请你输出复读后的语句。<br /></p>","<p>第一行一个整数n和m，分别表示有n个时刻复读机将重复不止一遍，m表示有m个语句。（1 &lt;= n&lt;= m &lt;= 100）</p><p>接下来n行每行两个整数t和c，表示在t时刻的语句重复c遍。（1 &lt;= t&lt;= m, 2 &lt;= c &lt;= 10）</p><p>接下来一行m个整数，第i个整数pi，表示第i个时刻输入的句子。（1 &lt;= pi &lt;=10）</p>","<p>若干个整数，每个整数后一个空格。<br /></p>","[{""input"": ""2 3\n1 2\n2 3\n1 2 3\n"", ""output"": ""1 1 2 2 2 3""}]","89819a34505a483fc121215760ab5c8a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:14:14.766084+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",181,19,1,"2","{""0"": 19, ""4"": 22, ""-1"": 134, ""-2"": 6}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
500,"判断数据类型（10分）","<p>假设现在你要判断数据类型是否为int、long long、double，输入n个字符串，请你判断其代表的数据类型是什么，且输入的每个字符串保证是正数，且是这三种类型的一种。<br /></p>","<p>第一行一个整数n。（n&lt;=10）</p><p>接下来n行每行一个字符串s。(|s|&lt;=10)</p>","<p>对于每个字符串s，输出“int”或“long long”或“double”。<br /></p>","[{""input"": ""3\n12\n9999999999\n123.44\n"", ""output"": ""int\nlong long\ndouble\n""}]","37d7c42a45a7e79a3ade52c917be48fb","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:14:59.996616+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",220,17,1,"3","{""0"": 17, ""1"": 3, ""4"": 15, ""-1"": 156, ""-2"": 29}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
501,"使用函数判断三角形（10分）","<p>给定n个可选的木棍长度，问是否能够选出3个构成三角形。</p><p>注意，你需要实现一个函数ok，来判断传入的三个边长能否构成三角形。</p><p><b>函数接口定义：</b></p><p>int isTriangle( int x, int y, int z);</p><p>传入三个边长参数x，y，z，是三角形返回1，否则0。</p>","<p>第一行一个整数n。（3&lt;=n&lt;=20）</p><p>第二行n个整数，代表木棍长度a[i]。(1&lt;=a[i]&lt;=10^8)</p>","<p>若能够选出3个构成三角形，输出最小的三角形周长，否则输出“No”。<br /></p>","[{""input"": ""3\n1 2 3\n"", ""output"": ""No""}, {""input"": ""3\n1 2 2\n"", ""output"": ""5""}]","983f11d461969267511842207ce29716","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:15:25.182012+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",259,21,1,"4","{""0"": 21, ""4"": 88, ""-1"": 124, ""-2"": 26}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
502,"使用函数求双阶乘（15分）","<p>双阶乘是一个数学概念，用n!!表示。正整数的双阶乘表示不超过这个正整数且与它有相同奇偶性的所有正整数乘积。</p><p>本题要求实现双阶乘函数fac(x)。</p><p><b>函数接口定义：</b></p><p>long long fac( int x );</p><p>其中x是用户传入的整型参数，返回双阶乘。</p>","<p>一行一个正整数n。（1&lt;=n&lt;=20，保证答案不超过long long范围）<br /></p>","<p>一行一个整数表示答案。(格式控制说明为‘%lld’)<br /></p>","[{""input"": ""4"", ""output"": ""8""}]","4568868a9babcbc07be93277e8056391","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:15:41.355485+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",228,58,1,"5","{""0"": 58, ""1"": 9, ""4"": 2, ""-1"": 107, ""-2"": 52}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
503,"映射（15分）","<p>给定两个长度为n的全排列a，b（全排列即长度为n的数组，且数组中的元素各不相同），对于第一个全排列的每个数a[i]，输出其在第二个全排列b中出现的位置。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>第二行n个不同的正整数，表示全排列a。（1&lt;=a[i]&lt;=n）</p><p>第三行n个不同的正整数，表示全排列b。（1&lt;=b[i]&lt;=n）</p>","<p>一行n个整数，第i个数表示a[i]在全排列b中出现的位置。（以空格隔开，行末无空格）<br /></p>","[{""input"": ""3\n2 3 1\n1 3 2\n"", ""output"": ""3 2 1""}]","a2b51eebee55cfc16da50b81677287c6","[{""score"": 17, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 17, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 17, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 17, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 17, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 17, ""input_name"": ""6.in"", ""output_name"": ""6.out""}]","","[""C""]","{}","2020-11-12 07:15:47.077306+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",140,59,1,"6","{""0"": 59, ""4"": 23, ""-1"": 42, ""-2"": 16}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
504,"歌唱比赛（10分）","<p>歌唱比赛有n个裁判(n&gt;=3)，每个裁判会给当前这位歌手打分为[1,10]之间的一个整数，最终这个选手的得分为：去掉一个最高分和一个最低分之后的平均分。</p><p>现在已知小华同学的最终得分p，但是n个裁判给的得分中恰好有一个丢失了，即小华只知道n-1个裁判给出的得分，现在请你帮小华判断他的最终得分是否是对的（即是否存在第n个裁判给出某个分数q满足小华的最终得分为p）？</p>","<p>第一行一个正整数n和一个浮点数p。（3&lt;=n&lt;=100，1&lt;=p&lt;=10）</p><p>第二行n-1个正整数a[i]，表示n-1个裁判给出的得分。（1&lt;=a[i]&lt;=10）</p>","<p>若小华的最终得分是对的，输出“Yes”，否则输出“No”。<br /></p>","[{""input"": ""4 2.5\n1 2 3\n"", ""output"": ""Yes""}]","24796fe4e94a301d7b89cd5d9de77f92","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:15:50.753169+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",231,21,1,"7","{""0"": 21, ""4"": 21, ""-1"": 183, ""-2"": 6}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
505,"矩阵连乘（10分）","<p style=""text-align: start;"">矩阵的幂A^k = A * A * ... * A，其中两个矩阵A、B​的乘积会产生一个新矩阵C，且$C_{ij} = \sum_{k=1}^{m}A_{ik}*B_{kj}$​，其中矩阵A是一个n * m的数组，矩阵B的大小是一个m * t的数组。</p><p style=""text-align: start;"">现在给定一个方阵A和一个整数k，求A^k。</p>","<p style=""text-align: start;"">第一行两个整数n、k。$ (1&lt;=n、k&lt;=5) $</p><p style=""text-align: start;"">接下来n行，每行n个整数，表示输入的矩阵A。​$(-3 &lt;= A_{ij} &lt;= 3)$</p>","<p>输出n行，每行n个整数，以空格分隔，表示A^k。（注意：每一行行末无空格）<br /></p>","[{""input"": ""2 2\n1 1\n1 1"", ""output"": ""2 2\n2 2""}]","efde8c3f888a73c9649ec39ba2d958be","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-12 07:15:55.913341+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",167,14,1,"8","{""0"": 14, ""1"": 2, ""4"": 9, ""-1"": 106, ""-2"": 36}",0,58,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
506,"吃豆子（15分）","<p>给你一个数组，数组上的每个位置都有一定数量的豆子，现在吃豆人会进行若干次操作，每次操作给定一个坐标x，吃豆人会把位于坐标x上位置的豆子都吃掉，同时位于x位置右边的位置都会向左移动一格。具体来说，x+1位置上的豆子转移到x位置，x+2位置上的豆子转移到x+1位置，以此类推。</p><p>每次操作，如果吃豆人发现x位置上已经没豆子了，输出0，否则输出吃到的豆子数。</p>","<p>第一行两个整数n和m，分别表示数组长度和操作次数。（1&lt;=n,m&lt;=1000）</p><p>第二行有n个整数，代表初始每个位置上的豆子数d[i]。（1&lt;=d[i]&lt;=1000）</p><p>接下来m行，每行一个整数，代表该次操作的位置pos。（1&lt;=pos&lt;=n）</p>","<p>对于每次操作，输出一行，代表该次吃豆人吃到的豆子。<br /></p>","[{""input"": ""3 2\n2 3 1\n2\n3\n"", ""output"": ""3\n0\n""}]","9074cdb2d1a64ca66ec9831c866daec7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:11:40.106004+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",162,37,1,"1","{""0"": 37, ""1"": 1, ""4"": 25, ""-1"": 92, ""-2"": 7}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
507,"复读机（15分）","<p>复读机就是可以把声音存储下来并且重复播放的一种机器。现在有一个复读机，它可以把你的输入保留信息输出。但是，这个复读机有一个毛病，它在某些时刻会重复当前的语句不止一遍，而在正常时刻只会复读一遍，现在请你输出复读后的语句。<br /></p>","<p>第一行一个整数n和m，分别表示有n个时刻复读机将重复不止一遍，m表示有m个语句。（1 &lt;= n&lt;= m &lt;= 100）</p><p>接下来n行每行两个整数t和c，表示在t时刻的语句重复c遍。（1 &lt;= t&lt;= m, 2 &lt;= c &lt;= 10）</p><p>接下来一行m个整数，第i个整数pi，表示第i个时刻输入的句子。（1 &lt;= pi &lt;=10）</p>","<p>若干个整数，每个整数后一个空格。<br /></p>","[{""input"": ""2 3\n1 2\n2 3\n1 2 3\n"", ""output"": ""1 1 2 2 2 3""}]","bf71ff9e4259f7fb96e29e097dd52280","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:11:54.929916+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",132,29,1,"2","{""0"": 29, ""4"": 16, ""-1"": 78, ""-2"": 9}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
508,"判断数据类型（10分）","<p>假设现在你要判断数据类型是否为int、long long、double，输入n个字符串，请你判断其代表的数据类型是什么，且输入的每个字符串保证是正数，且是这三种类型的一种。<br /></p>","<p>第一行一个整数n。（n&lt;=10）</p><p>接下来n行每行一个字符串s。(|s|&lt;=10)</p>","<p>对于每个字符串s，输出“int”或“long long”或“double”。<br /></p>","[{""input"": ""3\n12\n9999999999\n123.44\n"", ""output"": ""int\nlong long\ndouble\n""}]","abda7224f494b70aeda3f016be19264d","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:11:58.893893+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",119,32,1,"3","{""0"": 32, ""4"": 13, ""-1"": 66, ""-2"": 8}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
509,"使用函数判断三角形（10分）","<p>给定n个可选的木棍长度，问是否能够选出3个构成三角形。</p><p>注意，你需要实现一个函数ok，来判断传入的三个边长能否构成三角形。</p><p><b>函数接口定义：</b></p><p>int isTriangle( int x, int y, int z);</p><p>传入三个边长参数x，y，z，是三角形返回1，否则0。</p>","<p>第一行一个整数n。（3&lt;=n&lt;=20）</p><p>第二行n个整数，代表木棍长度a[i]。(1&lt;=a[i]&lt;=10^8)</p>","<p>若能够选出3个构成三角形，输出最小的三角形周长，否则输出“No”。<br /></p>","[{""input"": ""3\n1 2 3\n"", ""output"": ""No""}, {""input"": ""3\n1 2 2\n"", ""output"": ""5""}]","9994181c5531917448cd26c66084661c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:12:03.997709+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",137,33,1,"4","{""0"": 33, ""4"": 22, ""-1"": 71, ""-2"": 11}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
510,"使用函数求双阶乘（15分）","<p>双阶乘是一个数学概念，用n!!表示。正整数的双阶乘表示不超过这个正整数且与它有相同奇偶性的所有正整数乘积。</p><p>本题要求实现双阶乘函数fac(x)。</p><p><b>函数接口定义：</b></p><p>long long fac( int x );</p><p>其中x是用户传入的整型参数，返回双阶乘。</p>","<p>一行一个正整数n。（1&lt;=n&lt;=20，保证答案不超过long long范围）<br /></p>","<p>一行一个整数表示答案。(格式控制说明为‘%lld’)<br /></p>","[{""input"": ""4"", ""output"": ""8""}]","a6e1e036d19c1610edefb7faa2ee6fc6","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:12:09.668653+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",21,18,1,"5","{""0"": 18, ""-1"": 3}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
511,"映射（15分）","<p>给定两个长度为n的全排列a，b（全排列即长度为n的数组，且数组中的元素各不相同），对于第一个全排列的每个数a[i]，输出其在第二个全排列b中出现的位置。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>第二行n个不同的正整数，表示全排列a。（1&lt;=a[i]&lt;=n）</p><p>第三行n个不同的正整数，表示全排列b。（1&lt;=b[i]&lt;=n）</p>","<p>一行n个整数，第i个数表示a[i]在全排列b中出现的位置。（以空格隔开，行末无空格）<br /></p>","[{""input"": ""3\n2 3 1\n1 3 2\n"", ""output"": ""3 2 1""}]","72e47fd92d8c421e78333c0e29a64b54","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:12:15.264461+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",23,15,1,"6","{""0"": 15, ""4"": 3, ""-1"": 5}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
512,"歌唱比赛（10分）","<p>歌唱比赛有n个裁判(n&gt;=3)，每个裁判会给当前这位歌手打分为[1,10]之间的一个整数，最终这个选手的得分为：去掉一个最高分和一个最低分之后的平均分。</p><p>现在已知小华同学的最终得分p，但是n个裁判给的得分中恰好有一个丢失了，即小华只知道n-1个裁判给出的得分，现在请你帮小华判断他的最终得分是否是对的（即是否存在第n个裁判给出某个分数q满足小华的最终得分为p）？</p>","<p>第一行一个正整数n和一个浮点数p。（3&lt;=n&lt;=100，1&lt;=p&lt;=10）</p><p>第二行n-1个正整数a[i]，表示n-1个裁判给出的得分。（1&lt;=a[i]&lt;=10）</p>","<p>若小华的最终得分是对的，输出“Yes”，否则输出“No”。<br /></p>","[{""input"": ""4 2.5\n1 2 3\n"", ""output"": ""Yes""}]","24796fe4e94a301d7b89cd5d9de77f92","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:12:19.124647+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",108,31,1,"7","{""0"": 31, ""4"": 3, ""-1"": 65, ""-2"": 9}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
513,"矩阵连乘（10分）","<p style=""text-align: start;"">矩阵的幂A^k = A * A * ... * A，其中两个矩阵A、B​的乘积会产生一个新矩阵C，且$C_{ij} = \sum_{k=1}^{m}A_{ik}*B_{kj}$​，其中矩阵A是一个n * m的数组，矩阵B的大小是一个m * t的数组。</p><p style=""text-align: start;"">现在给定一个方阵A和一个整数k，求A^k。</p>","<p style=""text-align: start;"">第一行两个整数n、k。$ (1&lt;=n、k&lt;=5) $</p><p style=""text-align: start;"">接下来n行，每行n个整数，表示输入的矩阵A。​$(-3 &lt;= A_{ij} &lt;= 3)$</p>","<p>输出n行，每行n个整数，以空格分隔，表示A^k。（注意：每一行行末无空格）<br /></p>","[{""input"": ""2 2\n1 1\n1 1"", ""output"": ""2 2\n2 2""}]","f59fad448378da061f836285a1adf6ec","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-11-16 14:12:26.493392+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",124,26,1,"8","{""0"": 26, ""1"": 6, ""4"": 7, ""-1"": 79, ""-2"": 6}",0,59,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
514,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把一条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。<br /></p>","<p>第一行输入一个整数k</p><p>第二行输入一个字符串（字符串全是小写的英文字母）</p>","<p>输出k值凯撒加密之后的字符串<br /></p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","cf5de599fee6b570b539a201e65f2682","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-12 04:13:11.585312+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",518,37,1,"1","{""0"": 37, ""1"": 1, ""4"": 172, ""-1"": 284, ""-2"": 24}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
515,"数组合并输出","<p>给定两个长度相等的数组，每个数组中的整数都是从小到大排列。设计一个方法，将两个数组合并到一起，并从大到小输出合并后的结果。试着编写程序实现。<br /></p>","<p>第一行输入整数k表示数组长度</p><p>第二、第三行分别输入两个数组，数组元素以空格分隔</p>","<p>从大到小输出合并好的数组，数组元素以空格分隔<br /></p>","[{""input"": ""5\n1 4 6 7 8\n2 3 5 6 9"", ""output"": ""9 8 7 6 6 5 4 3 2 1""}]","3fbc76722e7558cc08db4090e5c1596a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-12 04:44:50.932625+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",594,14,1,"2","{""0"": 14, ""1"": 188, ""4"": 196, ""-1"": 135, ""-2"": 61}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
516,"比较字符串的相似性","<p>输入字符串A，和输入字符串B，计算B和A 的相似情况，判断两个字符串是否相似，如果相似输出Yes否则输出No<br /></p>","<p>分别输入字符串A和B，第一行输入是A，第二行输入是B<br /></p>","<p>输出判定后的结果，如果相似输出Yes否则输出No。<br /></p>","[{""input"": ""hello world\nHllo world"", ""output"": ""Yes""}, {""input"": ""heloopoojancdascd\naserdckaksc"", ""output"": ""No""}]","a06e5df538afd2201de6c8daca329ef8","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>字符串包含大小写英文字母和空格</p><p>相似情况计算：两个字符串出现相同字符的总次数，记为 C 。相似情况为：sim=C/strlen(A),而sim&gt;=0.5时候就判断为Yes否则判断为No。（区分大小写）<br /></p>","[""C""]","{}","2020-12-12 05:52:40.324027+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",430,14,1,"3","{""0"": 14, ""1"": 3, ""2"": 2, ""4"": 48, ""-1"": 336, ""-2"": 27}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
517,"平面向量方向关系","<p>输入两个二维平面向量Vl = ( x1 , y1)和V2 = ( x2 , y2 )的分量。试编写相应程序判断两个向量的方向关系。</p>","<p>输入在一行中按照“x​1 ​​y​1​​ x​2 ​​y​2​​”的格式给出两个二维平面向量v​1​​=(x​1​​,y​1​​)和v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>若两个向量垂直，输出1；若两个向量平行，输出2；若两个向量既不垂直也不平行，输出0</p>","[{""input"": ""1 2 -2 1"", ""output"": ""1""}, {""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""0""}]","86e51972ce929b2527ae513c8f272bb5","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-12 06:48:05.922597+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",398,48,1,"4","{""0"": 48, ""4"": 29, ""-1"": 282, ""-2"": 39}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
518,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","3fdf1e4b81e86b0d7089436df1783063","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用递归</p>","[""C""]","{}","2020-12-12 06:52:49.651648+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",62,6,1,"8","{""0"": 6, ""1"": 5, ""4"": 2, ""-1"": 41, ""-2"": 8}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
519,"三维排序","<p>给定三维平面上的n个点，先按x轴从小到大排序，x轴相同的按y轴从小到大排序，x和y轴都相同的按z轴从小到大排序。<br /></p>","<p style=""margin-left: 0px;"">第一行一个整数n。（1&lt;=n&lt;=100）</p><p>接下来n行，每行三个数x，y，z，表示三维空间中的一个点。（保证没有重合的两个点）</p>","<p>输出n行，每行三个数，表示排完序后的点集。<br /></p>","[{""input"": ""3\n3 4 5\n1 3 4\n1 3 1"", ""output"": ""1 3 1\n1 3 4\n3 4 5""}]","b1660aa4e5fb0d00db67fbb4332e351a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>必须使用结构体</p>","[""C""]","{}","2020-12-12 06:55:30.479875+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",200,36,1,"6","{""0"": 36, ""1"": 2, ""4"": 12, ""-1"": 99, ""-2"": 51}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
520,"兔子繁衍II","<p>递归求解：小王家在第一年年初养了一对（1岁的）兔子，已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一对新兔子。假设兔子不死，请问第n年年末小王家一共有多少对兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""55""}]","8f06cfba392b1d273f3d5cf324f45765","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>非递归求解只得一半分</p>","[""C""]","{}","2020-12-12 08:27:57.438266+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",113,63,1,"5","{""0"": 63, ""1"": 2, ""4"": 4, ""-1"": 17, ""-2"": 27}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
521,"单词排序","<p>输入一个字符串语句查看语句中的单词出现的次数，并按照出现的次数对单词从小到大排序<br /></p>","<p>输入一行包含多个单词的字符串语句A，每个单词用空格隔开。<br /></p>","<p>按单词的次数从小到大输出对应的单词。<br /></p>","[{""input"": ""white red red blue red"", ""output"": ""white blue red""}]","82d1e7ebd94c11318574d1d74aadedfd","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用结构体存放单词和出现次数</p><p>若次数相等， 则输出顺序和单词出现顺序一致</p>","[""C""]","{}","2020-12-12 09:07:49.34094+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",151,2,1,"7","{""0"": 2, ""1"": 2, ""4"": 31, ""-1"": 102, ""-2"": 14}",0,60,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
522,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。可先输入一个k，接着输入一个字符串（字符串全是小写的英文字母）。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。</p>","<p>先输入距离k值，接着输入将要加密的字符串。</p>","<p>输出k值凯撒加密之后的字符串</p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","abf97544d27b36879ebdfda67df2818c","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2020-12-14 13:05:58.214702+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",4,4,358,"1","{""0"": 4}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
523,"数组合并输出","<p>给定两个数组，每个数组中的整数都是从小到大排列。设计一个方法，将两个数组合并到一起，并从大到小输出合并后的结果。试着编写程序实现。<br /></p>","<p>输入k为两个数组的大小，然后读取两个数组的元素。<br /><br /></p>","<p>从大到小输出合并好的数组</p>","[{""input"": ""5\n1 4 6 7 8\n2 3 5 6 9"", ""output"": ""9 8 7 6 6 5 4 3 2 1""}]","9a97d2b7eb1af9330ef4ad9c60142d80","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C""]","{}","2020-12-14 13:06:29.22469+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",10,2,358,"2","{""0"": 2, ""1"": 3, ""4"": 3, ""-1"": 2}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
525,"平面向量方向关系","<p>输入两个二维平面向量Vl = ( x1 , y1)和V2 = ( x2 , y2 )的分量。试编写相应程序判断两个向量的方向关系。</p>","<p>输入在一行中按照“x​1 ​​y​1​​ x​2 ​​y​2​​”的格式给出两个二维平面向量v​1​​=(x​1​​,y​1​​)和v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>若两个向量垂直，输出1；若两个向量平行，输出2；若两个向量既不垂直也不平行，输出0</p>","[{""input"": ""1 2 -2 1"", ""output"": ""1""}, {""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""0""}]","86e51972ce929b2527ae513c8f272bb5","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 13:08:01.791543+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-9","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
526,"平面向量方向关系","<p>输入两个二维平面向量Vl = ( x1 , y1)和V2 = ( x2 , y2 )的分量。试编写相应程序判断两个向量的方向关系。</p>","<p>输入在一行中按照“x​1 ​​y​1​​ x​2 ​​y​2​​”的格式给出两个二维平面向量v​1​​=(x​1​​,y​1​​)和v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>若两个向量垂直，输出1；若两个向量平行，输出2；若两个向量既不垂直也不平行，输出0</p>","[{""input"": ""1 2 -2 1"", ""output"": ""1""}, {""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""0""}]","86e51972ce929b2527ae513c8f272bb5","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 13:08:26.395244+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",3,0,1,"4","{""4"": 1, ""-1"": 2}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
527,"兔子繁衍II","<p>递归求解：小王家在第一年年初养了一对（1岁的）兔子，已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一对新兔子。假设兔子不死，请问第n年年末小王家一共有多少对兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""55""}]","8f06cfba392b1d273f3d5cf324f45765","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>非递归求解只得一半分</p>","[""C""]","{}","2020-12-14 13:09:41.890186+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-10","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
528,"兔子繁衍II","<p>递归求解：小王家在第一年年初养了一对（1岁的）兔子，已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一对新兔子。假设兔子不死，请问第n年年末小王家一共有多少对兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""55""}]","8f06cfba392b1d273f3d5cf324f45765","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>非递归求解只得一半分</p>","[""C""]","{}","2020-12-14 13:09:55.999177+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"5","{}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
529,"三维排序","<p>给定三维平面上的n个点，先按x轴从小到大排序，x轴相同的按y轴从小到大排序，x和y轴都相同的按z轴从小到大排序。<br /></p>","<p>第一行一个整数n。（1&lt;=n&lt;=100）</p><p>接下来n行，每行三个数x，y，z，表示三维空间中的一个点。（保证没有重合的两个点）</p>","<p>输出n行，每行三个数，表示排完序后的点集。<br /></p>","[{""input"": ""3\n3 4 5\n1 3 4\n1 3 1"", ""output"": ""1 3 1\n1 3 4\n3 4 5""}]","35539d74346ba47bd25588ea44d0d09c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 13:10:32.210548+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",4,1,1,"6","{""0"": 1, ""-1"": 3}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
530,"比较字符串的相似性","<p>输入字符串A，和输入字符串B，计算B和A 的相似情况，判断两个字符串是否相似，如果相似输出Yes否则输出No<br /></p>","<p>分别输入字符串A和B，第一行输入是A，第二行输入是B<br /></p>","<p>输出判定后的结果，如果相似输出Yes否则输出No。<br /></p>","[{""input"": ""hello world\nHllo world"", ""output"": ""Yes""}, {""input"": ""heloopoojancdascd\naserdckaksc"", ""output"": ""No""}]","a06e5df538afd2201de6c8daca329ef8","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>字符串包含大小写英文字母和空格</p><p>相似情况计算：两个字符串出现相同字符的总次数，记为 C 。相似情况为：sim=C/strlen(A),而sim&gt;=0.5时候就判断为Yes否则判断为No。（区分大小写）<br /></p>","[""C""]","{}","2020-12-14 13:11:34.558946+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-11","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
531,"比较字符串的相似性","<p>输入字符串A，和输入字符串B，计算B和A 的相似情况，判断两个字符串是否相似，如果相似输出Yes否则输出No<br /></p>","<p>分别输入字符串A和B，第一行输入是A，第二行输入是B<br /></p>","<p>输出判定后的结果，如果相似输出Yes否则输出No。<br /></p>","[{""input"": ""hello world\nHllo world"", ""output"": ""Yes""}, {""input"": ""heloopoojancdascd\naserdckaksc"", ""output"": ""No""}]","a06e5df538afd2201de6c8daca329ef8","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>字符串包含大小写英文字母和空格</p><p>相似情况计算：两个字符串出现相同字符的总次数，记为 C 。相似情况为：sim=C/strlen(A),而sim&gt;=0.5时候就判断为Yes否则判断为No。（区分大小写）<br /></p>","[""C""]","{}","2020-12-14 13:11:46.861605+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",10,1,1,"3","{""0"": 1, ""4"": 1, ""-1"": 8}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
532,"单词排序","<p>输入一个字符串语句查看语句中的单词出现的次数，并按照出现的次数对单词从小到大排序<br /></p>","<p>输入一行包含多个单词的字符串语句A，每个单词用空格隔开。<br /></p>","<p>按单词的次数从小到大输出对应的单词。<br /></p>","[{""input"": ""white red red blue red"", ""output"": ""white blue red""}]","82d1e7ebd94c11318574d1d74aadedfd","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用结构体存放单词和出现次数</p><p>若次数相等， 则输出顺序和单词出现顺序一致</p>","[""C""]","{}","2020-12-14 13:12:47.589634+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-12","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
533,"单词排序","<p>输入一个字符串语句查看语句中的单词出现的次数，并按照出现的次数对单词从小到大排序<br /></p>","<p>输入一行包含多个单词的字符串语句A，每个单词用空格隔开。<br /></p>","<p>按单词的次数从小到大输出对应的单词。<br /></p>","[{""input"": ""white red red blue red"", ""output"": ""white blue red""}]","82d1e7ebd94c11318574d1d74aadedfd","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用结构体存放单词和出现次数</p><p>若次数相等， 则输出顺序和单词出现顺序一致</p>","[""C""]","{}","2020-12-14 13:13:14.233539+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",4,2,1,"7","{""0"": 2, ""4"": 1, ""-1"": 1}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
534,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","fe40133bfd8f988f28b8ec95fbb0b134","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 13:14:05.638732+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,1,1,"8","{""0"": 1, ""-1"": 1}",0,61,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
535,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把一条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。<br /></p>","<p>第一行输入一个整数k</p><p>第二行输入一个字符串（字符串全是小写的英文字母）</p>","<p>输出k值凯撒加密之后的字符串<br /></p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","cf5de599fee6b570b539a201e65f2682","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 15:30:21.34133+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-13","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
536,"凯撒加密","<p>凯撒加密，是一种古老的加密技术，是把一条信息中的每个字母用字母表中固定距离（k）之后的那个字母代替。试着编写程序，将字符串中的字符进行K值凯撒加密。例如：k=2，字符 a 经过k值凯撒加密之后变为 c ，而字符 z 经过k值凯撒加密之后变为字符b。<br /></p>","<p>第一行输入一个整数k</p><p>第二行输入一个字符串（字符串全是小写的英文字母）</p>","<p>输出k值凯撒加密之后的字符串<br /></p>","[{""input"": ""5\nhello"", ""output"": ""mjqqt""}, {""input"": ""2\nzb"", ""output"": ""bd""}]","cf5de599fee6b570b539a201e65f2682","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 15:34:57.762454+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",128,33,1,"1","{""0"": 33, ""4"": 25, ""-1"": 67, ""-2"": 3}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
537,"数组合并输出","<p>给定两个长度相等的数组，每个数组中的整数都是从小到大排列。设计一个方法，将两个数组合并到一起，并从大到小输出合并后的结果。试着编写程序实现。<br /></p>","<p>第一行输入整数k表示数组长度</p><p>第二、第三行分别输入两个数组，数组元素以空格分隔</p>","<p>从大到小输出合并好的数组，数组元素以空格分隔<br /></p>","[{""input"": ""5\n1 4 6 7 8\n2 3 5 6 9"", ""output"": ""9 8 7 6 6 5 4 3 2 1""}]","3fbc76722e7558cc08db4090e5c1596a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 15:37:47.099714+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-14","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
538,"数组合并输出","<p>给定两个长度相等的数组，每个数组中的整数都是从小到大排列。设计一个方法，将两个数组合并到一起，并从大到小输出合并后的结果。试着编写程序实现。<br /></p>","<p>第一行输入整数k表示数组长度</p><p>第二、第三行分别输入两个数组，数组元素以空格分隔</p>","<p>从大到小输出合并好的数组，数组元素以空格分隔<br /></p>","[{""input"": ""5\n1 4 6 7 8\n2 3 5 6 9"", ""output"": ""9 8 7 6 6 5 4 3 2 1""}]","3fbc76722e7558cc08db4090e5c1596a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 15:38:00.946396+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",194,25,1,"2","{""0"": 25, ""1"": 60, ""4"": 39, ""-1"": 61, ""-2"": 9}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
539,"比较字符串的相似性","<p>输入字符串A，和输入字符串B，计算B和A 的相似情况，判断两个字符串是否相似，如果相似输出Yes否则输出No<br /></p>","<p>分别输入字符串A和B，第一行输入是A，第二行输入是B<br /></p>","<p>输出判定后的结果，如果相似输出Yes否则输出No。<br /></p>","[{""input"": ""hello world\nHllo world"", ""output"": ""Yes""}, {""input"": ""heloopoojancdascd\naserdckaksc"", ""output"": ""No""}]","a06e5df538afd2201de6c8daca329ef8","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>字符串包含大小写英文字母和空格</p><p>相似情况计算：两个字符串出现相同字符的总次数，记为 C 。相似情况为：sim=C/strlen(A),而sim&gt;=0.5时候就判断为Yes否则判断为No。（区分大小写）<br /></p>","[""C""]","{}","2020-12-14 15:38:22.693341+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",118,30,1,"3","{""0"": 30, ""4"": 8, ""-1"": 68, ""-2"": 12}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
540,"平面向量方向关系","<p>输入两个二维平面向量Vl = ( x1 , y1)和V2 = ( x2 , y2 )的分量。试编写相应程序判断两个向量的方向关系。</p>","<p>输入在一行中按照“x​1 ​​y​1​​ x​2 ​​y​2​​”的格式给出两个二维平面向量v​1​​=(x​1​​,y​1​​)和v​2​​=(x​2​​,y​2​​)的分量<br /></p>","<p>若两个向量垂直，输出1；若两个向量平行，输出2；若两个向量既不垂直也不平行，输出0</p>","[{""input"": ""1 2 -2 1"", ""output"": ""1""}, {""input"": ""3.5 -2.7 -13.9 8.7"", ""output"": ""0""}]","86e51972ce929b2527ae513c8f272bb5","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2020-12-14 15:38:35.82361+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",62,28,1,"4","{""0"": 28, ""-1"": 25, ""-2"": 9}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
541,"兔子繁衍II","<p>递归求解：小王家在第一年年初养了一对（1岁的）兔子，已知兔子刚出生时是1岁，3岁及以上的兔子每年会生出一对新兔子。假设兔子不死，请问第n年年末小王家一共有多少对兔子？<br /></p>","<p>一行一个整数n表示第n年。（1&lt;=n&lt;=35）<br /></p>","<p>一行一个整数表示答案。<br /></p>","[{""input"": ""10"", ""output"": ""55""}]","8f06cfba392b1d273f3d5cf324f45765","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>非递归求解只得一半分</p>","[""C""]","{}","2020-12-14 15:38:51.318915+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",25,20,1,"5","{""0"": 20, ""1"": 2, ""-1"": 3}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
542,"三维排序","<p>给定三维平面上的n个点，先按x轴从小到大排序，x轴相同的按y轴从小到大排序，x和y轴都相同的按z轴从小到大排序。<br /></p>","<p style=""margin-left: 0px;"">第一行一个整数n。（1&lt;=n&lt;=100）</p><p>接下来n行，每行三个数x，y，z，表示三维空间中的一个点。（保证没有重合的两个点）</p>","<p>输出n行，每行三个数，表示排完序后的点集。<br /></p>","[{""input"": ""3\n3 4 5\n1 3 4\n1 3 1"", ""output"": ""1 3 1\n1 3 4\n3 4 5""}]","b1660aa4e5fb0d00db67fbb4332e351a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>必须使用结构体</p>","[""C""]","{}","2020-12-14 15:39:24.606082+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-15","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
543,"三维排序","<p>给定三维平面上的n个点，先按x轴从小到大排序，x轴相同的按y轴从小到大排序，x和y轴都相同的按z轴从小到大排序。<br /></p>","<p style=""margin-left: 0px;"">第一行一个整数n。（1&lt;=n&lt;=100）</p><p>接下来n行，每行三个数x，y，z，表示三维空间中的一个点。（保证没有重合的两个点）</p>","<p>输出n行，每行三个数，表示排完序后的点集。<br /></p>","[{""input"": ""3\n3 4 5\n1 3 4\n1 3 1"", ""output"": ""1 3 1\n1 3 4\n3 4 5""}]","b1660aa4e5fb0d00db67fbb4332e351a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>必须使用结构体</p>","[""C""]","{}","2020-12-14 15:39:42.030195+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",50,23,1,"6","{""0"": 23, ""4"": 3, ""-1"": 21, ""-2"": 3}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
544,"单词排序","<p>输入一个字符串语句查看语句中的单词出现的次数，并按照出现的次数对单词从小到大排序<br /></p>","<p>输入一行包含多个单词的字符串语句A，每个单词用空格隔开。<br /></p>","<p>按单词的次数从小到大输出对应的单词。<br /></p>","[{""input"": ""white red red blue red"", ""output"": ""white blue red""}]","82d1e7ebd94c11318574d1d74aadedfd","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用结构体存放单词和出现次数</p><p>若次数相等， 则输出顺序和单词出现顺序一致</p>","[""C""]","{}","2020-12-14 15:39:59.790639+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",116,16,1,"7","{""0"": 16, ""1"": 1, ""4"": 31, ""-1"": 63, ""-2"": 5}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
545,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","3fdf1e4b81e86b0d7089436df1783063","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用递归</p>","[""C""]","{}","2020-12-14 15:40:49.906969+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-16","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
546,"看书计划","<p>小明看书有一个计划，他打算用n天的时间看完一本m页的书，并且小明看书时每一天看的页数都比前一天多（第一天可以看任意多页书），那么请你输出小明可能的所有看书的计划，输出按字典序排列（对于两种计划，先比较第一天看书页数，小的在前，如果相同，再比较第二天看书页数，以此类推，具体见样例）。<br /></p>","<p>一行两个整数n和m。（1 &lt;= n &lt;= n*(n+1)/2 &lt;= m &lt;= 100）<br /></p>","<p>若干行，每行n个整数，表示一个读书计划。（以空格分隔，行末无空格）<br /></p>","[{""input"": ""3 8"", ""output"": ""1 2 5\n1 3 4""}]","3fdf1e4b81e86b0d7089436df1783063","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>使用递归</p>","[""C""]","{}","2020-12-14 15:41:04.252361+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",101,34,1,"8","{""0"": 34, ""1"": 4, ""4"": 3, ""-1"": 39, ""-2"": 21}",0,62,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
547,"扫雷游戏","<p style=""margin-left: 0px;"">扫雷游戏是一款十分经典的单机小游戏。</p><p>现在有个简易版扫雷游戏：在1行m列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p><p>现在给出1行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p><p>注：一个格子的周围格子包括其左、右两个方向上与之直接相邻的格子。</p>","<p style=""margin-left: 0px;"">输入的第一行是一个整数m，表示雷区的列数。(1 &lt;= m &lt;= 100)</p><p>接下来一行m个字符，描述了雷区中的地雷分布情况。字符’*’表示相应格子是地雷格，字符’?’表示相应格子是非地雷格。相邻字符之间无分隔符。</p>","<p>输出包含1行m个字符，描述整个雷区。用’*’表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。<br /></p>","[{""input"": ""3\n*??"", ""output"": ""*10""}, {""input"": ""3\n???"", ""output"": ""000""}, {""input"": ""3\n?*?"", ""output"": ""1*1""}]","21e940d3b68dca08828419e529b1511f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p><b>注意：必须使用函数接口void transMap(char* input,char* output) 完成题目，其中input是传入字符串，output是最后要输出的字符串</b><br /></p>","[""C""]","{}","2021-01-02 09:12:56.404203+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",230,51,1,"1","{""0"": 51, ""1"": 1, ""4"": 14, ""-1"": 130, ""-2"": 34}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
548,"打分","<p style=""margin-left: 0px;"">高中作文打分（满分为60分），为了避免作文打分的主观因素的影响，一般会请n个老师进行打分，从中去掉最高分和最低分，对保留的求和并平均。</p><p>现在给定n个老师打分的情况，你需要求出最高分和最低分，并分别存到<b>指针变量</b>p和q中（int类型指针）；对剩下的分数求和平均保存到<b>指针变量</b>r（double类型指针）中。</p><p><b>最后以间接访问的形式输出最高分，最低分和平均分</b><br /></p>","<p style=""margin-left: 0px;"">一行一个整数n。（3 &lt;= n &lt;= 10）<br /></p><p>一行n个整数表示n位老师打分情况数组score，用空格分隔。（0 &lt;= score[i] &lt;= 60）</p>","<p>按题目描述中的代码进行输出，用空格分隔。<br /></p>","[{""input"": ""3\n60 60 60"", ""output"": ""60 60 60.00""}]","e1b95d54d691cd3f2dac6549511e7e0e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2021-01-02 09:49:00.618199+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",269,55,1,"2","{""0"": 55, ""4"": 16, ""-1"": 179, ""-2"": 19}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
549,"递归求最大值","<p>给出n个元素，必须<b>使用递归</b>的方法求出元素中的最大值</p>","<p>第一行输入n表示元素个数</p><p>第二行输入n个整数</p>","<p>输出n个整数中的最大值</p>","[{""input"": ""3\n14 5 10"", ""output"": ""14""}]","76d83293018f58a8f5910bc95e227e8c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>1 &lt;= n &lt;= 30</p>","[""C""]","{}","2021-01-02 11:44:43.376699+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",156,63,1,"7","{""0"": 63, ""1"": 3, ""4"": 20, ""-1"": 53, ""-2"": 17}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
550,"字符串排序","<p>输入若干个单词，按字典序将单词输出<br /></p>","<p>输入一行，由多个单词组成（单词间由空格分隔），字符串以换行符结尾</p>","<p>按照字典序排列，每行输出一个单词</p>","[{""input"": ""data science days"", ""output"": ""data\ndays\nscience""}, {""input"": ""aa ab ac b a"", ""output"": ""a\naa\nab\nac\nb""}]","41fd9e202059cb03f3ef3ecdde6ba7ce","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>单词由26个小写英文组成</p><p>字典序：</p><p>在字典序中，&#039;a&#039;&lt;&#039;b&#039;&lt;&#039;c&#039;&lt; ... &lt; &#039;z&#039;</p><p>从每个单词的第一个字符开始比较，例如&#039;apple&#039; 排在&#039; banana&#039;前</p><p>若第一个字符相同，则比较第二个字符，例如&#039;apple&#039;排在&#039;angel&#039;前</p><p>以此类推，得到所有单词的字典序排列</p>","[""C""]","{}","2021-01-02 12:38:50.445273+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",201,23,1,"8","{""0"": 23, ""2"": 2, ""3"": 3, ""4"": 49, ""-1"": 106, ""-2"": 18}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
551,"结构体数组","<p>输入学生人数n，然后构建一个结构体数组，结构体包含学号和学生成绩（都是int类型），然后输出成绩不及格（&lt;60）的学生的学号。<br /></p>","<p>输入n，接着输入n名学生的信息，主要是学号和成绩；<br /></p>","<p>输出成绩不及格学生的学号，每个学号一行。<br /></p>","[{""input"": ""4\n121212 5\n121213 100\n121216 70\n121218 60"", ""output"": ""121212""}]","bbe667f9f42e32a1460b36723ee224e7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-03 06:01:26.208617+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",138,68,1,"3","{""0"": 68, ""4"": 10, ""-1"": 44, ""-2"": 16}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
552,"链表操作","<p>输入一串int类型的数字以-1结束输入，将读取的不重复的数字构建成链表。并按照指示删除指定数字的节点，最后将剩余的链表的数字依次输出。<br /></p>","<p style=""margin-left: 0px;"">输入要求链表的输入用-1结束，将不重复的数字构建成链表，比如 1 2 1 2 5 6 4 -1 构建成的链表 1 2 5 6 4；</p><p>接着输入要删除的数字。</p>","<p>输出删除指定数字后的链表，中间用空格隔开，最后一个数字有空格。<br /></p>","[{""input"": ""1 2 3 4 5 6 5 4 6 -1\n4"", ""output"": ""1 2 3 5 6""}]","7996139101eb390cfcbb73d57d2053e7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>链表的中重复元素的查找，要在构建时进行，即链表中存在了不插入，不存在将节点插入到链表最后<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-03 06:09:17.931024+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",153,29,1,"4","{""0"": 29, ""1"": 10, ""4"": 34, ""-1"": 62, ""-2"": 18}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
553,"检查密码 （15分）","<p>登入网站是一般需要输入密码。现在写一个自动检查用户密码的程序。具体要求如下：<br /><br /></p><p>密码不少于6个字符组成，且不能超过30个字符。<b>密码只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。</b></p><p>- 如果密码合法，输出 yes</p><p>- 如果密法太长，不论合法与否，都输出 too long</p><p>- 如果密码太短，不论合法与否，都输出 too short</p><p>- 如果密码长度合法，但存在不合法字符，则输出 illegal char</p><p>- 如果密码长度合法，但只有字母没有数字，则输出 need num</p><p>- 如果密码长度合法，但只有数字没有字母，则输出 need char</p><p>每次只输出一种提醒，提醒种类优先级由上到下依次递减。</p>","<p>输入为一行密码</p>","<p>输出为判断密码结果的信息。输出的信息首尾不能有空格。</p>","[{""input"": ""Ecun.2020"", ""output"": ""yes""}, {""input"": ""Ecun 2020"", ""output"": ""illegal char""}]","419d85420ff35abf3174a5f64dd9c6c0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-03 06:12:21.808965+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-17","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
554,"检查密码","<p>登入网站是一般需要输入密码。现在写一个自动检查用户密码的程序。具体要求如下：<br /><br /></p><p>密码不少于6个字符组成，且不能超过30个字符。<b>密码只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。</b></p><p>- 如果密码合法，输出 yes</p><p>- 如果密法太长，不论合法与否，都输出 too long</p><p>- 如果密码太短，不论合法与否，都输出 too short</p><p>- 如果密码长度合法，但存在不合法字符，则输出 illegal char</p><p>- 如果密码长度合法，但只有字母没有数字，则输出 need num</p><p>- 如果密码长度合法，但只有数字没有字母，则输出 need char</p><p>每次只输出一种提醒，提醒种类优先级由上到下依次递减。</p>","<p>输入为一行密码</p>","<p>输出为判断密码结果的信息。输出的信息首尾不能有空格。</p>","[{""input"": ""Ecun.2020"", ""output"": ""yes""}, {""input"": ""Ecun 2020"", ""output"": ""illegal char""}]","419d85420ff35abf3174a5f64dd9c6c0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-03 06:12:43.613301+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",369,35,1,"6","{""0"": 35, ""1"": 1, ""4"": 125, ""-1"": 169, ""-2"": 39}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
555,"寻找第一个L位素数","<p>给定N 位（0&lt;= N &lt;= 100) 数字 num。</p><p>可以将数字num看成是一个长度位N的字符串，从左至右观察数字num，查找到第一个长度为L（1&lt;= L &lt;= 5) 的连续“子串”，且该“子串” 为素数。</p><p>输出这个素数。</p><p>（关键词：第一个、长度为L（即L位数）、素数）<br /></p>","<p>第一行： 正整数N 和 L，之间以空格隔开。</p><p>第二行： N个数字。每个数字 均在 [1,9] 范围内，不包含0。<b>故无需考虑前导0的情况。</b></p>","<p>如果找到第一个L位素数，则输出该数。</p><p>如果没有找到，则输出404。</p>","[{""input"": ""15 5\n436549877255444"", ""output"": ""49877""}, {""input"": ""10 3\n4244686426"", ""output"": ""404""}]","28347c2449dbee8bf8254f64df29b69a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>在Sample1中，输入为436549877255444</p><p>从左到右长度为5的数分别为：43654 36549 65498 54987 49877 ........<br />其中第一个素数为 49877，所以输出为49877</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-03 07:53:56.678226+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",257,35,1,"5","{""0"": 35, ""1"": 5, ""4"": 28, ""-1"": 158, ""-2"": 31}",0,63,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
556,"扫雷游戏","<p style=""margin-left: 0px;"">扫雷游戏是一款十分经典的单机小游戏。</p><p>现在有个简易版扫雷游戏：在1行m列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p><p>现在给出1行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p><p>注：一个格子的周围格子包括其左、右两个方向上与之直接相邻的格子。</p>","<p style=""margin-left: 0px;"">输入的第一行是一个整数m，表示雷区的列数。(1 &lt;= m &lt;= 100)</p><p>接下来一行m个字符，描述了雷区中的地雷分布情况。字符’*’表示相应格子是地雷格，字符’?’表示相应格子是非地雷格。相邻字符之间无分隔符。</p>","<p>输出包含1行m个字符，描述整个雷区。用’*’表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。<br /></p>","[{""input"": ""3\n*??"", ""output"": ""*10""}, {""input"": ""3\n???"", ""output"": ""000""}, {""input"": ""3\n?*?"", ""output"": ""1*1""}]","21e940d3b68dca08828419e529b1511f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p><b>注意：必须使用函数接口void transMap(char* input,char* output) 完成题目，其中input是传入字符串，output是最后要输出的字符串</b><br /></p>","[""C""]","{}","2021-01-23 10:07:30.040788+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-18","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
557,"打分","<p style=""margin-left: 0px;"">高中作文打分（满分为60分），为了避免作文打分的主观因素的影响，一般会请n个老师进行打分，从中去掉最高分和最低分，对保留的求和并平均。</p><p>现在给定n个老师打分的情况，你需要求出最高分和最低分，并分别存到<b>指针变量</b>p和q中（int类型指针）；对剩下的分数求和平均保存到<b>指针变量</b>r（double类型指针）中。</p><p><b>最后以间接访问的形式输出最高分，最低分和平均分</b><br /></p>","<p style=""margin-left: 0px;"">一行一个整数n。（3 &lt;= n &lt;= 10）<br /></p><p>一行n个整数表示n位老师打分情况数组score，用空格分隔。（0 &lt;= score[i] &lt;= 60）</p>","<p>按题目描述中的代码进行输出，用空格分隔。<br /></p>","[{""input"": ""3\n60 60 60"", ""output"": ""60 60 60.00""}]","e1b95d54d691cd3f2dac6549511e7e0e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2021-01-23 10:07:37.559263+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-19","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
558,"递归求最大值","<p>给出n个元素，必须<b>使用递归</b>的方法求出元素中的最大值</p>","<p>第一行输入n表示元素个数</p><p>第二行输入n个整数</p>","<p>输出n个整数中的最大值</p>","[{""input"": ""3\n14 5 10"", ""output"": ""14""}]","76d83293018f58a8f5910bc95e227e8c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>1 &lt;= n &lt;= 30</p>","[""C""]","{}","2021-01-23 10:07:44.515798+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-20","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
559,"字符串排序","<p>输入若干个单词，按字典序将单词输出<br /></p>","<p>输入一行，由多个单词组成（单词间由空格分隔），字符串以换行符结尾</p>","<p>按照字典序排列，每行输出一个单词</p>","[{""input"": ""data science days"", ""output"": ""data\ndays\nscience""}, {""input"": ""aa ab ac b a"", ""output"": ""a\naa\nab\nac\nb""}]","41fd9e202059cb03f3ef3ecdde6ba7ce","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>单词由26个小写英文组成</p><p>字典序：</p><p>在字典序中，&#039;a&#039;&lt;&#039;b&#039;&lt;&#039;c&#039;&lt; ... &lt; &#039;z&#039;</p><p>从每个单词的第一个字符开始比较，例如&#039;apple&#039; 排在&#039; banana&#039;前</p><p>若第一个字符相同，则比较第二个字符，例如&#039;apple&#039;排在&#039;angel&#039;前</p><p>以此类推，得到所有单词的字典序排列</p>","[""C""]","{}","2021-01-23 10:08:16.02488+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-21","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
560,"结构体数组","<p>输入学生人数n，然后构建一个结构体数组，结构体包含学号和学生成绩（都是int类型），然后输出成绩不及格（&lt;60）的学生的学号。<br /></p>","<p>输入n，接着输入n名学生的信息，主要是学号和成绩；<br /></p>","<p>输出成绩不及格学生的学号，每个学号一行。<br /></p>","[{""input"": ""4\n121212 5\n121213 100\n121216 70\n121218 60"", ""output"": ""121212""}]","bbe667f9f42e32a1460b36723ee224e7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:08:21.651648+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-22","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
561,"链表操作","<p>输入一串int类型的数字以-1结束输入，将读取的不重复的数字构建成链表。并按照指示删除指定数字的节点，最后将剩余的链表的数字依次输出。<br /></p>","<p style=""margin-left: 0px;"">输入要求链表的输入用-1结束，将不重复的数字构建成链表，比如 1 2 1 2 5 6 4 -1 构建成的链表 1 2 5 6 4；</p><p>接着输入要删除的数字。</p>","<p>输出删除指定数字后的链表，中间用空格隔开，最后一个数字有空格。<br /></p>","[{""input"": ""1 2 3 4 5 6 5 4 6 -1\n4"", ""output"": ""1 2 3 5 6""}]","7996139101eb390cfcbb73d57d2053e7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>链表的中重复元素的查找，要在构建时进行，即链表中存在了不插入，不存在将节点插入到链表最后<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:08:27.943572+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-23","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
562,"寻找第一个L位素数","<p>给定N 位（0&lt;= N &lt;= 100) 数字 num。</p><p>可以将数字num看成是一个长度位N的字符串，从左至右观察数字num，查找到第一个长度为L（1&lt;= L &lt;= 5) 的连续“子串”，且该“子串” 为素数。</p><p>输出这个素数。</p><p>（关键词：第一个、长度为L（即L位数）、素数）<br /></p>","<p>第一行： 正整数N 和 L，之间以空格隔开。</p><p>第二行： N个数字。每个数字 均在 [1,9] 范围内，不包含0。<b>故无需考虑前导0的情况。</b></p>","<p>如果找到第一个L位素数，则输出该数。</p><p>如果没有找到，则输出404。</p>","[{""input"": ""15 5\n436549877255444"", ""output"": ""49877""}, {""input"": ""10 3\n4244686426"", ""output"": ""404""}]","28347c2449dbee8bf8254f64df29b69a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>在Sample1中，输入为436549877255444</p><p>从左到右长度为5的数分别为：43654 36549 65498 54987 49877 ........<br />其中第一个素数为 49877，所以输出为49877</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:09:19.395596+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,1,"2-24","{}",0,NULL,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
563,"扫雷游戏","<p style=""margin-left: 0px;"">扫雷游戏是一款十分经典的单机小游戏。</p><p>现在有个简易版扫雷游戏：在1行m列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p><p>现在给出1行m列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p><p>注：一个格子的周围格子包括其左、右两个方向上与之直接相邻的格子。</p>","<p style=""margin-left: 0px;"">输入的第一行是一个整数m，表示雷区的列数。(1 &lt;= m &lt;= 100)</p><p>接下来一行m个字符，描述了雷区中的地雷分布情况。字符’*’表示相应格子是地雷格，字符’?’表示相应格子是非地雷格。相邻字符之间无分隔符。</p>","<p>输出包含1行m个字符，描述整个雷区。用’*’表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。<br /></p>","[{""input"": ""3\n*??"", ""output"": ""*10""}, {""input"": ""3\n???"", ""output"": ""000""}, {""input"": ""3\n?*?"", ""output"": ""1*1""}]","21e940d3b68dca08828419e529b1511f","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p><b>注意：必须使用函数接口void transMap(char* input,char* output) 完成题目，其中input是传入字符串，output是最后要输出的字符串</b><br /></p>","[""C""]","{}","2021-01-23 10:10:18.303742+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",1,1,1,"1","{""0"": 1}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
564,"打分","<p style=""margin-left: 0px;"">高中作文打分（满分为60分），为了避免作文打分的主观因素的影响，一般会请n个老师进行打分，从中去掉最高分和最低分，对保留的求和并平均。</p><p>现在给定n个老师打分的情况，你需要求出最高分和最低分，并分别存到<b>指针变量</b>p和q中（int类型指针）；对剩下的分数求和平均保存到<b>指针变量</b>r（double类型指针）中。</p><p><b>最后以间接访问的形式输出最高分，最低分和平均分</b><br /></p>","<p style=""margin-left: 0px;"">一行一个整数n。（3 &lt;= n &lt;= 10）<br /></p><p>一行n个整数表示n位老师打分情况数组score，用空格分隔。（0 &lt;= score[i] &lt;= 60）</p>","<p>按题目描述中的代码进行输出，用空格分隔。<br /></p>","[{""input"": ""3\n60 60 60"", ""output"": ""60 60 60.00""}]","e1b95d54d691cd3f2dac6549511e7e0e","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C""]","{}","2021-01-23 10:10:25.357265+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",10,1,1,"2","{""0"": 1, ""4"": 2, ""-1"": 7}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
565,"结构体数组","<p>输入学生人数n，然后构建一个结构体数组，结构体包含学号和学生成绩（都是int类型），然后输出成绩不及格（&lt;60）的学生的学号。<br /></p>","<p>输入n，接着输入n名学生的信息，主要是学号和成绩；<br /></p>","<p>输出成绩不及格学生的学号，每个学号一行。<br /></p>","[{""input"": ""4\n121212 5\n121213 100\n121216 70\n121218 60"", ""output"": ""121212""}]","bbe667f9f42e32a1460b36723ee224e7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:10:39.731616+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",1,1,1,"3","{""0"": 1}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
566,"链表操作","<p>输入一串int类型的数字以-1结束输入，将读取的不重复的数字构建成链表。并按照指示删除指定数字的节点，最后将剩余的链表的数字依次输出。<br /></p>","<p style=""margin-left: 0px;"">输入要求链表的输入用-1结束，将不重复的数字构建成链表，比如 1 2 1 2 5 6 4 -1 构建成的链表 1 2 5 6 4；</p><p>接着输入要删除的数字。</p>","<p>输出删除指定数字后的链表，中间用空格隔开，最后一个数字有空格。<br /></p>","[{""input"": ""1 2 3 4 5 6 5 4 6 -1\n4"", ""output"": ""1 2 3 5 6""}]","7996139101eb390cfcbb73d57d2053e7","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>链表的中重复元素的查找，要在构建时进行，即链表中存在了不插入，不存在将节点插入到链表最后<br /></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:10:49.210094+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,2,1,"4","{""0"": 2}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
567,"寻找第一个L位素数","<p>给定N 位（0&lt;= N &lt;= 100) 数字 num。</p><p>可以将数字num看成是一个长度位N的字符串，从左至右观察数字num，查找到第一个长度为L（1&lt;= L &lt;= 5) 的连续“子串”，且该“子串” 为素数。</p><p>输出这个素数。</p><p>（关键词：第一个、长度为L（即L位数）、素数）<br /></p>","<p>第一行： 正整数N 和 L，之间以空格隔开。</p><p>第二行： N个数字。每个数字 均在 [1,9] 范围内，不包含0。<b>故无需考虑前导0的情况。</b></p>","<p>如果找到第一个L位素数，则输出该数。</p><p>如果没有找到，则输出404。</p>","[{""input"": ""15 5\n436549877255444"", ""output"": ""49877""}, {""input"": ""10 3\n4244686426"", ""output"": ""404""}]","28347c2449dbee8bf8254f64df29b69a","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>在Sample1中，输入为436549877255444</p><p>从左到右长度为5的数分别为：43654 36549 65498 54987 49877 ........<br />其中第一个素数为 49877，所以输出为49877</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:11:03.160354+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,2,1,"5","{""0"": 2}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
568,"检查密码","<p>登入网站是一般需要输入密码。现在写一个自动检查用户密码的程序。具体要求如下：<br /><br /></p><p>密码不少于6个字符组成，且不能超过30个字符。<b>密码只能有英文字母、数字和小数点 `.`，还必须既有字母也有数字。</b></p><p>- 如果密码合法，输出 yes</p><p>- 如果密法太长，不论合法与否，都输出 too long</p><p>- 如果密码太短，不论合法与否，都输出 too short</p><p>- 如果密码长度合法，但存在不合法字符，则输出 illegal char</p><p>- 如果密码长度合法，但只有字母没有数字，则输出 need num</p><p>- 如果密码长度合法，但只有数字没有字母，则输出 need char</p><p>每次只输出一种提醒，提醒种类优先级由上到下依次递减。</p>","<p>输入为一行密码</p>","<p>输出为判断密码结果的信息。输出的信息首尾不能有空格。</p>","[{""input"": ""Ecun.2020"", ""output"": ""yes""}, {""input"": ""Ecun 2020"", ""output"": ""illegal char""}]","419d85420ff35abf3174a5f64dd9c6c0","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-01-23 10:11:09.409824+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",3,1,1,"6","{""0"": 1, ""4"": 2}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
569,"递归求最大值","<p>给出n个元素，必须<b>使用递归</b>的方法求出元素中的最大值</p>","<p>第一行输入n表示元素个数</p><p>第二行输入n个整数</p>","<p>输出n个整数中的最大值</p>","[{""input"": ""3\n14 5 10"", ""output"": ""14""}]","76d83293018f58a8f5910bc95e227e8c","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>1 &lt;= n &lt;= 30</p>","[""C""]","{}","2021-01-23 10:11:18.240645+00",NULL,2000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",2,2,1,"7","{""0"": 2}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
570,"字符串排序","<p>输入若干个单词，按字典序将单词输出<br /></p>","<p>输入一行，由多个单词组成（单词间由空格分隔），字符串以换行符结尾</p>","<p>按照字典序排列，每行输出一个单词</p>","[{""input"": ""data science days"", ""output"": ""data\ndays\nscience""}, {""input"": ""aa ab ac b a"", ""output"": ""a\naa\nab\nac\nb""}]","41fd9e202059cb03f3ef3ecdde6ba7ce","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","<p>单词由26个小写英文组成</p><p>字典序：</p><p>在字典序中，&#039;a&#039;&lt;&#039;b&#039;&lt;&#039;c&#039;&lt; ... &lt; &#039;z&#039;</p><p>从每个单词的第一个字符开始比较，例如&#039;apple&#039; 排在&#039; banana&#039;前</p><p>若第一个字符相同，则比较第二个字符，例如&#039;apple&#039;排在&#039;angel&#039;前</p><p>以此类推，得到所有单词的字典序排列</p>","[""C""]","{}","2021-01-23 10:11:28.393432+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",6,3,1,"8","{""0"": 3, ""4"": 2, ""-1"": 1}",0,64,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
571,"实现一个通用的循环队列","<p>•向队列中插入若干个元素（循环队列最大容量为8），访问并移除队列中的所有元素。（当插入元素大于队列最大容量时输出This queue is overflow!）<br /></p>","<p>•输入：要插入的元素的个数</p><p>•要插入的每一个元素的值</p>","<p>•输出：访问并移除的每一个元素的值<br /></p>","[{""input"": ""9\n1 4 6 7 9 10 5 3 8"", ""output"": ""This queue is overflow!\n1 4 6 7 9 10 5 3""}]","60e9a86a5a5a6c4e89573f07d7aff903","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","<p>需要用模版实现！不要使用STL</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-03-14 07:57:07.94006+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",264,74,511,"1","{""0"": 74, ""1"": 1, ""4"": 3, ""-1"": 56, ""-2"": 130}",0,65,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
572,"用队列实现滑动窗口","<p>用队列实现下面功能，给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。<br /></p>","<p>第一行为数组的长度（&lt;10），第二行为数组的元素，第三行为滑动窗口的大小k</p>","<p>输出所有滑动窗口里的最大值</p>","[{""input"": ""8\n1 3 -1 -3 5 3 6 7\n3"", ""output"": ""3 3 5 5 6 7""}]","60630002d2d2a82827057ec12980de68","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-03-14 08:43:14.040233+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",216,75,511,"2","{""0"": 75, ""4"": 13, ""-1"": 37, ""-2"": 91}",0,65,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
573,"约瑟夫循环链表问题","<p style=""margin-left: 0px;"">约瑟夫问题：</p><p>n个人围成一个圆圈，首先第1个人<b>从1开始</b>顺时针报数，报到第m个人，令其出列。然后再从下一个人开始，从1顺时针报数，报到第m个人，再令其出列，…，如此下去,直到圆圈中只剩一个人为止。此人即为优胜者。</p>","<p>输入两个数，n和m。<br /></p>","<p>输出优胜者的编号。<br /></p>","[{""input"": ""5 3"", ""output"": ""4""}]","720416d86ebfa6dda7072bb38c459552","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-03-18 13:07:15.826458+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",238,73,511,"1","{""0"": 73, ""1"": 8, ""4"": 54, ""-1"": 59, ""-2"": 44}",0,66,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
574,"选若干数和为K","<p>给定整数序列a1，a2，.....，an，判断是否可以从中选出若干数，使他们的和恰好为k。<br /></p>","<p>第一行一个正整数n，第二行整数序列a1，a2，.....，an，第三行一个整数k</p>","<p>存在和为k，输出“Yes”，反之输出“No”。注意不带引号。</p>","[{""input"": ""4\n1 2 5 7\n13"", ""output"": ""Yes""}, {""input"": ""4\n1 2 5 7\n11"", ""output"": ""No""}]","a01633b01f080dd5c1daa8b70b8377c3","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-02 06:19:56.60127+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",237,68,1588,"3","{""0"": 68, ""4"": 11, ""-1"": 107, ""-2"": 51}",0,39,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
577,"二分查找","<p>给定一个元素为n的升序整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1<br /></p>","<p>元素个数为n（&lt;30）的升序数组nums<br /></p>","<p>target在数组中的下标，没有找到则返回-1<br /></p>","[{""input"": ""5\n1 2 3 4 5\n3"", ""output"": ""2""}, {""input"": ""2\n1 3\n4"", ""output"": ""-1""}]","445a6811ee4875d4fe36458d2b0135f7","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-10 10:28:20.402521+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",132,68,511,"1","{""0"": 68, ""1"": 9, ""4"": 2, ""-1"": 14, ""-2"": 39}",0,67,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
578,"高位基数排序","<p>使用高位基数排序对单词按照字典序排序。</p>","<p>输入两行。</p><p>第一行：一个数字n，代表输入的单词数量。</p><p>第二行：n个单词，每个单词三个字母（只包含小写字母）。</p>","<p>输出一行。</p><p>n个有序的单词，单词之间用空格隔开，末尾不包含空格。</p>","[{""input"": ""9\ndog cat pig cow fox rat bee ant bat"", ""output"": ""ant bat bee cat cow dog fox pig rat""}]","d0888f30d7bad78383bf7a06be815d4e","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>不得使用STL模板。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-15 11:40:38.867402+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",268,62,511,"1","{""0"": 62, ""4"": 94, ""-1"": 76, ""-2"": 36}",0,68,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
579,"归并排序","<p>对下列数字按照大小进行归并排序</p>","<p>输入两行。</p><p>第一行：数字n，代表输入数字的个数。</p><p>第二行：n个数字。</p>","<p>输出一行，n个有序数字，数字之间用空格隔开，末尾不包含空格。</p>","[{""input"": ""9\n85 96 78 35 125 63 25 13 101"", ""output"": ""13 25 35 63 78 85 96 101 125""}]","ad9959dac719dfab486300bdae6db377","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>不得使用STL模板。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-15 11:52:53.613933+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",110,66,511,"2","{""0"": 66, ""4"": 9, ""-1"": 18, ""-2"": 17}",0,68,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
580,"快速排序","<p>使用快速排序算法对下列数字排序。</p>","<p>输入两行。</p><p>第一行：一个数字n，表示需要排序的元素个数。</p><p>第二行：n个数字。</p>","<p>输出一行。n个有序的数字，数字之间空格隔开，末尾不包含空格。</p>","[{""input"": ""9\n85 96 78 35 125 63 25 13 101"", ""output"": ""13 25 35 63 78 85 96 101 125""}]","c01b0cd2eb24f8dd93d405a6441d0095","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>不得使用STL模板。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-15 11:58:08.761754+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",143,66,511,"3","{""0"": 66, ""1"": 5, ""4"": 12, ""-1"": 28, ""-2"": 32}",0,68,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
581,"子集和","<p>有一个正整数数组，数组长度<font>为</font>n<font>且</font><font>小于等于</font>10(<font>数组下标从</font>0<font>开始</font>)。</p><p>现给一个正整数K，<font>请在数组中所有元素中找一个子集，子集中元素之和为</font>K<font>。</font></p><p><font>输出所有子集中，数组下标最大的元素的值。</font></p><p><font>比如 数组为[5,4,2,3,10]，</font>K=9，则可能子集为[5,4], [4,2, 3]由于[4,2,3]<font>中</font><font>3</font><font>的下标更大（为</font>3<font>，</font>[5,4]<font>中</font>4<font>的下标为</font><font>1</font><font>），因此输出</font><font>3</font><font>。</font></p><p><font>如果不存在这样的子集，输出</font><font>-</font>1。</p><p><b>注意数组下标从0开始。</b><br /></p>","<p>第一行一个正整数n，第二行一个长度为n的序列，第三行一个正整数K。</p>","<p>输出所有子集中，子集中元素最大下标的位置。<br /></p>","[{""input"": ""5\n5 4 2 3 10\n9"", ""output"": ""3""}]","1036236139b718ec2d98d5b542e3fcca","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-28 04:21:46.357841+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Mid","",290,40,1588,"3","{""0"": 40, ""1"": 3, ""4"": 10, ""-1"": 185, ""-2"": 52}",0,69,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
582,"找路经","<p style=""text-align: justify;""><font><font><font><font>给定一个由</font></font></font><font><font><font><font>0</font></font></font></font><font><font><font>和</font></font></font><font><font><font><font>1</font></font></font></font><font><font><font>组成的矩阵。现在有一个棋子从左上角的位置走到右下角的位置，规定每次只能前后左右移动，且移动的规则每次只能从</font></font></font><font><font><font><font>0</font></font></font></font><font><font><font>移动到</font></font></font><font><font><font><font>1</font></font></font></font><font><font><font>或者从</font></font></font><font><font><font><font>1</font></font></font></font><font><font><font>移动到</font></font></font><font><font><font><font>0</font></font></font></font><font><font><font>，即不允许从</font></font></font><font><font><font><font>0</font></font></font></font><font><font><font>到</font></font></font><font><font><font><font>0,1</font></font></font></font><font><font><font>到</font></font></font><font><font><font><font>1</font></font></font></font><font><font><font>。求矩阵中是否存在着这样的路径。 比如下图中不存在。（右下角</font></font></font><font><font><font><font>4</font></font></font></font><font><font><font>个</font></font></font><font><font><font><font>1</font></font></font></font><font><font><font>无法移动）</font></font></font></font></p><p style=""text-align: justify;""><font><font><font><font><br /></font></font></font></font></p><p style=""text-align: justify;""><font><font><font><font><img alt=""1.png"" src=""/public/upload/9111959848.png"" width=""436"" height=""152"" /><br /></font></font></font></font></p><p style=""text-align: justify;""><font><font><font><font><br /></font></font></font></font></p><p style=""text-align: justify;""><font><font><font><font><br /></font></font></font></font></p>","<p>第一行输入两个整数m, n（1&lt;m,n&lt;100），分别为矩阵的行数和列数。</p><p>后面m行，每行有n个值，表示对应位置的值（0或1）。</p>","<p>若能找到这样的路径，输出1，不能则输出0；<br /></p>","[{""input"": ""3 3\n0 1 0\n0 1 1\n0 1 1"", ""output"": ""0""}]","d37ec77f004064bc9a77a8f37ac3a235","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-28 04:31:10.08932+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",263,35,594,"4","{""0"": 35, ""1"": 8, ""3"": 2, ""4"": 26, ""-1"": 143, ""-2"": 49}",0,69,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
583,"找路经","<p>1</p>","<p>1</p>","<p>1</p>","[{""input"": ""3 3\n0 1 0\n0 1 1\n0 1 1"", ""output"": ""0""}]","65440cc83eb98e83cb5a870e61201c4a","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-28 04:39:52.187659+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",False,"Low","",0,0,594,"999","{}",0,NULL,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
584,"找路经","<p>1</p>","<p>1</p>","<p>1</p>","[{""input"": ""3 3\n0 1 0\n0 1 1\n0 1 1"", ""output"": ""0""}]","65440cc83eb98e83cb5a870e61201c4a","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-28 04:40:40.926568+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,594,"1","{}",0,70,True,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
585,"寻找第K近的点","<p>我们有一个由平面上的点组成的列表points。</p><p>需要从中找出第K个距离原点(0, 0)最近的点。假设答案唯一。</p><p>规定不准用STL。 用STL实现排序功能一律不得分。</p>","<p>第一行一个数字N，表示points的个数。</p><p>接下来，N行，每行两个数字X，Y，表示一个点的坐标。</p><p>最后一行是数字K，表示寻找第K个距离原点最近的点。</p>","<p>输出一行，只有一个点，表示距离原点第K近的点。</p>","[{""input"": ""2\n1 3\n-2 2\n1"", ""output"": ""-2 2""}, {""input"": ""3\n3 3\n5 -1\n-2 4\n2"", ""output"": ""-2 4""}]","bb70cbc9ea5be5a8994f2ee8528dca41","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>不得使用STL实现排序。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-28 04:56:57.260525+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",239,58,511,"2","{""0"": 58, ""1"": 16, ""4"": 4, ""-1"": 125, ""-2"": 36}",0,69,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
586,"合并升序链表","<p>将两个升序链表合并为一个新的<b>升序</b>链表并返回。</p><p>新链表是通过拼接给定的两个链表的所有节点组成的。</p><p>规定不准用STL，必须用链表实现功能。用STL实现链表功能一律不得分。<br /></p>","<p>第一行，一个数字N，表示list1的长度。</p><p>第二行，list1的内容，N个升序的数字。</p><p>第三行，一个数字M，表示list2的长度。</p><p>第四行，list2的内容，M个升序的数字。</p>","<p>输出一行。表示合并之后的升序链表。</p>","[{""input"": ""3\n1 2 4\n2\n3 5"", ""output"": ""1 2 3 4 5""}]","9e771a6d512856a4a7de3fabc609d016","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>不得使用STL。<br /></p><p>必须使用链表实现。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-04-28 05:07:44.601389+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",126,45,511,"1","{""0"": 45, ""1"": 5, ""4"": 28, ""-1"": 32, ""-2"": 16}",0,69,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
587,"二叉树的构建、查找和删除","<p>1. 给出后序遍历序列,构建二叉树。<br /></p><p>上述二叉树实际是一颗二叉排序树，请实现程序</p><p>2. 查找c节点，输出从树根到c节点的路径。</p><p>3. 删除其中的m节点，使得删除后仍为二叉排序树。</p>","<p>输入的第一行是后序遍历序列</p><p>第二行第一个字符是所要查找节点，第二个字符是所要删除的节点</p>","<p>输出的第一行是查找的路径（字符之间用空格隔开）</p><p>第二行是删除指定节点后的中序遍历结果（字符之间用空格隔开）</p>","[{""input"": ""###ca##ji####spom\no i"", ""output"": ""m o\na c j m o p s""}, {""input"": ""##1##32##5##764\n6 3"", ""output"": ""4 6\n1 2 4 5 6 7""}]","4ddde2e6e458e3db888c174050551512","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-05-09 07:35:17.770336+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",236,62,594,"1","{""0"": 62, ""4"": 11, ""-1"": 130, ""-2"": 33}",0,71,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
588,"堆排序","<p style=""margin-left: 0px;"">给出n个坐标点&lt;x1,y1&gt;, &lt;x2, y2&gt;…..&lt;xn, yn&gt;，请对他们进行堆排序。坐标点的大小关系是：如果 xi&gt; xj, 则 &lt;xi,yi&gt;  大于 &lt;xj, yj&gt;；若 xi=xj 且 yi &gt;yj, 那么同样有&lt;xi,yi&gt;  大于 &lt;xj, yj&gt;。</p><p>请使用堆排序完成，建议使用C++的面向对象的程序设计。</p>","<p style=""margin-left: 0px;"">输入部分包括几个部分：</p><p>第一行，一个整型数，表示输入的坐标个数N。</p><p>第二行至第N+1行，每行包括两个整型数，分别表示坐标的X和Y值；</p>","<p>输出N行排序后的坐标，每行表示坐标的X和Y值，输出格式为坐标格式(X,Y)，最后不要留换行空格。<br /></p>","[{""input"": ""4\n9 1\n3 6\n1 1\n2 8"", ""output"": ""(1,1)\n(2,8)\n(3,6)\n(9,1)""}]","633d69d5d205b9c6f92c8669ff9a1642","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","<p>必须使用堆排序完成。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-05-31 01:00:06.065198+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",111,65,511,"1","{""0"": 65, ""4"": 1, ""-1"": 33, ""-2"": 12}",0,72,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
589,"堆排序的应用——topk","<p>有一堆二维坐标点&lt;x1,y1&gt;, &lt;x2, y2&gt;…..&lt;xn, yn&gt;。</p><p>假定坐标点是一个一个来的，请利用堆，能时刻报告数据中的最小的k项。比如k=1,  有4个坐标数据 &lt;2,2&gt;, &lt;1,1&gt;, &lt;3,3&gt;, &lt;0,0&gt; 依次到来。那么当来第一个&lt;2,2&gt;时， top-1的值是&lt;2,2&gt;, 再来一个数据&lt;1,1&gt;,这时top-1的值变为了 &lt;1,1&gt;, 再来一个&lt;3,3&gt;数据，top-1还是&lt;1,1&gt;, 第四个数据&lt;0,0&gt;到了后，top-1 就变为了 &lt;0,0&gt;。<br /></p>","<p style=""margin-left: 0px;"">输入部分包括几个部分：</p><p>第一行，两个整型数，表示输入的坐标个数N以及K值。</p><p>第二行至第N+1行，每行包括两个整型数，分别表示坐标的X和Y值；</p>","<p style=""margin-left: 0px;"">输出若干行，每行表示坐标的X和Y值，输出格式为坐标格式(X,Y)，最后不要留换行空格。</p><p>注意：输入的前K-1个数时不需要打印，当输入第K个值时，每次输入一个坐标，返回topK个坐标，</p><p>注意每次输出的K个坐标时由小到大排序的。</p>","[{""input"": ""4 1\n2 2\n1 1\n3 3\n0 0"", ""output"": ""(2,2)\n(1,1)\n(1,1)\n(0,0)""}]","2bc82596062a11d4601d2aa39f082e7d","[{""score"": 50, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 50, ""input_name"": ""2.in"", ""output_name"": ""2.out""}]","<p>必须使用堆排序完成。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-05-31 01:02:53.532489+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",135,63,511,"2","{""0"": 63, ""4"": 3, ""-1"": 63, ""-2"": 6}",0,72,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
590,"二叉树","<p>给定一个带#号的先序遍历序列，实现以下操作：</p><p style=""margin-left: 18pt;"">1.重建该二叉树；</p><p style=""margin-left: 18pt;"">2.判断该树是否是一颗平衡二叉树(平衡树的定义，树上的任何一个节点，其左右子树高度之差小于等于1)。</p>","<p>输入的第一行是一个数字n，表示序列的大小。</p><p>输入的第二行是带#的整数序列（中间以空格分开），为某二叉树的先序遍历序列。<br /></p>","<p>输出一行，true或者false，表示是否为平衡二叉树。<br /></p>","[{""input"": ""17\n8 6 3 # # 7 11 # # # 10 # 2 # 5 # #"", ""output"": ""false""}, {""input"": ""11\n5 3 4 # # # 6 # 7 # #"", ""output"": ""true""}]","e170c260745e65e5d48773c3e57a6d01","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-11 12:25:29.913473+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",363,15,511,"1","{""0"": 15, ""1"": 1, ""3"": 4, ""4"": 51, ""-1"": 194, ""-2"": 98}",0,73,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
591,"判断二分图","<p style="""">存在一个无向图 ，图中有n 个节点。其中每个节点都有一个介于0到n - 1之间的唯一编号。</p><p style="""">给你一个二维数组graph，其中graph[u]是一个节点数组，由节点u的邻接节点组成。形式上，对于graph[u]中的每个v，都存在一条位于节点u和节点v之间的无向边。该无向图同时具有以下属性：</p><ol><li>n不存在自环（graph[u]不包含u）。</li><li>n不存在平行边（graph[u]不包含重复值）。</li><li>n如果v在graph[u]内，那么u也应该在graph[v]内（该图是无向图）。</li><li>n这个图可能不是连通图，也就是说两个节点u和v之间可能不存在一条连通彼此的路径。</li></ol><p>写程序判断该图是否为二分图。</p><p>定义：如果能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，就将这个图称为二分图 。提示，可以用两种颜色通过遍历对该图进行染色。 二分图的话相邻节点颜色一定不相同。</p>","<p>第一行是一个数字 n，代表有 n 个节点，编号从 0 到 n-1。</p><p>接下来 n 行，<b>每行第一个数字 K 代表这行后面有 K 个数字</b>。</p><p>下面的第 1 行后面的 K 个数字表示与编号为 0 的节点相邻的节点编号，这一行相当于graph[0]；</p><p>下面的第 2 行后面的 K 个数字表示与编号为 1 的节点相邻的节点编号，这一行相当于graph[1]；</p><p>……</p><p>下面的第 n 行后面的 K 个数字表示与编号为 n-1 的节点相邻的节点编号，这一行相当于graph[n-1]；。</p>","<p>输出只有一行，true或者false。</p><p>如果图是二分图，返回true；否则，返回false。<br /></p>","[{""input"": ""4\n2 1 3\n2 0 2\n2 1 3\n2 0 2"", ""output"": ""true""}]","ed74c7dcf2a4b5eef0e213cc3deb1bd6","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p>Sample 1:可以将节点分成两组: {0, 2}和{1, 3}。</p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-11 12:41:15.054449+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",258,14,511,"2","{""0"": 14, ""1"": 14, ""4"": 13, ""-1"": 151, ""-2"": 66}",0,73,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
592,"乒乓球比赛","<p>有一群人，打乒乓球比赛，两两捉对撕杀，每两个人之间最多打一场比赛。</p><p>球赛的规则如下：</p><ol><li>如果A打败了B，B又打败了C，而A与C之间没有进行过比赛，那么就认定，A一定能打败C。</li><li>如果A打败了B，B又打败了C，而且，C又打败了A，那么A、B、C三者都不可能成为冠军。</li></ol><p>根据这个规则，无需循环较量，或许就能确定冠军。你的任务就是面对一群比赛选手，在经过了若干场撕杀之后，确定是否已经实际上产生了冠军(冠军要求能够击败所有人)。</p>","<p>每群选手都以一个整数n(n&lt;1000)开头，后跟n对选手的比赛结果，比赛结果以一对选手名字（中间隔一空格）表示，前者战胜后者。<br /></p>","<p>输出只有一行，yes或者no。(yes表示可以产生冠军)<br /></p>","[{""input"": ""5\na c\nc d\nd e\nb e\na d"", ""output"": ""no""}]","85f772e462dc3e7ac19d8b0e5c811802","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","<p><b>注意，每个人的名字可能不止一个字母。</b></p>","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-11 12:47:16.461932+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",221,20,511,"3","{""0"": 20, ""1"": 12, ""4"": 13, ""-1"": 122, ""-2"": 54}",0,73,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
593,"邻接表&Kruskal算法","<p>用邻接表存储图，利用该邻接表使用Kruskal算法生成最小生成树</p>","<p><img alt=""2021-06-18_16-24.png"" src=""http://jf.shuishan.net.cn/public/upload/cc776dd8c4.png"" width=""630"" height=""245"" /></p><p>1. 输入的第一行为两个值v, e</p><p>v表示图的节点数量，e表示图中边的数量<br /></p><p>2. 接下来e行，每行有三个值</p><p>第一个值为源顶点、第二个值为目的顶点、表示这两个顶点之间有边连接，第三个值为边的权重值（均为int类型）<br /></p>","<p>输出最小生成树的权值和</p>","[{""input"": ""6 10\n0 1 6\n0 3 4\n1 2 10\n1 3 7\n1 4 7\n2 3 8\n2 4 5\n2 5 6\n3 4 12\n4 5 7"", ""output"": ""28""}]","243e5e38c0fbdd38d5a1742b7f2e4fe2","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 33, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-18 08:38:05.896159+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",110,49,594,"1","{""0"": 49, ""4"": 18, ""-1"": 21, ""-2"": 22}",0,74,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
594,"求整数均值","<p>输入4个整数，计算并输出这些整数的和与平均值，其中平均值精确到小数点后1位，试编写相应程序</p>","<p>输入4个整数。</p>","<p>计算并输出这些整数的和与平均值（float形式），其中平均值精确到小数点后1位。</p>","[{""input"": ""1 2 3 4"", ""output"": ""10 2.5""}]","4e8470fe761de2d58844067d96764c9e","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-25 04:27:48.878468+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",1,1,1,"2-1","{""0"": 1}",0,75,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
595,"阶梯电价","<p>为提倡居民节约用电，某省电力公司执行“阶梯电价”，安装一户一表的居民用户电价分别为两个“阶梯”：月用电量50千瓦时（含50千瓦时）以内的，电价为0.53元/千瓦时；超过50千瓦时的，超出部分的用电量电价上调0.05元/千瓦时。输入用户的月用电量（千瓦时），计算并输出该用户应支付的电费（元）。试着编写相应程序。</p>","<p>输入用电量的整数形式。</p>","<p>输出电费，用float形式。</p>","[{""input"": ""50"", ""output"": ""26.500000""}]","93b60abaff25f4c66996c202de063371","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-25 04:33:35.707003+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"2-2","{}",0,75,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
596,"序列求和","<p>输入两个正整数 m 和 n (0 &lt; m &lt;= n)，求和：i ^ 2 + 1 / i ( i 从 m 到 n )，保留最后6位小数，试编写相应的程序。</p>","<p>输入两个正整数分别对应m和n。</p>","<p>输出用double形式。计算公式：i ^ 2 + 1 / i ， i 从 m 到 n 的和</p>","[{""input"": ""1 2"", ""output"": ""6.500000""}]","cc7d3e5219390558218fad24dca6c571","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-25 04:37:08.76609+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"2-3","{}",0,75,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
597,"求交错序列前n项的和","<p>输入一个正整数n，计算交错序列1-2/3+3/5-4/7+5/9-6/11+......的前n项之和，试编写相应程序</p>","<p>输入一个正整数形式n</p>","<p>输出数值为double形式，最后保留小数点后六位。</p>","[{""input"": ""56"", ""output"": ""0.390467""}]","1f3301b3aaf0a9141e43ae0eabdd2892","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-25 04:40:01.241504+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"2-4","{}",0,75,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
598,"平方根求和","<p>输入一个正整数n，计算1+\sqrt(2)+\sqrt(3)+......+\sqrt(n)的值（保留2位小数）。可能包含头文件marth.h，并调用sqrt()函数求平方根。试编写相应程序。</p>","<p>输入一个正整数n</p>","<p>输出一个保留两位小数的求和值。</p>","[{""input"": ""4561"", ""output"": ""205385.52""}]","9bdffe3687e5570c7c501b067bcdfcbb","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-25 04:42:39.601439+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"2-5","{}",0,75,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
599,"求给顶序列前n项的和（1!+2!+3!+......+n!）","<p>输入一个正整数n，求e=1!+2!+3!+......+n!，要求定义调用函数fact(n)计算n!，函数类型是double。试编写相应的程序。</p>","<p>输入一个正整数n。</p>","<p>输出最后阶乘求和的值，用double形式，不保留小数点。</p>","[{""input"": ""12"", ""output"": ""522956313""}]","827d455764d51bb38cce6ce66fbb95ed","[{""score"": 10, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 10, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 10, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 10, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 10, ""input_name"": ""5.in"", ""output_name"": ""5.out""}, {""score"": 10, ""input_name"": ""6.in"", ""output_name"": ""6.out""}, {""score"": 10, ""input_name"": ""7.in"", ""output_name"": ""7.out""}, {""score"": 10, ""input_name"": ""8.in"", ""output_name"": ""8.out""}, {""score"": 10, ""input_name"": ""9.in"", ""output_name"": ""9.out""}, {""score"": 10, ""input_name"": ""10.in"", ""output_name"": ""10.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-06-25 04:45:25.264498+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"2-6","{}",0,75,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
600,"保留3位小数","<p>用户输入一个浮点数，格式化输出保留3位小数。<br /></p>","<p>输入一个浮点数</p>","<p>保留小数点后3位的浮点数<br /></p>","[{""input"": ""3.14159"", ""output"": ""3.142""}]","f58b46d1525bebee40a78dfcf4ee6238","[{""score"": 33, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 33, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 34, ""input_name"": ""3.in"", ""output_name"": ""3.out""}]","","[""Python3""]","{}","2021-07-03 07:41:48.413671+00",NULL,1000,256,False,NULL,NULL,NULL,"OI",True,"Low","",4,3,1688,"1","{""0"": 3, ""4"": 1}",100,76,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
601,"简单数学运算","<p>输入两个整数 a 和 b，顺序输出加、减和乘法运算的结果。<br /></p>","<p>第一行输入整数 a</p><p>第二行输入整数 b</p>","<p>第一行输出 a + b 的结果</p><p>第二行输出 a - b 的结果</p><p>第三行输出 a * b 的结果</p>","[{""input"": ""3\n2"", ""output"": ""5\n1\n6""}]","d5997fb4401d38a779f3a2a5156206ba","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3""]","{}","2021-07-03 08:20:38.727815+00",NULL,1000,256,False,NULL,NULL,NULL,"OI",True,"Low","",2,2,1688,"2","{""0"": 2}",100,76,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
602,"换披萨","<p>披萨的尺寸一般分6-15英寸几种，1英寸约等于2.54厘米，将英寸直径乘以2.54即可得出以厘米为单位的直径。例如6寸披萨，即为6乘以2.54，得出结果为15.24厘米。 然而披萨加工时并不是严格到毫米不差的，考虑到加工过程，真正的有效直径需要去掉小数点后面数字。例如6寸披萨的标准直径为15.24厘米，实际有效直径一般为15厘米。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬</p><p>披萨店经常会对顾客说：您订购的某尺寸的披萨卖完了，是否可以更换为多个小尺寸的披萨。例如：您订购的9寸披萨卖完了，可以给您2个6寸的披萨吗？‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬</p><p>假设披萨厚度相同，价格与面积成正比，试问一个 m 英寸的大披萨至少要更换几个 n 英寸的小披萨，顾客才不吃亏？</p>","<p>‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬第一行输入整数 m （英寸），代表顾客打算订购的大披萨的尺寸‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬</p><p>第二行输入整数 n （英寸），代表店家推荐更换的小披萨的尺寸</p>","<p>整数，更换小披萨的数量<br /></p>","[{""input"": ""9\n6"", ""output"": ""3""}]","bdc62fe253df65eb23b90dd185a2e8c3","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3""]","{}","2021-07-03 08:33:22.377112+00",NULL,1000,256,False,NULL,NULL,NULL,"OI",True,"Mid","",1,0,1688,"3","{""8"": 1}",100,76,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
603,"三角形周长与面积","<p>输入的三角形的三条边a、b、c 的长度，计算并依次输出三角形的周长和面积，结果严格保留2位小数。测试用例的数据保证三角形三边数据可以构成三角形。</p><p>三角形面积计算公式：$area=\sqrt{s(s-a)(s-b)(s-c)}$，其中$s=\frac{a+b+c}{2}$。</p>","<p>分三行输入 3 个浮点数，表示三角形的三个边长<br /></p>","<p>三角形的周长和面积，格式参考示例<br /></p>","[{""input"": ""3\n4\n5"", ""output"": ""周长=12.00\n面积=6.00""}]","6c29fc6384f462005efddad41d6d8551","[{""score"": 25, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 25, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 25, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 25, ""input_name"": ""4.in"", ""output_name"": ""4.out""}]","","[""Python3""]","{}","2021-07-03 08:47:09.374335+00",NULL,1000,256,False,NULL,NULL,NULL,"OI",True,"Low","",1,0,1688,"4","{""4"": 1}",100,76,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
604,"03","<p>1</p>","<p>2</p>","<p>3</p>","[{""input"": ""1"", ""output"": ""1""}]","3d8c2c2e72f34987226b2e8189122ec3","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-07-10 12:55:39.992882+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"3","{}",0,77,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
605,"04","<p>4</p>","<p>4</p>","<p>4</p>","[{""input"": ""4"", ""output"": ""4""}]","79de0cb71ace8ae8b41bf2c0b9c95af9","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-07-10 12:56:34.52066+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"4","{}",0,77,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
606,"dd","<p>d</p>","<p>d</p>","<p>d</p>","[{""input"": ""d"", ""output"": ""d""}]","18c99f3a6e920e008b0d03c64f4377dd","[{""score"": 20, ""input_name"": ""1.in"", ""output_name"": ""1.out""}, {""score"": 20, ""input_name"": ""2.in"", ""output_name"": ""2.out""}, {""score"": 20, ""input_name"": ""3.in"", ""output_name"": ""3.out""}, {""score"": 20, ""input_name"": ""4.in"", ""output_name"": ""4.out""}, {""score"": 20, ""input_name"": ""5.in"", ""output_name"": ""5.out""}]","","[""C"", ""C++"", ""Java"", ""Python2"", ""Python3""]","{}","2021-07-14 01:24:35.14244+00",NULL,1000,256,False,NULL,NULL,NULL,"ACM",True,"Low","",0,0,1,"1","{}",0,77,False,False,"{""input"": ""input.txt"", ""output"": ""output.txt"", ""io_mode"": ""Standard IO""}",False
